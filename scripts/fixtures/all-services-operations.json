{
  "services": [
    {
      "service": "accessanalyzer",
      "className": "AccessAnalyzer",
      "operations": [
        "applyArchiveRule",
        "cancelPolicyGeneration",
        "checkAccessNotGranted",
        "checkNoNewAccess",
        "checkNoPublicAccess",
        "createAccessPreview",
        "generateFindingRecommendation",
        "getAccessPreview",
        "getAnalyzedResource",
        "getFinding",
        "getFindingRecommendation",
        "getFindingsStatistics",
        "getFindingV2",
        "getGeneratedPolicy",
        "listAccessPreviewFindings",
        "listAccessPreviews",
        "listAnalyzedResources",
        "listFindings",
        "listFindingsV2",
        "listPolicyGenerations",
        "listTagsForResource",
        "startPolicyGeneration",
        "startResourceScan",
        "tagResource",
        "untagResource",
        "updateFindings",
        "validatePolicy",
        "createAnalyzer",
        "createArchiveRule",
        "deleteAnalyzer",
        "deleteArchiveRule",
        "getAnalyzer",
        "getArchiveRule",
        "listAnalyzers",
        "listArchiveRules",
        "updateAnalyzer",
        "updateArchiveRule"
      ]
    },
    {
      "service": "account",
      "className": "Account",
      "operations": [
        "acceptPrimaryEmailUpdate",
        "deleteAlternateContact",
        "disableRegion",
        "enableRegion",
        "getAccountInformation",
        "getAlternateContact",
        "getContactInformation",
        "getPrimaryEmail",
        "getRegionOptStatus",
        "listRegions",
        "putAccountName",
        "putAlternateContact",
        "putContactInformation",
        "startPrimaryEmailUpdate"
      ]
    },
    {
      "service": "acm",
      "className": "ACM",
      "operations": [
        "addTagsToCertificate",
        "deleteCertificate",
        "describeCertificate",
        "exportCertificate",
        "getAccountConfiguration",
        "getCertificate",
        "importCertificate",
        "listCertificates",
        "listTagsForCertificate",
        "putAccountConfiguration",
        "removeTagsFromCertificate",
        "renewCertificate",
        "requestCertificate",
        "resendValidationEmail",
        "revokeCertificate",
        "updateCertificateOptions"
      ]
    },
    {
      "service": "acm-pca",
      "className": "ACMPCA",
      "operations": [
        "createCertificateAuthority",
        "createCertificateAuthorityAuditReport",
        "createPermission",
        "deleteCertificateAuthority",
        "deletePermission",
        "deletePolicy",
        "describeCertificateAuthority",
        "describeCertificateAuthorityAuditReport",
        "getCertificate",
        "getCertificateAuthorityCertificate",
        "getCertificateAuthorityCsr",
        "getPolicy",
        "importCertificateAuthorityCertificate",
        "issueCertificate",
        "listCertificateAuthorities",
        "listPermissions",
        "listTags",
        "putPolicy",
        "restoreCertificateAuthority",
        "revokeCertificate",
        "tagCertificateAuthority",
        "untagCertificateAuthority",
        "updateCertificateAuthority"
      ]
    },
    {
      "service": "aiops",
      "className": "AIOps",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "createInvestigationGroup",
        "deleteInvestigationGroup",
        "deleteInvestigationGroupPolicy",
        "getInvestigationGroup",
        "getInvestigationGroupPolicy",
        "listInvestigationGroups",
        "putInvestigationGroupPolicy",
        "updateInvestigationGroup"
      ]
    },
    {
      "service": "amp",
      "className": "amp",
      "operations": [
        "getDefaultScraperConfiguration",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "createAlertManagerDefinition",
        "createLoggingConfiguration",
        "createQueryLoggingConfiguration",
        "createRuleGroupsNamespace",
        "createScraper",
        "createWorkspace",
        "deleteAlertManagerDefinition",
        "deleteLoggingConfiguration",
        "deleteQueryLoggingConfiguration",
        "deleteRuleGroupsNamespace",
        "deleteScraper",
        "deleteWorkspace",
        "describeAlertManagerDefinition",
        "describeLoggingConfiguration",
        "describeQueryLoggingConfiguration",
        "describeRuleGroupsNamespace",
        "describeScraper",
        "describeWorkspace",
        "describeWorkspaceConfiguration",
        "listRuleGroupsNamespaces",
        "listScrapers",
        "listWorkspaces",
        "putAlertManagerDefinition",
        "putRuleGroupsNamespace",
        "updateLoggingConfiguration",
        "updateQueryLoggingConfiguration",
        "updateScraper",
        "updateWorkspaceAlias",
        "updateWorkspaceConfiguration"
      ]
    },
    {
      "service": "amplify",
      "className": "Amplify",
      "operations": [
        "createApp",
        "createBackendEnvironment",
        "createBranch",
        "createDeployment",
        "createDomainAssociation",
        "createWebhook",
        "deleteApp",
        "deleteBackendEnvironment",
        "deleteBranch",
        "deleteDomainAssociation",
        "deleteJob",
        "deleteWebhook",
        "generateAccessLogs",
        "getApp",
        "getArtifactUrl",
        "getBackendEnvironment",
        "getBranch",
        "getDomainAssociation",
        "getJob",
        "getWebhook",
        "listApps",
        "listArtifacts",
        "listBackendEnvironments",
        "listBranches",
        "listDomainAssociations",
        "listJobs",
        "listTagsForResource",
        "listWebhooks",
        "startDeployment",
        "startJob",
        "stopJob",
        "tagResource",
        "untagResource",
        "updateApp",
        "updateBranch",
        "updateDomainAssociation",
        "updateWebhook"
      ]
    },
    {
      "service": "amplifybackend",
      "className": "AmplifyBackend",
      "operations": [
        "cloneBackend",
        "createBackend",
        "createBackendAPI",
        "createBackendAuth",
        "createBackendConfig",
        "createBackendStorage",
        "createToken",
        "deleteBackend",
        "deleteBackendAPI",
        "deleteBackendAuth",
        "deleteBackendStorage",
        "deleteToken",
        "generateBackendAPIModels",
        "getBackend",
        "getBackendAPI",
        "getBackendAPIModels",
        "getBackendAuth",
        "getBackendJob",
        "getBackendStorage",
        "getToken",
        "importBackendAuth",
        "importBackendStorage",
        "listBackendJobs",
        "listS3Buckets",
        "removeAllBackends",
        "removeBackendConfig",
        "updateBackendAPI",
        "updateBackendAuth",
        "updateBackendConfig",
        "updateBackendJob",
        "updateBackendStorage"
      ]
    },
    {
      "service": "amplifyuibuilder",
      "className": "AmplifyUIBuilder",
      "operations": [
        "exchangeCodeForToken",
        "getMetadata",
        "listTagsForResource",
        "putMetadataFlag",
        "refreshToken",
        "tagResource",
        "untagResource",
        "createComponent",
        "createForm",
        "createTheme",
        "deleteComponent",
        "deleteForm",
        "deleteTheme",
        "exportComponents",
        "exportForms",
        "exportThemes",
        "getCodegenJob",
        "getComponent",
        "getForm",
        "getTheme",
        "listCodegenJobs",
        "listComponents",
        "listForms",
        "listThemes",
        "startCodegenJob",
        "updateComponent",
        "updateForm",
        "updateTheme"
      ]
    },
    {
      "service": "api-gateway",
      "className": "APIGateway",
      "operations": [
        "createApiKey",
        "createAuthorizer",
        "createBasePathMapping",
        "createDeployment",
        "createDocumentationPart",
        "createDocumentationVersion",
        "createDomainName",
        "createDomainNameAccessAssociation",
        "createModel",
        "createRequestValidator",
        "createResource",
        "createRestApi",
        "createStage",
        "createUsagePlan",
        "createUsagePlanKey",
        "createVpcLink",
        "deleteApiKey",
        "deleteAuthorizer",
        "deleteBasePathMapping",
        "deleteClientCertificate",
        "deleteDeployment",
        "deleteDocumentationPart",
        "deleteDocumentationVersion",
        "deleteDomainName",
        "deleteDomainNameAccessAssociation",
        "deleteGatewayResponse",
        "deleteIntegration",
        "deleteIntegrationResponse",
        "deleteMethod",
        "deleteMethodResponse",
        "deleteModel",
        "deleteRequestValidator",
        "deleteResource",
        "deleteRestApi",
        "deleteStage",
        "deleteUsagePlan",
        "deleteUsagePlanKey",
        "deleteVpcLink",
        "flushStageAuthorizersCache",
        "flushStageCache",
        "generateClientCertificate",
        "getAccount",
        "getApiKey",
        "getApiKeys",
        "getAuthorizer",
        "getAuthorizers",
        "getBasePathMapping",
        "getBasePathMappings",
        "getClientCertificate",
        "getClientCertificates",
        "getDeployment",
        "getDeployments",
        "getDocumentationPart",
        "getDocumentationParts",
        "getDocumentationVersion",
        "getDocumentationVersions",
        "getDomainName",
        "getDomainNameAccessAssociations",
        "getDomainNames",
        "getExport",
        "getGatewayResponse",
        "getGatewayResponses",
        "getIntegration",
        "getIntegrationResponse",
        "getMethod",
        "getMethodResponse",
        "getModel",
        "getModels",
        "getModelTemplate",
        "getRequestValidator",
        "getRequestValidators",
        "getResource",
        "getResources",
        "getRestApi",
        "getRestApis",
        "getSdk",
        "getSdkType",
        "getSdkTypes",
        "getStage",
        "getStages",
        "getTags",
        "getUsage",
        "getUsagePlan",
        "getUsagePlanKey",
        "getUsagePlanKeys",
        "getUsagePlans",
        "getVpcLink",
        "getVpcLinks",
        "importApiKeys",
        "importDocumentationParts",
        "importRestApi",
        "putGatewayResponse",
        "putIntegration",
        "putIntegrationResponse",
        "putMethod",
        "putMethodResponse",
        "putRestApi",
        "rejectDomainNameAccessAssociation",
        "tagResource",
        "testInvokeAuthorizer",
        "testInvokeMethod",
        "untagResource",
        "updateAccount",
        "updateApiKey",
        "updateAuthorizer",
        "updateBasePathMapping",
        "updateClientCertificate",
        "updateDeployment",
        "updateDocumentationPart",
        "updateDocumentationVersion",
        "updateDomainName",
        "updateGatewayResponse",
        "updateIntegration",
        "updateIntegrationResponse",
        "updateMethod",
        "updateMethodResponse",
        "updateModel",
        "updateRequestValidator",
        "updateResource",
        "updateRestApi",
        "updateStage",
        "updateUsage",
        "updateUsagePlan",
        "updateVpcLink"
      ]
    },
    {
      "service": "apigatewaymanagementapi",
      "className": "ApiGatewayManagementApi",
      "operations": [
        "deleteConnection",
        "getConnection",
        "postToConnection"
      ]
    },
    {
      "service": "apigatewayv2",
      "className": "ApiGatewayV2",
      "operations": [
        "createApi",
        "createApiMapping",
        "createAuthorizer",
        "createDeployment",
        "createDomainName",
        "createIntegration",
        "createIntegrationResponse",
        "createModel",
        "createRoute",
        "createRouteResponse",
        "createRoutingRule",
        "createStage",
        "createVpcLink",
        "deleteAccessLogSettings",
        "deleteApi",
        "deleteApiMapping",
        "deleteAuthorizer",
        "deleteCorsConfiguration",
        "deleteDeployment",
        "deleteDomainName",
        "deleteIntegration",
        "deleteIntegrationResponse",
        "deleteModel",
        "deleteRoute",
        "deleteRouteRequestParameter",
        "deleteRouteResponse",
        "deleteRouteSettings",
        "deleteRoutingRule",
        "deleteStage",
        "deleteVpcLink",
        "exportApi",
        "getApi",
        "getApiMapping",
        "getApiMappings",
        "getApis",
        "getAuthorizer",
        "getAuthorizers",
        "getDeployment",
        "getDeployments",
        "getDomainName",
        "getDomainNames",
        "getIntegration",
        "getIntegrationResponse",
        "getIntegrationResponses",
        "getIntegrations",
        "getModel",
        "getModels",
        "getModelTemplate",
        "getRoute",
        "getRouteResponse",
        "getRouteResponses",
        "getRoutes",
        "getRoutingRule",
        "getStage",
        "getStages",
        "getTags",
        "getVpcLink",
        "getVpcLinks",
        "importApi",
        "listRoutingRules",
        "putRoutingRule",
        "reimportApi",
        "resetAuthorizersCache",
        "tagResource",
        "untagResource",
        "updateApi",
        "updateApiMapping",
        "updateAuthorizer",
        "updateDeployment",
        "updateDomainName",
        "updateIntegration",
        "updateIntegrationResponse",
        "updateModel",
        "updateRoute",
        "updateRouteResponse",
        "updateStage",
        "updateVpcLink"
      ]
    },
    {
      "service": "app-mesh",
      "className": "AppMesh",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "createGatewayRoute",
        "createMesh",
        "createRoute",
        "createVirtualGateway",
        "createVirtualNode",
        "createVirtualRouter",
        "createVirtualService",
        "deleteGatewayRoute",
        "deleteMesh",
        "deleteRoute",
        "deleteVirtualGateway",
        "deleteVirtualNode",
        "deleteVirtualRouter",
        "deleteVirtualService",
        "describeGatewayRoute",
        "describeMesh",
        "describeRoute",
        "describeVirtualGateway",
        "describeVirtualNode",
        "describeVirtualRouter",
        "describeVirtualService",
        "listGatewayRoutes",
        "listMeshes",
        "listRoutes",
        "listVirtualGateways",
        "listVirtualNodes",
        "listVirtualRouters",
        "listVirtualServices",
        "updateGatewayRoute",
        "updateMesh",
        "updateRoute",
        "updateVirtualGateway",
        "updateVirtualNode",
        "updateVirtualRouter",
        "updateVirtualService"
      ]
    },
    {
      "service": "appconfig",
      "className": "AppConfig",
      "operations": [
        "createApplication",
        "createConfigurationProfile",
        "createDeploymentStrategy",
        "createEnvironment",
        "createExtension",
        "createExtensionAssociation",
        "createHostedConfigurationVersion",
        "deleteApplication",
        "deleteConfigurationProfile",
        "deleteDeploymentStrategy",
        "deleteEnvironment",
        "deleteExtension",
        "deleteExtensionAssociation",
        "deleteHostedConfigurationVersion",
        "getAccountSettings",
        "getApplication",
        "getConfiguration",
        "getConfigurationProfile",
        "getDeployment",
        "getDeploymentStrategy",
        "getEnvironment",
        "getExtension",
        "getExtensionAssociation",
        "getHostedConfigurationVersion",
        "listApplications",
        "listConfigurationProfiles",
        "listDeployments",
        "listDeploymentStrategies",
        "listEnvironments",
        "listExtensionAssociations",
        "listExtensions",
        "listHostedConfigurationVersions",
        "listTagsForResource",
        "startDeployment",
        "stopDeployment",
        "tagResource",
        "untagResource",
        "updateAccountSettings",
        "updateApplication",
        "updateConfigurationProfile",
        "updateDeploymentStrategy",
        "updateEnvironment",
        "updateExtension",
        "updateExtensionAssociation",
        "validateConfiguration"
      ]
    },
    {
      "service": "appconfigdata",
      "className": "AppConfigData",
      "operations": [
        "getLatestConfiguration",
        "startConfigurationSession"
      ]
    },
    {
      "service": "appfabric",
      "className": "AppFabric",
      "operations": [
        "batchGetUserAccessTasks",
        "connectAppAuthorization",
        "createAppAuthorization",
        "createAppBundle",
        "createIngestion",
        "createIngestionDestination",
        "deleteAppAuthorization",
        "deleteAppBundle",
        "deleteIngestion",
        "deleteIngestionDestination",
        "getAppAuthorization",
        "getAppBundle",
        "getIngestion",
        "getIngestionDestination",
        "listAppAuthorizations",
        "listAppBundles",
        "listIngestionDestinations",
        "listIngestions",
        "listTagsForResource",
        "startIngestion",
        "startUserAccessTasks",
        "stopIngestion",
        "tagResource",
        "untagResource",
        "updateAppAuthorization",
        "updateIngestionDestination"
      ]
    },
    {
      "service": "appflow",
      "className": "Appflow",
      "operations": [
        "cancelFlowExecutions",
        "createConnectorProfile",
        "createFlow",
        "deleteConnectorProfile",
        "deleteFlow",
        "describeConnector",
        "describeConnectorEntity",
        "describeConnectorProfiles",
        "describeConnectors",
        "describeFlow",
        "describeFlowExecutionRecords",
        "listConnectorEntities",
        "listConnectors",
        "listFlows",
        "listTagsForResource",
        "registerConnector",
        "resetConnectorMetadataCache",
        "startFlow",
        "stopFlow",
        "tagResource",
        "unregisterConnector",
        "untagResource",
        "updateConnectorProfile",
        "updateConnectorRegistration",
        "updateFlow"
      ]
    },
    {
      "service": "appintegrations",
      "className": "AppIntegrations",
      "operations": [
        "createApplication",
        "createDataIntegration",
        "createDataIntegrationAssociation",
        "createEventIntegration",
        "deleteApplication",
        "deleteDataIntegration",
        "deleteEventIntegration",
        "getApplication",
        "getDataIntegration",
        "getEventIntegration",
        "listApplicationAssociations",
        "listApplications",
        "listDataIntegrationAssociations",
        "listDataIntegrations",
        "listEventIntegrationAssociations",
        "listEventIntegrations",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "updateApplication",
        "updateDataIntegration",
        "updateDataIntegrationAssociation",
        "updateEventIntegration"
      ]
    },
    {
      "service": "application-auto-scaling",
      "className": "ApplicationAutoScaling",
      "operations": [
        "deleteScalingPolicy",
        "deleteScheduledAction",
        "deregisterScalableTarget",
        "describeScalableTargets",
        "describeScalingActivities",
        "describeScalingPolicies",
        "describeScheduledActions",
        "getPredictiveScalingForecast",
        "listTagsForResource",
        "putScalingPolicy",
        "putScheduledAction",
        "registerScalableTarget",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "application-discovery-service",
      "className": "ApplicationDiscoveryService",
      "operations": [
        "associateConfigurationItemsToApplication",
        "batchDeleteAgents",
        "batchDeleteImportData",
        "createApplication",
        "createTags",
        "deleteApplications",
        "deleteTags",
        "describeAgents",
        "describeBatchDeleteConfigurationTask",
        "describeConfigurations",
        "describeContinuousExports",
        "describeExportConfigurations",
        "describeExportTasks",
        "describeImportTasks",
        "describeTags",
        "disassociateConfigurationItemsFromApplication",
        "exportConfigurations",
        "getDiscoverySummary",
        "listConfigurations",
        "listServerNeighbors",
        "startBatchDeleteConfigurationTask",
        "startContinuousExport",
        "startDataCollectionByAgentIds",
        "startExportTask",
        "startImportTask",
        "stopContinuousExport",
        "stopDataCollectionByAgentIds",
        "updateApplication"
      ]
    },
    {
      "service": "application-insights",
      "className": "ApplicationInsights",
      "operations": [
        "addWorkload",
        "createApplication",
        "createComponent",
        "createLogPattern",
        "deleteApplication",
        "deleteComponent",
        "deleteLogPattern",
        "describeApplication",
        "describeComponent",
        "describeComponentConfiguration",
        "describeComponentConfigurationRecommendation",
        "describeLogPattern",
        "describeObservation",
        "describeProblem",
        "describeProblemObservations",
        "describeWorkload",
        "listApplications",
        "listComponents",
        "listConfigurationHistory",
        "listLogPatterns",
        "listLogPatternSets",
        "listProblems",
        "listTagsForResource",
        "listWorkloads",
        "removeWorkload",
        "tagResource",
        "untagResource",
        "updateApplication",
        "updateComponent",
        "updateComponentConfiguration",
        "updateLogPattern",
        "updateProblem",
        "updateWorkload"
      ]
    },
    {
      "service": "application-signals",
      "className": "ApplicationSignals",
      "operations": [
        "batchGetServiceLevelObjectiveBudgetReport",
        "batchUpdateExclusionWindows",
        "getService",
        "listServiceDependencies",
        "listServiceDependents",
        "listServiceLevelObjectiveExclusionWindows",
        "listServiceOperations",
        "listServices",
        "listTagsForResource",
        "startDiscovery",
        "tagResource",
        "untagResource",
        "createServiceLevelObjective",
        "deleteServiceLevelObjective",
        "getServiceLevelObjective",
        "listServiceLevelObjectives",
        "updateServiceLevelObjective"
      ]
    },
    {
      "service": "applicationcostprofiler",
      "className": "ApplicationCostProfiler",
      "operations": [
        "deleteReportDefinition",
        "getReportDefinition",
        "importApplicationUsage",
        "listReportDefinitions",
        "putReportDefinition",
        "updateReportDefinition"
      ]
    },
    {
      "service": "apprunner",
      "className": "AppRunner",
      "operations": [
        "associateCustomDomain",
        "createAutoScalingConfiguration",
        "createConnection",
        "createObservabilityConfiguration",
        "createService",
        "createVpcConnector",
        "createVpcIngressConnection",
        "deleteAutoScalingConfiguration",
        "deleteConnection",
        "deleteObservabilityConfiguration",
        "deleteService",
        "deleteVpcConnector",
        "deleteVpcIngressConnection",
        "describeAutoScalingConfiguration",
        "describeCustomDomains",
        "describeObservabilityConfiguration",
        "describeService",
        "describeVpcConnector",
        "describeVpcIngressConnection",
        "disassociateCustomDomain",
        "listAutoScalingConfigurations",
        "listConnections",
        "listObservabilityConfigurations",
        "listOperations",
        "listServices",
        "listServicesForAutoScalingConfiguration",
        "listTagsForResource",
        "listVpcConnectors",
        "listVpcIngressConnections",
        "pauseService",
        "resumeService",
        "startDeployment",
        "tagResource",
        "untagResource",
        "updateDefaultAutoScalingConfiguration",
        "updateService",
        "updateVpcIngressConnection"
      ]
    },
    {
      "service": "appstream",
      "className": "AppStream",
      "operations": [
        "associateAppBlockBuilderAppBlock",
        "associateApplicationFleet",
        "associateApplicationToEntitlement",
        "associateFleet",
        "batchAssociateUserStack",
        "batchDisassociateUserStack",
        "copyImage",
        "createAppBlock",
        "createAppBlockBuilder",
        "createAppBlockBuilderStreamingURL",
        "createApplication",
        "createDirectoryConfig",
        "createEntitlement",
        "createFleet",
        "createImageBuilder",
        "createImageBuilderStreamingURL",
        "createStack",
        "createStreamingURL",
        "createThemeForStack",
        "createUpdatedImage",
        "createUsageReportSubscription",
        "createUser",
        "deleteAppBlock",
        "deleteAppBlockBuilder",
        "deleteApplication",
        "deleteDirectoryConfig",
        "deleteEntitlement",
        "deleteFleet",
        "deleteImage",
        "deleteImageBuilder",
        "deleteImagePermissions",
        "deleteStack",
        "deleteThemeForStack",
        "deleteUsageReportSubscription",
        "deleteUser",
        "describeAppBlockBuilderAppBlockAssociations",
        "describeAppBlockBuilders",
        "describeAppBlocks",
        "describeApplicationFleetAssociations",
        "describeApplications",
        "describeDirectoryConfigs",
        "describeEntitlements",
        "describeFleets",
        "describeImageBuilders",
        "describeImagePermissions",
        "describeImages",
        "describeSessions",
        "describeStacks",
        "describeThemeForStack",
        "describeUsageReportSubscriptions",
        "describeUsers",
        "describeUserStackAssociations",
        "disableUser",
        "disassociateAppBlockBuilderAppBlock",
        "disassociateApplicationFleet",
        "disassociateApplicationFromEntitlement",
        "disassociateFleet",
        "enableUser",
        "expireSession",
        "listAssociatedFleets",
        "listAssociatedStacks",
        "listEntitledApplications",
        "listTagsForResource",
        "startAppBlockBuilder",
        "startFleet",
        "startImageBuilder",
        "stopAppBlockBuilder",
        "stopFleet",
        "stopImageBuilder",
        "tagResource",
        "untagResource",
        "updateAppBlockBuilder",
        "updateApplication",
        "updateDirectoryConfig",
        "updateEntitlement",
        "updateFleet",
        "updateImagePermissions",
        "updateStack",
        "updateThemeForStack"
      ]
    },
    {
      "service": "appsync",
      "className": "AppSync",
      "operations": [
        "associateApi",
        "associateMergedGraphqlApi",
        "associateSourceGraphqlApi",
        "createApi",
        "createApiCache",
        "createApiKey",
        "createChannelNamespace",
        "createDataSource",
        "createDomainName",
        "createFunction",
        "createGraphqlApi",
        "createResolver",
        "createType",
        "deleteApi",
        "deleteApiCache",
        "deleteApiKey",
        "deleteChannelNamespace",
        "deleteDataSource",
        "deleteDomainName",
        "deleteFunction",
        "deleteGraphqlApi",
        "deleteResolver",
        "deleteType",
        "disassociateApi",
        "disassociateMergedGraphqlApi",
        "disassociateSourceGraphqlApi",
        "evaluateCode",
        "evaluateMappingTemplate",
        "flushApiCache",
        "getApi",
        "getApiAssociation",
        "getApiCache",
        "getChannelNamespace",
        "getDataSource",
        "getDataSourceIntrospection",
        "getDomainName",
        "getFunction",
        "getGraphqlApi",
        "getGraphqlApiEnvironmentVariables",
        "getIntrospectionSchema",
        "getResolver",
        "getSchemaCreationStatus",
        "getSourceApiAssociation",
        "getType",
        "listApiKeys",
        "listApis",
        "listChannelNamespaces",
        "listDataSources",
        "listDomainNames",
        "listFunctions",
        "listGraphqlApis",
        "listResolvers",
        "listResolversByFunction",
        "listSourceApiAssociations",
        "listTagsForResource",
        "listTypes",
        "listTypesByAssociation",
        "putGraphqlApiEnvironmentVariables",
        "startDataSourceIntrospection",
        "startSchemaCreation",
        "startSchemaMerge",
        "tagResource",
        "untagResource",
        "updateApi",
        "updateApiCache",
        "updateApiKey",
        "updateChannelNamespace",
        "updateDataSource",
        "updateDomainName",
        "updateFunction",
        "updateGraphqlApi",
        "updateResolver",
        "updateSourceApiAssociation",
        "updateType"
      ]
    },
    {
      "service": "apptest",
      "className": "AppTest",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "createTestCase",
        "createTestConfiguration",
        "createTestSuite",
        "deleteTestCase",
        "deleteTestConfiguration",
        "deleteTestRun",
        "deleteTestSuite",
        "getTestCase",
        "getTestConfiguration",
        "getTestRunStep",
        "getTestSuite",
        "listTestCases",
        "listTestConfigurations",
        "listTestRunSteps",
        "listTestRunTestCases",
        "listTestRuns",
        "listTestSuites",
        "startTestRun",
        "updateTestCase",
        "updateTestConfiguration",
        "updateTestSuite"
      ]
    },
    {
      "service": "arc-region-switch",
      "className": "ARCRegionswitch",
      "operations": [
        "approvePlanExecutionStep",
        "cancelPlanExecution",
        "getPlanEvaluationStatus",
        "getPlanExecution",
        "getPlanInRegion",
        "listPlanExecutionEvents",
        "listPlanExecutions",
        "listPlansInRegion",
        "listRoute53HealthChecks",
        "startPlanExecution",
        "updatePlanExecution",
        "updatePlanExecutionStep",
        "createPlan",
        "deletePlan",
        "getPlan",
        "listPlans",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "updatePlan"
      ]
    },
    {
      "service": "arc-zonal-shift",
      "className": "ARCZonalShift",
      "operations": [
        "cancelPracticeRun",
        "cancelZonalShift",
        "createPracticeRunConfiguration",
        "deletePracticeRunConfiguration",
        "getAutoshiftObserverNotificationStatus",
        "getManagedResource",
        "listAutoshifts",
        "listManagedResources",
        "listZonalShifts",
        "startPracticeRun",
        "startZonalShift",
        "updateAutoshiftObserverNotificationStatus",
        "updatePracticeRunConfiguration",
        "updateZonalAutoshiftConfiguration",
        "updateZonalShift"
      ]
    },
    {
      "service": "artifact",
      "className": "Artifact",
      "operations": [
        "getAccountSettings",
        "getReport",
        "getReportMetadata",
        "getTermForReport",
        "listCustomerAgreements",
        "listReports",
        "putAccountSettings"
      ]
    },
    {
      "service": "athena",
      "className": "Athena",
      "operations": [
        "batchGetNamedQuery",
        "batchGetPreparedStatement",
        "batchGetQueryExecution",
        "cancelCapacityReservation",
        "createCapacityReservation",
        "createDataCatalog",
        "createNamedQuery",
        "createNotebook",
        "createPreparedStatement",
        "createPresignedNotebookUrl",
        "createWorkGroup",
        "deleteCapacityReservation",
        "deleteDataCatalog",
        "deleteNamedQuery",
        "deleteNotebook",
        "deletePreparedStatement",
        "deleteWorkGroup",
        "exportNotebook",
        "getCalculationExecution",
        "getCalculationExecutionCode",
        "getCalculationExecutionStatus",
        "getCapacityAssignmentConfiguration",
        "getCapacityReservation",
        "getDatabase",
        "getDataCatalog",
        "getNamedQuery",
        "getNotebookMetadata",
        "getPreparedStatement",
        "getQueryExecution",
        "getQueryResults",
        "getQueryRuntimeStatistics",
        "getSession",
        "getSessionStatus",
        "getTableMetadata",
        "getWorkGroup",
        "importNotebook",
        "listApplicationDPUSizes",
        "listCalculationExecutions",
        "listCapacityReservations",
        "listDatabases",
        "listDataCatalogs",
        "listEngineVersions",
        "listExecutors",
        "listNamedQueries",
        "listNotebookMetadata",
        "listNotebookSessions",
        "listPreparedStatements",
        "listQueryExecutions",
        "listSessions",
        "listTableMetadata",
        "listTagsForResource",
        "listWorkGroups",
        "putCapacityAssignmentConfiguration",
        "startCalculationExecution",
        "startQueryExecution",
        "startSession",
        "stopCalculationExecution",
        "stopQueryExecution",
        "tagResource",
        "terminateSession",
        "untagResource",
        "updateCapacityReservation",
        "updateDataCatalog",
        "updateNamedQuery",
        "updateNotebook",
        "updateNotebookMetadata",
        "updatePreparedStatement",
        "updateWorkGroup"
      ]
    },
    {
      "service": "auditmanager",
      "className": "AuditManager",
      "operations": [
        "associateAssessmentReportEvidenceFolder",
        "batchAssociateAssessmentReportEvidence",
        "batchCreateDelegationByAssessment",
        "batchDeleteDelegationByAssessment",
        "batchDisassociateAssessmentReportEvidence",
        "batchImportEvidenceToAssessmentControl",
        "createAssessment",
        "createAssessmentFramework",
        "createAssessmentReport",
        "createControl",
        "deleteAssessment",
        "deleteAssessmentFramework",
        "deleteAssessmentFrameworkShare",
        "deleteAssessmentReport",
        "deleteControl",
        "deregisterAccount",
        "deregisterOrganizationAdminAccount",
        "disassociateAssessmentReportEvidenceFolder",
        "getAccountStatus",
        "getAssessment",
        "getAssessmentFramework",
        "getAssessmentReportUrl",
        "getChangeLogs",
        "getControl",
        "getDelegations",
        "getEvidence",
        "getEvidenceByEvidenceFolder",
        "getEvidenceFileUploadUrl",
        "getEvidenceFolder",
        "getEvidenceFoldersByAssessment",
        "getEvidenceFoldersByAssessmentControl",
        "getInsights",
        "getInsightsByAssessment",
        "getOrganizationAdminAccount",
        "getServicesInScope",
        "getSettings",
        "listAssessmentControlInsightsByControlDomain",
        "listAssessmentFrameworks",
        "listAssessmentFrameworkShareRequests",
        "listAssessmentReports",
        "listAssessments",
        "listControlDomainInsights",
        "listControlDomainInsightsByAssessment",
        "listControlInsightsByControlDomain",
        "listControls",
        "listKeywordsForDataSource",
        "listNotifications",
        "listTagsForResource",
        "registerAccount",
        "registerOrganizationAdminAccount",
        "startAssessmentFrameworkShare",
        "tagResource",
        "untagResource",
        "updateAssessment",
        "updateAssessmentControl",
        "updateAssessmentControlSetStatus",
        "updateAssessmentFramework",
        "updateAssessmentFrameworkShare",
        "updateAssessmentStatus",
        "updateControl",
        "updateSettings",
        "validateAssessmentReportIntegrity"
      ]
    },
    {
      "service": "auto-scaling",
      "className": "AutoScaling",
      "operations": [
        "attachInstances",
        "attachLoadBalancers",
        "attachLoadBalancerTargetGroups",
        "attachTrafficSources",
        "batchDeleteScheduledAction",
        "batchPutScheduledUpdateGroupAction",
        "cancelInstanceRefresh",
        "completeLifecycleAction",
        "createAutoScalingGroup",
        "createLaunchConfiguration",
        "createOrUpdateTags",
        "deleteAutoScalingGroup",
        "deleteLaunchConfiguration",
        "deleteLifecycleHook",
        "deleteNotificationConfiguration",
        "deletePolicy",
        "deleteScheduledAction",
        "deleteTags",
        "deleteWarmPool",
        "describeAccountLimits",
        "describeAdjustmentTypes",
        "describeAutoScalingGroups",
        "describeAutoScalingInstances",
        "describeAutoScalingNotificationTypes",
        "describeInstanceRefreshes",
        "describeLaunchConfigurations",
        "describeLifecycleHooks",
        "describeLifecycleHookTypes",
        "describeLoadBalancers",
        "describeLoadBalancerTargetGroups",
        "describeMetricCollectionTypes",
        "describeNotificationConfigurations",
        "describePolicies",
        "describeScalingActivities",
        "describeScalingProcessTypes",
        "describeScheduledActions",
        "describeTags",
        "describeTerminationPolicyTypes",
        "describeTrafficSources",
        "describeWarmPool",
        "detachInstances",
        "detachLoadBalancers",
        "detachLoadBalancerTargetGroups",
        "detachTrafficSources",
        "disableMetricsCollection",
        "enableMetricsCollection",
        "enterStandby",
        "executePolicy",
        "exitStandby",
        "getPredictiveScalingForecast",
        "putLifecycleHook",
        "putNotificationConfiguration",
        "putScalingPolicy",
        "putScheduledUpdateGroupAction",
        "putWarmPool",
        "recordLifecycleActionHeartbeat",
        "resumeProcesses",
        "rollbackInstanceRefresh",
        "setDesiredCapacity",
        "setInstanceHealth",
        "setInstanceProtection",
        "startInstanceRefresh",
        "suspendProcesses",
        "terminateInstanceInAutoScalingGroup",
        "updateAutoScalingGroup"
      ]
    },
    {
      "service": "auto-scaling-plans",
      "className": "AutoScalingPlans",
      "operations": [
        "createScalingPlan",
        "deleteScalingPlan",
        "describeScalingPlanResources",
        "describeScalingPlans",
        "getScalingPlanResourceForecastData",
        "updateScalingPlan"
      ]
    },
    {
      "service": "b2bi",
      "className": "b2bi",
      "operations": [
        "createStarterMappingTemplate",
        "generateMapping",
        "getTransformerJob",
        "listTagsForResource",
        "startTransformerJob",
        "tagResource",
        "testConversion",
        "testMapping",
        "testParsing",
        "untagResource",
        "createCapability",
        "createPartnership",
        "createProfile",
        "createTransformer",
        "deleteCapability",
        "deletePartnership",
        "deleteProfile",
        "deleteTransformer",
        "getCapability",
        "getPartnership",
        "getProfile",
        "getTransformer",
        "listCapabilities",
        "listPartnerships",
        "listProfiles",
        "listTransformers",
        "updateCapability",
        "updatePartnership",
        "updateProfile",
        "updateTransformer"
      ]
    },
    {
      "service": "backup",
      "className": "Backup",
      "operations": [
        "associateBackupVaultMpaApprovalTeam",
        "cancelLegalHold",
        "createBackupPlan",
        "createBackupSelection",
        "createBackupVault",
        "createFramework",
        "createLegalHold",
        "createLogicallyAirGappedBackupVault",
        "createReportPlan",
        "createRestoreAccessBackupVault",
        "createRestoreTestingPlan",
        "createRestoreTestingSelection",
        "deleteBackupPlan",
        "deleteBackupSelection",
        "deleteBackupVault",
        "deleteBackupVaultAccessPolicy",
        "deleteBackupVaultLockConfiguration",
        "deleteBackupVaultNotifications",
        "deleteFramework",
        "deleteRecoveryPoint",
        "deleteReportPlan",
        "deleteRestoreTestingPlan",
        "deleteRestoreTestingSelection",
        "describeBackupJob",
        "describeBackupVault",
        "describeCopyJob",
        "describeFramework",
        "describeGlobalSettings",
        "describeProtectedResource",
        "describeRecoveryPoint",
        "describeRegionSettings",
        "describeReportJob",
        "describeReportPlan",
        "describeRestoreJob",
        "disassociateBackupVaultMpaApprovalTeam",
        "disassociateRecoveryPoint",
        "disassociateRecoveryPointFromParent",
        "exportBackupPlanTemplate",
        "getBackupPlan",
        "getBackupPlanFromJSON",
        "getBackupPlanFromTemplate",
        "getBackupSelection",
        "getBackupVaultAccessPolicy",
        "getBackupVaultNotifications",
        "getLegalHold",
        "getRecoveryPointIndexDetails",
        "getRecoveryPointRestoreMetadata",
        "getRestoreJobMetadata",
        "getRestoreTestingInferredMetadata",
        "getRestoreTestingPlan",
        "getRestoreTestingSelection",
        "getSupportedResourceTypes",
        "listBackupJobs",
        "listBackupJobSummaries",
        "listBackupPlans",
        "listBackupPlanTemplates",
        "listBackupPlanVersions",
        "listBackupSelections",
        "listBackupVaults",
        "listCopyJobs",
        "listCopyJobSummaries",
        "listFrameworks",
        "listIndexedRecoveryPoints",
        "listLegalHolds",
        "listProtectedResources",
        "listProtectedResourcesByBackupVault",
        "listRecoveryPointsByBackupVault",
        "listRecoveryPointsByLegalHold",
        "listRecoveryPointsByResource",
        "listReportJobs",
        "listReportPlans",
        "listRestoreAccessBackupVaults",
        "listRestoreJobs",
        "listRestoreJobsByProtectedResource",
        "listRestoreJobSummaries",
        "listRestoreTestingPlans",
        "listRestoreTestingSelections",
        "listTags",
        "putBackupVaultAccessPolicy",
        "putBackupVaultLockConfiguration",
        "putBackupVaultNotifications",
        "putRestoreValidationResult",
        "revokeRestoreAccessBackupVault",
        "startBackupJob",
        "startCopyJob",
        "startReportJob",
        "startRestoreJob",
        "stopBackupJob",
        "tagResource",
        "untagResource",
        "updateBackupPlan",
        "updateFramework",
        "updateGlobalSettings",
        "updateRecoveryPointIndexSettings",
        "updateRecoveryPointLifecycle",
        "updateRegionSettings",
        "updateReportPlan",
        "updateRestoreTestingPlan",
        "updateRestoreTestingSelection"
      ]
    },
    {
      "service": "backup-gateway",
      "className": "BackupGateway",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "associateGatewayToServer",
        "createGateway",
        "deleteGateway",
        "deleteHypervisor",
        "disassociateGatewayFromServer",
        "getBandwidthRateLimitSchedule",
        "getGateway",
        "getHypervisor",
        "getHypervisorPropertyMappings",
        "getVirtualMachine",
        "importHypervisorConfiguration",
        "listGateways",
        "listHypervisors",
        "listVirtualMachines",
        "putBandwidthRateLimitSchedule",
        "putHypervisorPropertyMappings",
        "putMaintenanceStartTime",
        "startVirtualMachinesMetadataSync",
        "testHypervisorConfiguration",
        "updateGatewayInformation",
        "updateGatewaySoftwareNow",
        "updateHypervisor"
      ]
    },
    {
      "service": "backupsearch",
      "className": "BackupSearch",
      "operations": [
        "listSearchJobBackups",
        "listSearchJobResults",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "getSearchJob",
        "getSearchResultExportJob",
        "listSearchJobs",
        "listSearchResultExportJobs",
        "startSearchJob",
        "startSearchResultExportJob",
        "stopSearchJob"
      ]
    },
    {
      "service": "batch",
      "className": "Batch",
      "operations": [
        "cancelJob",
        "createComputeEnvironment",
        "createConsumableResource",
        "createJobQueue",
        "createSchedulingPolicy",
        "createServiceEnvironment",
        "deleteComputeEnvironment",
        "deleteConsumableResource",
        "deleteJobQueue",
        "deleteSchedulingPolicy",
        "deleteServiceEnvironment",
        "deregisterJobDefinition",
        "describeComputeEnvironments",
        "describeConsumableResource",
        "describeJobDefinitions",
        "describeJobQueues",
        "describeJobs",
        "describeSchedulingPolicies",
        "describeServiceEnvironments",
        "describeServiceJob",
        "getJobQueueSnapshot",
        "listConsumableResources",
        "listJobs",
        "listJobsByConsumableResource",
        "listSchedulingPolicies",
        "listServiceJobs",
        "listTagsForResource",
        "registerJobDefinition",
        "submitJob",
        "submitServiceJob",
        "tagResource",
        "terminateJob",
        "terminateServiceJob",
        "untagResource",
        "updateComputeEnvironment",
        "updateConsumableResource",
        "updateJobQueue",
        "updateSchedulingPolicy",
        "updateServiceEnvironment"
      ]
    },
    {
      "service": "bcm-data-exports",
      "className": "BCMDataExports",
      "operations": [
        "createExport",
        "deleteExport",
        "getExecution",
        "getExport",
        "getTable",
        "listExecutions",
        "listExports",
        "listTables",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "updateExport"
      ]
    },
    {
      "service": "bcm-pricing-calculator",
      "className": "BCMPricingCalculator",
      "operations": [
        "getPreferences",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "updatePreferences",
        "batchCreateBillScenarioCommitmentModification",
        "batchCreateBillScenarioUsageModification",
        "batchCreateWorkloadEstimateUsage",
        "batchDeleteBillScenarioCommitmentModification",
        "batchDeleteBillScenarioUsageModification",
        "batchDeleteWorkloadEstimateUsage",
        "batchUpdateBillScenarioCommitmentModification",
        "batchUpdateBillScenarioUsageModification",
        "batchUpdateWorkloadEstimateUsage",
        "createBillEstimate",
        "createBillScenario",
        "createWorkloadEstimate",
        "deleteBillEstimate",
        "deleteBillScenario",
        "deleteWorkloadEstimate",
        "getBillEstimate",
        "getBillScenario",
        "getWorkloadEstimate",
        "listBillEstimateCommitments",
        "listBillEstimateInputCommitmentModifications",
        "listBillEstimateInputUsageModifications",
        "listBillEstimateLineItems",
        "listBillEstimates",
        "listBillScenarioCommitmentModifications",
        "listBillScenarioUsageModifications",
        "listBillScenarios",
        "listWorkloadEstimateUsage",
        "listWorkloadEstimates",
        "updateBillEstimate",
        "updateBillScenario",
        "updateWorkloadEstimate"
      ]
    },
    {
      "service": "bedrock",
      "className": "Bedrock",
      "operations": [
        "batchDeleteEvaluationJob",
        "createCustomModel",
        "createCustomModelDeployment",
        "createEvaluationJob",
        "createFoundationModelAgreement",
        "createGuardrail",
        "createGuardrailVersion",
        "createInferenceProfile",
        "createMarketplaceModelEndpoint",
        "createModelCopyJob",
        "createModelCustomizationJob",
        "createModelImportJob",
        "createModelInvocationJob",
        "createPromptRouter",
        "createProvisionedModelThroughput",
        "deleteCustomModel",
        "deleteCustomModelDeployment",
        "deleteFoundationModelAgreement",
        "deleteGuardrail",
        "deleteImportedModel",
        "deleteInferenceProfile",
        "deleteMarketplaceModelEndpoint",
        "deleteModelInvocationLoggingConfiguration",
        "deletePromptRouter",
        "deleteProvisionedModelThroughput",
        "deregisterMarketplaceModelEndpoint",
        "getCustomModel",
        "getCustomModelDeployment",
        "getEvaluationJob",
        "getFoundationModel",
        "getFoundationModelAvailability",
        "getGuardrail",
        "getImportedModel",
        "getInferenceProfile",
        "getMarketplaceModelEndpoint",
        "getModelCopyJob",
        "getModelCustomizationJob",
        "getModelImportJob",
        "getModelInvocationJob",
        "getModelInvocationLoggingConfiguration",
        "getPromptRouter",
        "getProvisionedModelThroughput",
        "getUseCaseForModelAccess",
        "listCustomModelDeployments",
        "listCustomModels",
        "listEvaluationJobs",
        "listFoundationModelAgreementOffers",
        "listFoundationModels",
        "listGuardrails",
        "listImportedModels",
        "listInferenceProfiles",
        "listMarketplaceModelEndpoints",
        "listModelCopyJobs",
        "listModelCustomizationJobs",
        "listModelImportJobs",
        "listModelInvocationJobs",
        "listPromptRouters",
        "listProvisionedModelThroughputs",
        "listTagsForResource",
        "putModelInvocationLoggingConfiguration",
        "putUseCaseForModelAccess",
        "registerMarketplaceModelEndpoint",
        "stopEvaluationJob",
        "stopModelCustomizationJob",
        "stopModelInvocationJob",
        "tagResource",
        "untagResource",
        "updateGuardrail",
        "updateMarketplaceModelEndpoint",
        "updateProvisionedModelThroughput"
      ]
    },
    {
      "service": "bedrock-agent",
      "className": "BedrockAgent",
      "operations": [
        "validateFlowDefinition",
        "associateAgentCollaborator",
        "associateAgentKnowledgeBase",
        "createAgent",
        "createAgentActionGroup",
        "createAgentAlias",
        "createDataSource",
        "createFlow",
        "createFlowAlias",
        "createFlowVersion",
        "createKnowledgeBase",
        "createPrompt",
        "createPromptVersion",
        "deleteAgent",
        "deleteAgentActionGroup",
        "deleteAgentAlias",
        "deleteAgentVersion",
        "deleteDataSource",
        "deleteFlow",
        "deleteFlowAlias",
        "deleteFlowVersion",
        "deleteKnowledgeBase",
        "deleteKnowledgeBaseDocuments",
        "deletePrompt",
        "disassociateAgentCollaborator",
        "disassociateAgentKnowledgeBase",
        "getAgent",
        "getAgentActionGroup",
        "getAgentAlias",
        "getAgentCollaborator",
        "getAgentKnowledgeBase",
        "getAgentVersion",
        "getDataSource",
        "getFlow",
        "getFlowAlias",
        "getFlowVersion",
        "getIngestionJob",
        "getKnowledgeBase",
        "getKnowledgeBaseDocuments",
        "getPrompt",
        "ingestKnowledgeBaseDocuments",
        "listAgentActionGroups",
        "listAgentAliases",
        "listAgentCollaborators",
        "listAgentKnowledgeBases",
        "listAgentVersions",
        "listAgents",
        "listDataSources",
        "listFlowAliases",
        "listFlowVersions",
        "listFlows",
        "listIngestionJobs",
        "listKnowledgeBaseDocuments",
        "listKnowledgeBases",
        "listPrompts",
        "listTagsForResource",
        "prepareAgent",
        "prepareFlow",
        "startIngestionJob",
        "stopIngestionJob",
        "tagResource",
        "untagResource",
        "updateAgent",
        "updateAgentActionGroup",
        "updateAgentAlias",
        "updateAgentCollaborator",
        "updateAgentKnowledgeBase",
        "updateDataSource",
        "updateFlow",
        "updateFlowAlias",
        "updateKnowledgeBase",
        "updatePrompt"
      ]
    },
    {
      "service": "bedrock-agent-runtime",
      "className": "BedrockAgentRuntime",
      "operations": [
        "createInvocation",
        "createSession",
        "deleteAgentMemory",
        "deleteSession",
        "endSession",
        "generateQuery",
        "getAgentMemory",
        "getExecutionFlowSnapshot",
        "getFlowExecution",
        "getInvocationStep",
        "getSession",
        "invokeAgent",
        "invokeFlow",
        "invokeInlineAgent",
        "listFlowExecutionEvents",
        "listFlowExecutions",
        "listInvocationSteps",
        "listInvocations",
        "listSessions",
        "listTagsForResource",
        "optimizePrompt",
        "putInvocationStep",
        "rerank",
        "retrieve",
        "retrieveAndGenerate",
        "retrieveAndGenerateStream",
        "startFlowExecution",
        "stopFlowExecution",
        "tagResource",
        "untagResource",
        "updateSession"
      ]
    },
    {
      "service": "bedrock-agentcore",
      "className": "BedrockAgentCore",
      "operations": [
        "getResourceApiKey",
        "getResourceOauth2Token",
        "getWorkloadAccessToken",
        "getWorkloadAccessTokenForJWT",
        "getWorkloadAccessTokenForUserId",
        "invokeCodeInterpreter",
        "createEvent",
        "deleteEvent",
        "deleteMemoryRecord",
        "getBrowserSession",
        "getCodeInterpreterSession",
        "getEvent",
        "getMemoryRecord",
        "invokeAgentRuntime",
        "listActors",
        "listBrowserSessions",
        "listCodeInterpreterSessions",
        "listEvents",
        "listMemoryRecords",
        "listSessions",
        "retrieveMemoryRecords",
        "startBrowserSession",
        "startCodeInterpreterSession",
        "stopBrowserSession",
        "stopCodeInterpreterSession",
        "updateBrowserStream"
      ]
    },
    {
      "service": "bedrock-agentcore-control",
      "className": "BedrockAgentCoreControl",
      "operations": [
        "getTokenVault",
        "setTokenVaultCMK",
        "createAgentRuntime",
        "createAgentRuntimeEndpoint",
        "createApiKeyCredentialProvider",
        "createBrowser",
        "createCodeInterpreter",
        "createGateway",
        "createGatewayTarget",
        "createMemory",
        "createOauth2CredentialProvider",
        "createWorkloadIdentity",
        "deleteAgentRuntime",
        "deleteAgentRuntimeEndpoint",
        "deleteApiKeyCredentialProvider",
        "deleteBrowser",
        "deleteCodeInterpreter",
        "deleteGateway",
        "deleteGatewayTarget",
        "deleteMemory",
        "deleteOauth2CredentialProvider",
        "deleteWorkloadIdentity",
        "getAgentRuntime",
        "getAgentRuntimeEndpoint",
        "getApiKeyCredentialProvider",
        "getBrowser",
        "getCodeInterpreter",
        "getGateway",
        "getGatewayTarget",
        "getMemory",
        "getOauth2CredentialProvider",
        "getWorkloadIdentity",
        "listAgentRuntimeEndpoints",
        "listAgentRuntimeVersions",
        "listAgentRuntimes",
        "listApiKeyCredentialProviders",
        "listBrowsers",
        "listCodeInterpreters",
        "listGatewayTargets",
        "listGateways",
        "listMemories",
        "listOauth2CredentialProviders",
        "listWorkloadIdentities",
        "updateAgentRuntime",
        "updateAgentRuntimeEndpoint",
        "updateApiKeyCredentialProvider",
        "updateGateway",
        "updateGatewayTarget",
        "updateMemory",
        "updateOauth2CredentialProvider",
        "updateWorkloadIdentity"
      ]
    },
    {
      "service": "bedrock-data-automation",
      "className": "BedrockDataAutomation",
      "operations": [
        "createBlueprintVersion",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "createBlueprint",
        "createDataAutomationProject",
        "deleteBlueprint",
        "deleteDataAutomationProject",
        "getBlueprint",
        "getDataAutomationProject",
        "listBlueprints",
        "listDataAutomationProjects",
        "updateBlueprint",
        "updateDataAutomationProject"
      ]
    },
    {
      "service": "bedrock-data-automation-runtime",
      "className": "BedrockDataAutomationRuntime",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "getDataAutomationStatus",
        "invokeDataAutomationAsync"
      ]
    },
    {
      "service": "bedrock-runtime",
      "className": "BedrockRuntime",
      "operations": [
        "applyGuardrail",
        "converse",
        "converseStream",
        "getAsyncInvoke",
        "invokeModel",
        "invokeModelWithBidirectionalStream",
        "invokeModelWithResponseStream",
        "listAsyncInvokes",
        "startAsyncInvoke"
      ]
    },
    {
      "service": "billing",
      "className": "Billing",
      "operations": [
        "createBillingView",
        "deleteBillingView",
        "getBillingView",
        "getResourcePolicy",
        "listBillingViews",
        "listSourceViewsForBillingView",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "updateBillingView"
      ]
    },
    {
      "service": "billingconductor",
      "className": "billingconductor",
      "operations": [
        "getBillingGroupCostReport",
        "listAccountAssociations",
        "listBillingGroupCostReports",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "associateAccounts",
        "associatePricingRules",
        "batchAssociateResourcesToCustomLineItem",
        "batchDisassociateResourcesFromCustomLineItem",
        "createBillingGroup",
        "createCustomLineItem",
        "createPricingPlan",
        "createPricingRule",
        "deleteBillingGroup",
        "deleteCustomLineItem",
        "deletePricingPlan",
        "deletePricingRule",
        "disassociateAccounts",
        "disassociatePricingRules",
        "listBillingGroups",
        "listCustomLineItemVersions",
        "listCustomLineItems",
        "listPricingPlans",
        "listPricingPlansAssociatedWithPricingRule",
        "listPricingRules",
        "listPricingRulesAssociatedToPricingPlan",
        "listResourcesAssociatedToCustomLineItem",
        "updateBillingGroup",
        "updateCustomLineItem",
        "updatePricingPlan",
        "updatePricingRule"
      ]
    },
    {
      "service": "braket",
      "className": "Braket",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "cancelJob",
        "cancelQuantumTask",
        "createJob",
        "createQuantumTask",
        "getDevice",
        "getJob",
        "getQuantumTask",
        "searchDevices",
        "searchJobs",
        "searchQuantumTasks"
      ]
    },
    {
      "service": "budgets",
      "className": "BudgetsClient",
      "operations": [
        "createBudget",
        "createBudgetAction",
        "createNotification",
        "createSubscriber",
        "deleteBudget",
        "deleteBudgetAction",
        "deleteNotification",
        "deleteSubscriber",
        "describeBudget",
        "describeBudgetAction",
        "describeBudgetActionHistories",
        "describeBudgetActionsForAccount",
        "describeBudgetActionsForBudget",
        "describeBudgetNotificationsForAccount",
        "describeBudgetPerformanceHistory",
        "describeBudgets",
        "describeNotificationsForBudget",
        "describeSubscribersForNotification",
        "executeBudgetAction",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "updateBudget",
        "updateBudgetAction",
        "updateNotification",
        "updateSubscriber"
      ]
    },
    {
      "service": "chatbot",
      "className": "chatbot",
      "operations": [
        "associateToConfiguration",
        "createChimeWebhookConfiguration",
        "createMicrosoftTeamsChannelConfiguration",
        "createSlackChannelConfiguration",
        "deleteChimeWebhookConfiguration",
        "deleteMicrosoftTeamsChannelConfiguration",
        "deleteMicrosoftTeamsConfiguredTeam",
        "deleteMicrosoftTeamsUserIdentity",
        "deleteSlackChannelConfiguration",
        "deleteSlackUserIdentity",
        "deleteSlackWorkspaceAuthorization",
        "describeChimeWebhookConfigurations",
        "describeSlackChannelConfigurations",
        "describeSlackUserIdentities",
        "describeSlackWorkspaces",
        "disassociateFromConfiguration",
        "getAccountPreferences",
        "getMicrosoftTeamsChannelConfiguration",
        "listAssociations",
        "listMicrosoftTeamsChannelConfigurations",
        "listMicrosoftTeamsConfiguredTeams",
        "listMicrosoftTeamsUserIdentities",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "updateAccountPreferences",
        "updateChimeWebhookConfiguration",
        "updateMicrosoftTeamsChannelConfiguration",
        "updateSlackChannelConfiguration",
        "createCustomAction",
        "deleteCustomAction",
        "getCustomAction",
        "listCustomActions",
        "updateCustomAction"
      ]
    },
    {
      "service": "chime",
      "className": "Chime",
      "operations": [
        "associatePhoneNumberWithUser",
        "associateSigninDelegateGroupsWithAccount",
        "batchCreateRoomMembership",
        "batchDeletePhoneNumber",
        "batchSuspendUser",
        "batchUnsuspendUser",
        "batchUpdatePhoneNumber",
        "batchUpdateUser",
        "createAccount",
        "createBot",
        "createMeetingDialOut",
        "createPhoneNumberOrder",
        "createRoom",
        "createRoomMembership",
        "createUser",
        "deleteAccount",
        "deleteEventsConfiguration",
        "deletePhoneNumber",
        "deleteRoom",
        "deleteRoomMembership",
        "disassociatePhoneNumberFromUser",
        "disassociateSigninDelegateGroupsFromAccount",
        "getAccount",
        "getAccountSettings",
        "getBot",
        "getEventsConfiguration",
        "getGlobalSettings",
        "getPhoneNumber",
        "getPhoneNumberOrder",
        "getPhoneNumberSettings",
        "getRetentionSettings",
        "getRoom",
        "getUser",
        "getUserSettings",
        "inviteUsers",
        "listAccounts",
        "listBots",
        "listPhoneNumberOrders",
        "listPhoneNumbers",
        "listRoomMemberships",
        "listRooms",
        "listSupportedPhoneNumberCountries",
        "listUsers",
        "logoutUser",
        "putEventsConfiguration",
        "putRetentionSettings",
        "redactConversationMessage",
        "redactRoomMessage",
        "regenerateSecurityToken",
        "resetPersonalPIN",
        "restorePhoneNumber",
        "searchAvailablePhoneNumbers",
        "updateAccount",
        "updateAccountSettings",
        "updateBot",
        "updateGlobalSettings",
        "updatePhoneNumber",
        "updatePhoneNumberSettings",
        "updateRoom",
        "updateRoomMembership",
        "updateUser",
        "updateUserSettings"
      ]
    },
    {
      "service": "chime-sdk-identity",
      "className": "ChimeSDKIdentity",
      "operations": [
        "createAppInstance",
        "createAppInstanceAdmin",
        "createAppInstanceBot",
        "createAppInstanceUser",
        "deleteAppInstance",
        "deleteAppInstanceAdmin",
        "deleteAppInstanceBot",
        "deleteAppInstanceUser",
        "deregisterAppInstanceUserEndpoint",
        "describeAppInstance",
        "describeAppInstanceAdmin",
        "describeAppInstanceBot",
        "describeAppInstanceUser",
        "describeAppInstanceUserEndpoint",
        "getAppInstanceRetentionSettings",
        "listAppInstanceAdmins",
        "listAppInstanceBots",
        "listAppInstances",
        "listAppInstanceUserEndpoints",
        "listAppInstanceUsers",
        "listTagsForResource",
        "putAppInstanceRetentionSettings",
        "putAppInstanceUserExpirationSettings",
        "registerAppInstanceUserEndpoint",
        "tagResource",
        "untagResource",
        "updateAppInstance",
        "updateAppInstanceBot",
        "updateAppInstanceUser",
        "updateAppInstanceUserEndpoint"
      ]
    },
    {
      "service": "chime-sdk-media-pipelines",
      "className": "ChimeSDKMediaPipelines",
      "operations": [
        "createMediaCapturePipeline",
        "createMediaConcatenationPipeline",
        "createMediaInsightsPipeline",
        "createMediaInsightsPipelineConfiguration",
        "createMediaLiveConnectorPipeline",
        "createMediaPipelineKinesisVideoStreamPool",
        "createMediaStreamPipeline",
        "deleteMediaCapturePipeline",
        "deleteMediaInsightsPipelineConfiguration",
        "deleteMediaPipeline",
        "deleteMediaPipelineKinesisVideoStreamPool",
        "getMediaCapturePipeline",
        "getMediaInsightsPipelineConfiguration",
        "getMediaPipeline",
        "getMediaPipelineKinesisVideoStreamPool",
        "getSpeakerSearchTask",
        "getVoiceToneAnalysisTask",
        "listMediaCapturePipelines",
        "listMediaInsightsPipelineConfigurations",
        "listMediaPipelineKinesisVideoStreamPools",
        "listMediaPipelines",
        "listTagsForResource",
        "startSpeakerSearchTask",
        "startVoiceToneAnalysisTask",
        "stopSpeakerSearchTask",
        "stopVoiceToneAnalysisTask",
        "tagResource",
        "untagResource",
        "updateMediaInsightsPipelineConfiguration",
        "updateMediaInsightsPipelineStatus",
        "updateMediaPipelineKinesisVideoStreamPool"
      ]
    },
    {
      "service": "chime-sdk-meetings",
      "className": "ChimeSDKMeetings",
      "operations": [
        "batchCreateAttendee",
        "batchUpdateAttendeeCapabilitiesExcept",
        "createAttendee",
        "createMeeting",
        "createMeetingWithAttendees",
        "deleteAttendee",
        "deleteMeeting",
        "getAttendee",
        "getMeeting",
        "listAttendees",
        "listTagsForResource",
        "startMeetingTranscription",
        "stopMeetingTranscription",
        "tagResource",
        "untagResource",
        "updateAttendeeCapabilities"
      ]
    },
    {
      "service": "chime-sdk-messaging",
      "className": "ChimeSDKMessaging",
      "operations": [
        "associateChannelFlow",
        "batchCreateChannelMembership",
        "channelFlowCallback",
        "createChannel",
        "createChannelBan",
        "createChannelFlow",
        "createChannelMembership",
        "createChannelModerator",
        "deleteChannel",
        "deleteChannelBan",
        "deleteChannelFlow",
        "deleteChannelMembership",
        "deleteChannelMessage",
        "deleteChannelModerator",
        "deleteMessagingStreamingConfigurations",
        "describeChannel",
        "describeChannelBan",
        "describeChannelFlow",
        "describeChannelMembership",
        "describeChannelMembershipForAppInstanceUser",
        "describeChannelModeratedByAppInstanceUser",
        "describeChannelModerator",
        "disassociateChannelFlow",
        "getChannelMembershipPreferences",
        "getChannelMessage",
        "getChannelMessageStatus",
        "getMessagingSessionEndpoint",
        "getMessagingStreamingConfigurations",
        "listChannelBans",
        "listChannelFlows",
        "listChannelMemberships",
        "listChannelMembershipsForAppInstanceUser",
        "listChannelMessages",
        "listChannelModerators",
        "listChannels",
        "listChannelsAssociatedWithChannelFlow",
        "listChannelsModeratedByAppInstanceUser",
        "listSubChannels",
        "listTagsForResource",
        "putChannelExpirationSettings",
        "putChannelMembershipPreferences",
        "putMessagingStreamingConfigurations",
        "redactChannelMessage",
        "searchChannels",
        "sendChannelMessage",
        "tagResource",
        "untagResource",
        "updateChannel",
        "updateChannelFlow",
        "updateChannelMessage",
        "updateChannelReadMarker"
      ]
    },
    {
      "service": "chime-sdk-voice",
      "className": "ChimeSDKVoice",
      "operations": [
        "associatePhoneNumbersWithVoiceConnector",
        "associatePhoneNumbersWithVoiceConnectorGroup",
        "batchDeletePhoneNumber",
        "batchUpdatePhoneNumber",
        "createPhoneNumberOrder",
        "createProxySession",
        "createSipMediaApplication",
        "createSipMediaApplicationCall",
        "createSipRule",
        "createVoiceConnector",
        "createVoiceConnectorGroup",
        "createVoiceProfile",
        "createVoiceProfileDomain",
        "deletePhoneNumber",
        "deleteProxySession",
        "deleteSipMediaApplication",
        "deleteSipRule",
        "deleteVoiceConnector",
        "deleteVoiceConnectorEmergencyCallingConfiguration",
        "deleteVoiceConnectorExternalSystemsConfiguration",
        "deleteVoiceConnectorGroup",
        "deleteVoiceConnectorOrigination",
        "deleteVoiceConnectorProxy",
        "deleteVoiceConnectorStreamingConfiguration",
        "deleteVoiceConnectorTermination",
        "deleteVoiceConnectorTerminationCredentials",
        "deleteVoiceProfile",
        "deleteVoiceProfileDomain",
        "disassociatePhoneNumbersFromVoiceConnector",
        "disassociatePhoneNumbersFromVoiceConnectorGroup",
        "getGlobalSettings",
        "getPhoneNumber",
        "getPhoneNumberOrder",
        "getPhoneNumberSettings",
        "getProxySession",
        "getSipMediaApplication",
        "getSipMediaApplicationAlexaSkillConfiguration",
        "getSipMediaApplicationLoggingConfiguration",
        "getSipRule",
        "getSpeakerSearchTask",
        "getVoiceConnector",
        "getVoiceConnectorEmergencyCallingConfiguration",
        "getVoiceConnectorExternalSystemsConfiguration",
        "getVoiceConnectorGroup",
        "getVoiceConnectorLoggingConfiguration",
        "getVoiceConnectorOrigination",
        "getVoiceConnectorProxy",
        "getVoiceConnectorStreamingConfiguration",
        "getVoiceConnectorTermination",
        "getVoiceConnectorTerminationHealth",
        "getVoiceProfile",
        "getVoiceProfileDomain",
        "getVoiceToneAnalysisTask",
        "listAvailableVoiceConnectorRegions",
        "listPhoneNumberOrders",
        "listPhoneNumbers",
        "listProxySessions",
        "listSipMediaApplications",
        "listSipRules",
        "listSupportedPhoneNumberCountries",
        "listTagsForResource",
        "listVoiceConnectorGroups",
        "listVoiceConnectors",
        "listVoiceConnectorTerminationCredentials",
        "listVoiceProfileDomains",
        "listVoiceProfiles",
        "putSipMediaApplicationAlexaSkillConfiguration",
        "putSipMediaApplicationLoggingConfiguration",
        "putVoiceConnectorEmergencyCallingConfiguration",
        "putVoiceConnectorExternalSystemsConfiguration",
        "putVoiceConnectorLoggingConfiguration",
        "putVoiceConnectorOrigination",
        "putVoiceConnectorProxy",
        "putVoiceConnectorStreamingConfiguration",
        "putVoiceConnectorTermination",
        "putVoiceConnectorTerminationCredentials",
        "restorePhoneNumber",
        "searchAvailablePhoneNumbers",
        "startSpeakerSearchTask",
        "startVoiceToneAnalysisTask",
        "stopSpeakerSearchTask",
        "stopVoiceToneAnalysisTask",
        "tagResource",
        "untagResource",
        "updateGlobalSettings",
        "updatePhoneNumber",
        "updatePhoneNumberSettings",
        "updateProxySession",
        "updateSipMediaApplication",
        "updateSipMediaApplicationCall",
        "updateSipRule",
        "updateVoiceConnector",
        "updateVoiceConnectorGroup",
        "updateVoiceProfile",
        "updateVoiceProfileDomain",
        "validateE911Address"
      ]
    },
    {
      "service": "cleanrooms",
      "className": "CleanRooms",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "batchGetCollaborationAnalysisTemplate",
        "batchGetSchema",
        "batchGetSchemaAnalysisRule",
        "createAnalysisTemplate",
        "createCollaboration",
        "createConfiguredAudienceModelAssociation",
        "createConfiguredTable",
        "createConfiguredTableAnalysisRule",
        "createConfiguredTableAssociation",
        "createConfiguredTableAssociationAnalysisRule",
        "createIdMappingTable",
        "createIdNamespaceAssociation",
        "createMembership",
        "createPrivacyBudgetTemplate",
        "deleteAnalysisTemplate",
        "deleteCollaboration",
        "deleteConfiguredAudienceModelAssociation",
        "deleteConfiguredTable",
        "deleteConfiguredTableAnalysisRule",
        "deleteConfiguredTableAssociation",
        "deleteConfiguredTableAssociationAnalysisRule",
        "deleteIdMappingTable",
        "deleteIdNamespaceAssociation",
        "deleteMember",
        "deleteMembership",
        "deletePrivacyBudgetTemplate",
        "getAnalysisTemplate",
        "getCollaboration",
        "getCollaborationAnalysisTemplate",
        "getCollaborationConfiguredAudienceModelAssociation",
        "getCollaborationIdNamespaceAssociation",
        "getCollaborationPrivacyBudgetTemplate",
        "getConfiguredAudienceModelAssociation",
        "getConfiguredTable",
        "getConfiguredTableAnalysisRule",
        "getConfiguredTableAssociation",
        "getConfiguredTableAssociationAnalysisRule",
        "getIdMappingTable",
        "getIdNamespaceAssociation",
        "getMembership",
        "getPrivacyBudgetTemplate",
        "getProtectedJob",
        "getProtectedQuery",
        "getSchema",
        "getSchemaAnalysisRule",
        "listAnalysisTemplates",
        "listCollaborationAnalysisTemplates",
        "listCollaborationConfiguredAudienceModelAssociations",
        "listCollaborationIdNamespaceAssociations",
        "listCollaborationPrivacyBudgetTemplates",
        "listCollaborationPrivacyBudgets",
        "listCollaborations",
        "listConfiguredAudienceModelAssociations",
        "listConfiguredTableAssociations",
        "listConfiguredTables",
        "listIdMappingTables",
        "listIdNamespaceAssociations",
        "listMembers",
        "listMemberships",
        "listPrivacyBudgetTemplates",
        "listPrivacyBudgets",
        "listProtectedJobs",
        "listProtectedQueries",
        "listSchemas",
        "populateIdMappingTable",
        "previewPrivacyImpact",
        "startProtectedJob",
        "startProtectedQuery",
        "updateAnalysisTemplate",
        "updateCollaboration",
        "updateConfiguredAudienceModelAssociation",
        "updateConfiguredTable",
        "updateConfiguredTableAnalysisRule",
        "updateConfiguredTableAssociation",
        "updateConfiguredTableAssociationAnalysisRule",
        "updateIdMappingTable",
        "updateIdNamespaceAssociation",
        "updateMembership",
        "updatePrivacyBudgetTemplate",
        "updateProtectedJob",
        "updateProtectedQuery"
      ]
    },
    {
      "service": "cleanroomsml",
      "className": "CleanRoomsML",
      "operations": [
        "listCollaborationConfiguredModelAlgorithmAssociations",
        "listCollaborationMLInputChannels",
        "listCollaborationTrainedModelExportJobs",
        "listCollaborationTrainedModelInferenceJobs",
        "listCollaborationTrainedModels",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "cancelTrainedModel",
        "cancelTrainedModelInferenceJob",
        "createAudienceModel",
        "createConfiguredAudienceModel",
        "createConfiguredModelAlgorithm",
        "createConfiguredModelAlgorithmAssociation",
        "createMLInputChannel",
        "createTrainedModel",
        "createTrainingDataset",
        "deleteAudienceGenerationJob",
        "deleteAudienceModel",
        "deleteConfiguredAudienceModel",
        "deleteConfiguredAudienceModelPolicy",
        "deleteConfiguredModelAlgorithm",
        "deleteConfiguredModelAlgorithmAssociation",
        "deleteMLConfiguration",
        "deleteMLInputChannelData",
        "deleteTrainedModelOutput",
        "deleteTrainingDataset",
        "getAudienceGenerationJob",
        "getAudienceModel",
        "getCollaborationConfiguredModelAlgorithmAssociation",
        "getCollaborationMLInputChannel",
        "getCollaborationTrainedModel",
        "getConfiguredAudienceModel",
        "getConfiguredAudienceModelPolicy",
        "getConfiguredModelAlgorithm",
        "getConfiguredModelAlgorithmAssociation",
        "getMLConfiguration",
        "getMLInputChannel",
        "getTrainedModel",
        "getTrainedModelInferenceJob",
        "getTrainingDataset",
        "listAudienceExportJobs",
        "listAudienceGenerationJobs",
        "listAudienceModels",
        "listConfiguredAudienceModels",
        "listConfiguredModelAlgorithmAssociations",
        "listConfiguredModelAlgorithms",
        "listMLInputChannels",
        "listTrainedModelInferenceJobs",
        "listTrainedModelVersions",
        "listTrainedModels",
        "listTrainingDatasets",
        "putConfiguredAudienceModelPolicy",
        "putMLConfiguration",
        "startAudienceExportJob",
        "startAudienceGenerationJob",
        "startTrainedModelExportJob",
        "startTrainedModelInferenceJob",
        "updateConfiguredAudienceModel"
      ]
    },
    {
      "service": "cloud9",
      "className": "Cloud9",
      "operations": [
        "createEnvironmentEC2",
        "createEnvironmentMembership",
        "deleteEnvironment",
        "deleteEnvironmentMembership",
        "describeEnvironmentMemberships",
        "describeEnvironments",
        "describeEnvironmentStatus",
        "listEnvironments",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "updateEnvironment",
        "updateEnvironmentMembership"
      ]
    },
    {
      "service": "cloudcontrol",
      "className": "CloudControl",
      "operations": [
        "cancelResourceRequest",
        "createResource",
        "deleteResource",
        "getResource",
        "getResourceRequestStatus",
        "listResourceRequests",
        "listResources",
        "updateResource"
      ]
    },
    {
      "service": "clouddirectory",
      "className": "CloudDirectory",
      "operations": [
        "addFacetToObject",
        "applySchema",
        "attachObject",
        "attachPolicy",
        "attachToIndex",
        "attachTypedLink",
        "batchRead",
        "batchWrite",
        "createDirectory",
        "createFacet",
        "createIndex",
        "createObject",
        "createSchema",
        "createTypedLinkFacet",
        "deleteDirectory",
        "deleteFacet",
        "deleteObject",
        "deleteSchema",
        "deleteTypedLinkFacet",
        "detachFromIndex",
        "detachObject",
        "detachPolicy",
        "detachTypedLink",
        "disableDirectory",
        "enableDirectory",
        "getAppliedSchemaVersion",
        "getDirectory",
        "getFacet",
        "getLinkAttributes",
        "getObjectAttributes",
        "getObjectInformation",
        "getSchemaAsJson",
        "getTypedLinkFacetInformation",
        "listAppliedSchemaArns",
        "listAttachedIndices",
        "listDevelopmentSchemaArns",
        "listDirectories",
        "listFacetAttributes",
        "listFacetNames",
        "listIncomingTypedLinks",
        "listIndex",
        "listManagedSchemaArns",
        "listObjectAttributes",
        "listObjectChildren",
        "listObjectParentPaths",
        "listObjectParents",
        "listObjectPolicies",
        "listOutgoingTypedLinks",
        "listPolicyAttachments",
        "listPublishedSchemaArns",
        "listTagsForResource",
        "listTypedLinkFacetAttributes",
        "listTypedLinkFacetNames",
        "lookupPolicy",
        "publishSchema",
        "putSchemaFromJson",
        "removeFacetFromObject",
        "tagResource",
        "untagResource",
        "updateFacet",
        "updateLinkAttributes",
        "updateObjectAttributes",
        "updateSchema",
        "updateTypedLinkFacet",
        "upgradeAppliedSchema",
        "upgradePublishedSchema"
      ]
    },
    {
      "service": "cloudformation",
      "className": "CloudFormation",
      "operations": [
        "activateOrganizationsAccess",
        "activateType",
        "batchDescribeTypeConfigurations",
        "cancelUpdateStack",
        "continueUpdateRollback",
        "createChangeSet",
        "createGeneratedTemplate",
        "createStack",
        "createStackInstances",
        "createStackRefactor",
        "createStackSet",
        "deactivateOrganizationsAccess",
        "deactivateType",
        "deleteChangeSet",
        "deleteGeneratedTemplate",
        "deleteStack",
        "deleteStackInstances",
        "deleteStackSet",
        "deregisterType",
        "describeAccountLimits",
        "describeChangeSet",
        "describeChangeSetHooks",
        "describeGeneratedTemplate",
        "describeOrganizationsAccess",
        "describePublisher",
        "describeResourceScan",
        "describeStackDriftDetectionStatus",
        "describeStackEvents",
        "describeStackInstance",
        "describeStackRefactor",
        "describeStackResource",
        "describeStackResourceDrifts",
        "describeStackResources",
        "describeStacks",
        "describeStackSet",
        "describeStackSetOperation",
        "describeType",
        "describeTypeRegistration",
        "detectStackDrift",
        "detectStackResourceDrift",
        "detectStackSetDrift",
        "estimateTemplateCost",
        "executeChangeSet",
        "executeStackRefactor",
        "getGeneratedTemplate",
        "getStackPolicy",
        "getTemplate",
        "getTemplateSummary",
        "importStacksToStackSet",
        "listChangeSets",
        "listExports",
        "listGeneratedTemplates",
        "listHookResults",
        "listImports",
        "listResourceScanRelatedResources",
        "listResourceScanResources",
        "listResourceScans",
        "listStackInstanceResourceDrifts",
        "listStackInstances",
        "listStackRefactorActions",
        "listStackRefactors",
        "listStackResources",
        "listStacks",
        "listStackSetAutoDeploymentTargets",
        "listStackSetOperationResults",
        "listStackSetOperations",
        "listStackSets",
        "listTypeRegistrations",
        "listTypes",
        "listTypeVersions",
        "publishType",
        "recordHandlerProgress",
        "registerPublisher",
        "registerType",
        "rollbackStack",
        "setStackPolicy",
        "setTypeConfiguration",
        "setTypeDefaultVersion",
        "signalResource",
        "startResourceScan",
        "stopStackSetOperation",
        "testType",
        "updateGeneratedTemplate",
        "updateStack",
        "updateStackInstances",
        "updateStackSet",
        "updateTerminationProtection",
        "validateTemplate"
      ]
    },
    {
      "service": "cloudfront",
      "className": "CloudFront",
      "operations": [
        "associateAlias",
        "associateDistributionTenantWebACL",
        "associateDistributionWebACL",
        "copyDistribution",
        "createAnycastIpList",
        "createCachePolicy",
        "createCloudFrontOriginAccessIdentity",
        "createConnectionGroup",
        "createContinuousDeploymentPolicy",
        "createDistribution",
        "createDistributionTenant",
        "createDistributionWithTags",
        "createFieldLevelEncryptionConfig",
        "createFieldLevelEncryptionProfile",
        "createFunction",
        "createInvalidation",
        "createInvalidationForDistributionTenant",
        "createKeyGroup",
        "createKeyValueStore",
        "createMonitoringSubscription",
        "createOriginAccessControl",
        "createOriginRequestPolicy",
        "createPublicKey",
        "createRealtimeLogConfig",
        "createResponseHeadersPolicy",
        "createStreamingDistribution",
        "createStreamingDistributionWithTags",
        "createVpcOrigin",
        "deleteAnycastIpList",
        "deleteCachePolicy",
        "deleteCloudFrontOriginAccessIdentity",
        "deleteConnectionGroup",
        "deleteContinuousDeploymentPolicy",
        "deleteDistribution",
        "deleteDistributionTenant",
        "deleteFieldLevelEncryptionConfig",
        "deleteFieldLevelEncryptionProfile",
        "deleteFunction",
        "deleteKeyGroup",
        "deleteKeyValueStore",
        "deleteMonitoringSubscription",
        "deleteOriginAccessControl",
        "deleteOriginRequestPolicy",
        "deletePublicKey",
        "deleteRealtimeLogConfig",
        "deleteResponseHeadersPolicy",
        "deleteStreamingDistribution",
        "deleteVpcOrigin",
        "describeFunction",
        "describeKeyValueStore",
        "disassociateDistributionTenantWebACL",
        "disassociateDistributionWebACL",
        "getAnycastIpList",
        "getCachePolicy",
        "getCachePolicyConfig",
        "getCloudFrontOriginAccessIdentity",
        "getCloudFrontOriginAccessIdentityConfig",
        "getConnectionGroup",
        "getConnectionGroupByRoutingEndpoint",
        "getContinuousDeploymentPolicy",
        "getContinuousDeploymentPolicyConfig",
        "getDistribution",
        "getDistributionConfig",
        "getDistributionTenant",
        "getDistributionTenantByDomain",
        "getFieldLevelEncryption",
        "getFieldLevelEncryptionConfig",
        "getFieldLevelEncryptionProfile",
        "getFieldLevelEncryptionProfileConfig",
        "getFunction",
        "getInvalidation",
        "getInvalidationForDistributionTenant",
        "getKeyGroup",
        "getKeyGroupConfig",
        "getManagedCertificateDetails",
        "getMonitoringSubscription",
        "getOriginAccessControl",
        "getOriginAccessControlConfig",
        "getOriginRequestPolicy",
        "getOriginRequestPolicyConfig",
        "getPublicKey",
        "getPublicKeyConfig",
        "getRealtimeLogConfig",
        "getResponseHeadersPolicy",
        "getResponseHeadersPolicyConfig",
        "getStreamingDistribution",
        "getStreamingDistributionConfig",
        "getVpcOrigin",
        "listAnycastIpLists",
        "listCachePolicies",
        "listCloudFrontOriginAccessIdentities",
        "listConflictingAliases",
        "listConnectionGroups",
        "listContinuousDeploymentPolicies",
        "listDistributions",
        "listDistributionsByAnycastIpListId",
        "listDistributionsByCachePolicyId",
        "listDistributionsByConnectionMode",
        "listDistributionsByKeyGroup",
        "listDistributionsByOriginRequestPolicyId",
        "listDistributionsByRealtimeLogConfig",
        "listDistributionsByResponseHeadersPolicyId",
        "listDistributionsByVpcOriginId",
        "listDistributionsByWebACLId",
        "listDistributionTenants",
        "listDistributionTenantsByCustomization",
        "listDomainConflicts",
        "listFieldLevelEncryptionConfigs",
        "listFieldLevelEncryptionProfiles",
        "listFunctions",
        "listInvalidations",
        "listInvalidationsForDistributionTenant",
        "listKeyGroups",
        "listKeyValueStores",
        "listOriginAccessControls",
        "listOriginRequestPolicies",
        "listPublicKeys",
        "listRealtimeLogConfigs",
        "listResponseHeadersPolicies",
        "listStreamingDistributions",
        "listTagsForResource",
        "listVpcOrigins",
        "publishFunction",
        "tagResource",
        "testFunction",
        "untagResource",
        "updateCachePolicy",
        "updateCloudFrontOriginAccessIdentity",
        "updateConnectionGroup",
        "updateContinuousDeploymentPolicy",
        "updateDistribution",
        "updateDistributionTenant",
        "updateDistributionWithStagingConfig",
        "updateDomainAssociation",
        "updateFieldLevelEncryptionConfig",
        "updateFieldLevelEncryptionProfile",
        "updateFunction",
        "updateKeyGroup",
        "updateKeyValueStore",
        "updateOriginAccessControl",
        "updateOriginRequestPolicy",
        "updatePublicKey",
        "updateRealtimeLogConfig",
        "updateResponseHeadersPolicy",
        "updateStreamingDistribution",
        "updateVpcOrigin",
        "verifyDnsConfiguration"
      ]
    },
    {
      "service": "cloudfront-keyvaluestore",
      "className": "CloudFrontKeyValueStore",
      "operations": [
        "deleteKey",
        "describeKeyValueStore",
        "getKey",
        "listKeys",
        "putKey",
        "updateKeys"
      ]
    },
    {
      "service": "cloudhsm",
      "className": "CloudHSM",
      "operations": [
        "addTagsToResource",
        "createHapg",
        "createHsm",
        "createLunaClient",
        "deleteHapg",
        "deleteHsm",
        "deleteLunaClient",
        "describeHapg",
        "describeHsm",
        "describeLunaClient",
        "getConfig",
        "listAvailableZones",
        "listHapgs",
        "listHsms",
        "listLunaClients",
        "listTagsForResource",
        "modifyHapg",
        "modifyHsm",
        "modifyLunaClient",
        "removeTagsFromResource"
      ]
    },
    {
      "service": "cloudhsm-v2",
      "className": "CloudHSMV2",
      "operations": [
        "copyBackupToRegion",
        "createCluster",
        "createHsm",
        "deleteBackup",
        "deleteCluster",
        "deleteHsm",
        "deleteResourcePolicy",
        "describeBackups",
        "describeClusters",
        "getResourcePolicy",
        "initializeCluster",
        "listTags",
        "modifyBackupAttributes",
        "modifyCluster",
        "putResourcePolicy",
        "restoreBackup",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "cloudsearch",
      "className": "CloudSearch",
      "operations": [
        "buildSuggesters",
        "createDomain",
        "defineAnalysisScheme",
        "defineExpression",
        "defineIndexField",
        "defineSuggester",
        "deleteAnalysisScheme",
        "deleteDomain",
        "deleteExpression",
        "deleteIndexField",
        "deleteSuggester",
        "describeAnalysisSchemes",
        "describeAvailabilityOptions",
        "describeDomainEndpointOptions",
        "describeDomains",
        "describeExpressions",
        "describeIndexFields",
        "describeScalingParameters",
        "describeServiceAccessPolicies",
        "describeSuggesters",
        "indexDocuments",
        "listDomainNames",
        "updateAvailabilityOptions",
        "updateDomainEndpointOptions",
        "updateScalingParameters",
        "updateServiceAccessPolicies"
      ]
    },
    {
      "service": "cloudsearch-domain",
      "className": "CloudSearchDomain",
      "operations": [
        "search",
        "suggest",
        "uploadDocuments"
      ]
    },
    {
      "service": "cloudtrail",
      "className": "CloudTrail",
      "operations": [
        "addTags",
        "cancelQuery",
        "createChannel",
        "createDashboard",
        "createEventDataStore",
        "createTrail",
        "deleteChannel",
        "deleteDashboard",
        "deleteEventDataStore",
        "deleteResourcePolicy",
        "deleteTrail",
        "deregisterOrganizationDelegatedAdmin",
        "describeQuery",
        "describeTrails",
        "disableFederation",
        "enableFederation",
        "generateQuery",
        "getChannel",
        "getDashboard",
        "getEventConfiguration",
        "getEventDataStore",
        "getEventSelectors",
        "getImport",
        "getInsightSelectors",
        "getQueryResults",
        "getResourcePolicy",
        "getTrail",
        "getTrailStatus",
        "listChannels",
        "listDashboards",
        "listEventDataStores",
        "listImportFailures",
        "listImports",
        "listInsightsMetricData",
        "listPublicKeys",
        "listQueries",
        "listTags",
        "listTrails",
        "lookupEvents",
        "putEventConfiguration",
        "putEventSelectors",
        "putInsightSelectors",
        "putResourcePolicy",
        "registerOrganizationDelegatedAdmin",
        "removeTags",
        "restoreEventDataStore",
        "searchSampleQueries",
        "startDashboardRefresh",
        "startEventDataStoreIngestion",
        "startImport",
        "startLogging",
        "startQuery",
        "stopEventDataStoreIngestion",
        "stopImport",
        "stopLogging",
        "updateChannel",
        "updateDashboard",
        "updateEventDataStore",
        "updateTrail"
      ]
    },
    {
      "service": "cloudtrail-data",
      "className": "CloudTrailData",
      "operations": [
        "putAuditEvents"
      ]
    },
    {
      "service": "cloudwatch",
      "className": "CloudWatch",
      "operations": [
        "deleteAlarms",
        "deleteAnomalyDetector",
        "deleteDashboards",
        "deleteInsightRules",
        "deleteMetricStream",
        "describeAlarmHistory",
        "describeAlarms",
        "describeAlarmsForMetric",
        "describeAnomalyDetectors",
        "describeInsightRules",
        "disableAlarmActions",
        "disableInsightRules",
        "enableAlarmActions",
        "enableInsightRules",
        "getDashboard",
        "getInsightRuleReport",
        "getMetricData",
        "getMetricStatistics",
        "getMetricStream",
        "getMetricWidgetImage",
        "listDashboards",
        "listManagedInsightRules",
        "listMetrics",
        "listMetricStreams",
        "listTagsForResource",
        "putAnomalyDetector",
        "putCompositeAlarm",
        "putDashboard",
        "putInsightRule",
        "putManagedInsightRules",
        "putMetricAlarm",
        "putMetricData",
        "putMetricStream",
        "setAlarmState",
        "startMetricStreams",
        "stopMetricStreams",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "cloudwatch-events",
      "className": "CloudWatchEvents",
      "operations": [
        "activateEventSource",
        "cancelReplay",
        "createApiDestination",
        "createArchive",
        "createConnection",
        "createEventBus",
        "createPartnerEventSource",
        "deactivateEventSource",
        "deauthorizeConnection",
        "deleteApiDestination",
        "deleteArchive",
        "deleteConnection",
        "deleteEventBus",
        "deletePartnerEventSource",
        "deleteRule",
        "describeApiDestination",
        "describeArchive",
        "describeConnection",
        "describeEventBus",
        "describeEventSource",
        "describePartnerEventSource",
        "describeReplay",
        "describeRule",
        "disableRule",
        "enableRule",
        "listApiDestinations",
        "listArchives",
        "listConnections",
        "listEventBuses",
        "listEventSources",
        "listPartnerEventSourceAccounts",
        "listPartnerEventSources",
        "listReplays",
        "listRuleNamesByTarget",
        "listRules",
        "listTagsForResource",
        "listTargetsByRule",
        "putEvents",
        "putPartnerEvents",
        "putPermission",
        "putRule",
        "putTargets",
        "removePermission",
        "removeTargets",
        "startReplay",
        "tagResource",
        "testEventPattern",
        "untagResource",
        "updateApiDestination",
        "updateArchive",
        "updateConnection"
      ]
    },
    {
      "service": "cloudwatch-logs",
      "className": "CloudWatchLogs",
      "operations": [
        "associateKmsKey",
        "cancelExportTask",
        "createDelivery",
        "createExportTask",
        "createLogAnomalyDetector",
        "createLogGroup",
        "createLogStream",
        "deleteAccountPolicy",
        "deleteDataProtectionPolicy",
        "deleteDelivery",
        "deleteDeliveryDestination",
        "deleteDeliveryDestinationPolicy",
        "deleteDeliverySource",
        "deleteDestination",
        "deleteIndexPolicy",
        "deleteIntegration",
        "deleteLogAnomalyDetector",
        "deleteLogGroup",
        "deleteLogStream",
        "deleteMetricFilter",
        "deleteQueryDefinition",
        "deleteResourcePolicy",
        "deleteRetentionPolicy",
        "deleteSubscriptionFilter",
        "deleteTransformer",
        "describeAccountPolicies",
        "describeConfigurationTemplates",
        "describeDeliveries",
        "describeDeliveryDestinations",
        "describeDeliverySources",
        "describeDestinations",
        "describeExportTasks",
        "describeFieldIndexes",
        "describeIndexPolicies",
        "describeLogGroups",
        "describeLogStreams",
        "describeMetricFilters",
        "describeQueries",
        "describeQueryDefinitions",
        "describeResourcePolicies",
        "describeSubscriptionFilters",
        "disassociateKmsKey",
        "filterLogEvents",
        "getDataProtectionPolicy",
        "getDelivery",
        "getDeliveryDestination",
        "getDeliveryDestinationPolicy",
        "getDeliverySource",
        "getIntegration",
        "getLogAnomalyDetector",
        "getLogEvents",
        "getLogGroupFields",
        "getLogObject",
        "getLogRecord",
        "getQueryResults",
        "getTransformer",
        "listAnomalies",
        "listIntegrations",
        "listLogAnomalyDetectors",
        "listLogGroups",
        "listLogGroupsForQuery",
        "listTagsForResource",
        "listTagsLogGroup",
        "putAccountPolicy",
        "putDataProtectionPolicy",
        "putDeliveryDestination",
        "putDeliveryDestinationPolicy",
        "putDeliverySource",
        "putDestination",
        "putDestinationPolicy",
        "putIndexPolicy",
        "putIntegration",
        "putLogEvents",
        "putMetricFilter",
        "putQueryDefinition",
        "putResourcePolicy",
        "putRetentionPolicy",
        "putSubscriptionFilter",
        "putTransformer",
        "startLiveTail",
        "startQuery",
        "stopQuery",
        "tagLogGroup",
        "tagResource",
        "testMetricFilter",
        "testTransformer",
        "untagLogGroup",
        "untagResource",
        "updateAnomaly",
        "updateDeliveryConfiguration",
        "updateLogAnomalyDetector"
      ]
    },
    {
      "service": "codeartifact",
      "className": "codeartifact",
      "operations": [
        "associateExternalConnection",
        "copyPackageVersions",
        "createDomain",
        "createPackageGroup",
        "createRepository",
        "deleteDomain",
        "deleteDomainPermissionsPolicy",
        "deletePackage",
        "deletePackageGroup",
        "deletePackageVersions",
        "deleteRepository",
        "deleteRepositoryPermissionsPolicy",
        "describeDomain",
        "describePackage",
        "describePackageGroup",
        "describePackageVersion",
        "describeRepository",
        "disassociateExternalConnection",
        "disposePackageVersions",
        "getAssociatedPackageGroup",
        "getAuthorizationToken",
        "getDomainPermissionsPolicy",
        "getPackageVersionAsset",
        "getPackageVersionReadme",
        "getRepositoryEndpoint",
        "getRepositoryPermissionsPolicy",
        "listAllowedRepositoriesForGroup",
        "listAssociatedPackages",
        "listDomains",
        "listPackageGroups",
        "listPackages",
        "listPackageVersionAssets",
        "listPackageVersionDependencies",
        "listPackageVersions",
        "listRepositories",
        "listRepositoriesInDomain",
        "listSubPackageGroups",
        "listTagsForResource",
        "publishPackageVersion",
        "putDomainPermissionsPolicy",
        "putPackageOriginConfiguration",
        "putRepositoryPermissionsPolicy",
        "tagResource",
        "untagResource",
        "updatePackageGroup",
        "updatePackageGroupOriginConfiguration",
        "updatePackageVersionsStatus",
        "updateRepository"
      ]
    },
    {
      "service": "codebuild",
      "className": "CodeBuild",
      "operations": [
        "batchDeleteBuilds",
        "batchGetBuildBatches",
        "batchGetBuilds",
        "batchGetCommandExecutions",
        "batchGetFleets",
        "batchGetProjects",
        "batchGetReportGroups",
        "batchGetReports",
        "batchGetSandboxes",
        "createFleet",
        "createProject",
        "createReportGroup",
        "createWebhook",
        "deleteBuildBatch",
        "deleteFleet",
        "deleteProject",
        "deleteReport",
        "deleteReportGroup",
        "deleteResourcePolicy",
        "deleteSourceCredentials",
        "deleteWebhook",
        "describeCodeCoverages",
        "describeTestCases",
        "getReportGroupTrend",
        "getResourcePolicy",
        "importSourceCredentials",
        "invalidateProjectCache",
        "listBuildBatches",
        "listBuildBatchesForProject",
        "listBuilds",
        "listBuildsForProject",
        "listCommandExecutionsForSandbox",
        "listCuratedEnvironmentImages",
        "listFleets",
        "listProjects",
        "listReportGroups",
        "listReports",
        "listReportsForReportGroup",
        "listSandboxes",
        "listSandboxesForProject",
        "listSharedProjects",
        "listSharedReportGroups",
        "listSourceCredentials",
        "putResourcePolicy",
        "retryBuild",
        "retryBuildBatch",
        "startBuild",
        "startBuildBatch",
        "startCommandExecution",
        "startSandbox",
        "startSandboxConnection",
        "stopBuild",
        "stopBuildBatch",
        "stopSandbox",
        "updateFleet",
        "updateProject",
        "updateProjectVisibility",
        "updateReportGroup",
        "updateWebhook"
      ]
    },
    {
      "service": "codecatalyst",
      "className": "CodeCatalyst",
      "operations": [
        "getUserDetails",
        "verifySession",
        "createAccessToken",
        "createDevEnvironment",
        "createProject",
        "createSourceRepository",
        "createSourceRepositoryBranch",
        "deleteAccessToken",
        "deleteDevEnvironment",
        "deleteProject",
        "deleteSourceRepository",
        "deleteSpace",
        "getDevEnvironment",
        "getProject",
        "getSourceRepository",
        "getSourceRepositoryCloneUrls",
        "getSpace",
        "getSubscription",
        "getWorkflow",
        "getWorkflowRun",
        "listAccessTokens",
        "listDevEnvironmentSessions",
        "listDevEnvironments",
        "listEventLogs",
        "listProjects",
        "listSourceRepositories",
        "listSourceRepositoryBranches",
        "listSpaces",
        "listWorkflowRuns",
        "listWorkflows",
        "startDevEnvironment",
        "startDevEnvironmentSession",
        "startWorkflowRun",
        "stopDevEnvironment",
        "stopDevEnvironmentSession",
        "updateDevEnvironment",
        "updateProject",
        "updateSpace"
      ]
    },
    {
      "service": "codecommit",
      "className": "CodeCommit",
      "operations": [
        "associateApprovalRuleTemplateWithRepository",
        "batchAssociateApprovalRuleTemplateWithRepositories",
        "batchDescribeMergeConflicts",
        "batchDisassociateApprovalRuleTemplateFromRepositories",
        "batchGetCommits",
        "batchGetRepositories",
        "createApprovalRuleTemplate",
        "createBranch",
        "createCommit",
        "createPullRequest",
        "createPullRequestApprovalRule",
        "createRepository",
        "createUnreferencedMergeCommit",
        "deleteApprovalRuleTemplate",
        "deleteBranch",
        "deleteCommentContent",
        "deleteFile",
        "deletePullRequestApprovalRule",
        "deleteRepository",
        "describeMergeConflicts",
        "describePullRequestEvents",
        "disassociateApprovalRuleTemplateFromRepository",
        "evaluatePullRequestApprovalRules",
        "getApprovalRuleTemplate",
        "getBlob",
        "getBranch",
        "getComment",
        "getCommentReactions",
        "getCommentsForComparedCommit",
        "getCommentsForPullRequest",
        "getCommit",
        "getDifferences",
        "getFile",
        "getFolder",
        "getMergeCommit",
        "getMergeConflicts",
        "getMergeOptions",
        "getPullRequest",
        "getPullRequestApprovalStates",
        "getPullRequestOverrideState",
        "getRepository",
        "getRepositoryTriggers",
        "listApprovalRuleTemplates",
        "listAssociatedApprovalRuleTemplatesForRepository",
        "listBranches",
        "listFileCommitHistory",
        "listPullRequests",
        "listRepositories",
        "listRepositoriesForApprovalRuleTemplate",
        "listTagsForResource",
        "mergeBranchesByFastForward",
        "mergeBranchesBySquash",
        "mergeBranchesByThreeWay",
        "mergePullRequestByFastForward",
        "mergePullRequestBySquash",
        "mergePullRequestByThreeWay",
        "overridePullRequestApprovalRules",
        "postCommentForComparedCommit",
        "postCommentForPullRequest",
        "postCommentReply",
        "putCommentReaction",
        "putFile",
        "putRepositoryTriggers",
        "tagResource",
        "testRepositoryTriggers",
        "untagResource",
        "updateApprovalRuleTemplateContent",
        "updateApprovalRuleTemplateDescription",
        "updateApprovalRuleTemplateName",
        "updateComment",
        "updateDefaultBranch",
        "updatePullRequestApprovalRuleContent",
        "updatePullRequestApprovalState",
        "updatePullRequestDescription",
        "updatePullRequestStatus",
        "updatePullRequestTitle",
        "updateRepositoryDescription",
        "updateRepositoryEncryptionKey",
        "updateRepositoryName"
      ]
    },
    {
      "service": "codeconnections",
      "className": "CodeConnections",
      "operations": [
        "createConnection",
        "createHost",
        "createRepositoryLink",
        "createSyncConfiguration",
        "deleteConnection",
        "deleteHost",
        "deleteRepositoryLink",
        "deleteSyncConfiguration",
        "getConnection",
        "getHost",
        "getRepositoryLink",
        "getRepositorySyncStatus",
        "getResourceSyncStatus",
        "getSyncBlockerSummary",
        "getSyncConfiguration",
        "listConnections",
        "listHosts",
        "listRepositoryLinks",
        "listRepositorySyncDefinitions",
        "listSyncConfigurations",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "updateHost",
        "updateRepositoryLink",
        "updateSyncBlocker",
        "updateSyncConfiguration"
      ]
    },
    {
      "service": "codedeploy",
      "className": "CodeDeploy",
      "operations": [
        "addTagsToOnPremisesInstances",
        "batchGetApplicationRevisions",
        "batchGetApplications",
        "batchGetDeploymentGroups",
        "batchGetDeploymentInstances",
        "batchGetDeployments",
        "batchGetDeploymentTargets",
        "batchGetOnPremisesInstances",
        "continueDeployment",
        "createApplication",
        "createDeployment",
        "createDeploymentConfig",
        "createDeploymentGroup",
        "deleteApplication",
        "deleteDeploymentConfig",
        "deleteDeploymentGroup",
        "deleteGitHubAccountToken",
        "deleteResourcesByExternalId",
        "deregisterOnPremisesInstance",
        "getApplication",
        "getApplicationRevision",
        "getDeployment",
        "getDeploymentConfig",
        "getDeploymentGroup",
        "getDeploymentInstance",
        "getDeploymentTarget",
        "getOnPremisesInstance",
        "listApplicationRevisions",
        "listApplications",
        "listDeploymentConfigs",
        "listDeploymentGroups",
        "listDeploymentInstances",
        "listDeployments",
        "listDeploymentTargets",
        "listGitHubAccountTokenNames",
        "listOnPremisesInstances",
        "listTagsForResource",
        "putLifecycleEventHookExecutionStatus",
        "registerApplicationRevision",
        "registerOnPremisesInstance",
        "removeTagsFromOnPremisesInstances",
        "skipWaitTimeForInstanceTermination",
        "stopDeployment",
        "tagResource",
        "untagResource",
        "updateApplication",
        "updateDeploymentGroup"
      ]
    },
    {
      "service": "codeguru-reviewer",
      "className": "CodeGuruReviewer",
      "operations": [
        "associateRepository",
        "createCodeReview",
        "describeCodeReview",
        "describeRecommendationFeedback",
        "describeRepositoryAssociation",
        "disassociateRepository",
        "listCodeReviews",
        "listRecommendationFeedback",
        "listRecommendations",
        "listRepositoryAssociations",
        "listTagsForResource",
        "putRecommendationFeedback",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "codeguru-security",
      "className": "CodeGuruSecurity",
      "operations": [
        "batchGetFindings",
        "createScan",
        "createUploadUrl",
        "getAccountConfiguration",
        "getFindings",
        "getMetricsSummary",
        "getScan",
        "listFindingsMetrics",
        "listScans",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "updateAccountConfiguration"
      ]
    },
    {
      "service": "codeguruprofiler",
      "className": "CodeGuruProfiler",
      "operations": [
        "getFindingsReportAccountSummary",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "addNotificationChannels",
        "batchGetFrameMetricData",
        "configureAgent",
        "createProfilingGroup",
        "deleteProfilingGroup",
        "describeProfilingGroup",
        "getNotificationConfiguration",
        "getPolicy",
        "getProfile",
        "getRecommendations",
        "listFindingsReports",
        "listProfileTimes",
        "listProfilingGroups",
        "postAgentProfile",
        "putPermission",
        "removeNotificationChannel",
        "removePermission",
        "submitFeedback",
        "updateProfilingGroup"
      ]
    },
    {
      "service": "codepipeline",
      "className": "CodePipeline",
      "operations": [
        "acknowledgeJob",
        "acknowledgeThirdPartyJob",
        "createCustomActionType",
        "createPipeline",
        "deleteCustomActionType",
        "deletePipeline",
        "deleteWebhook",
        "deregisterWebhookWithThirdParty",
        "disableStageTransition",
        "enableStageTransition",
        "getActionType",
        "getJobDetails",
        "getPipeline",
        "getPipelineExecution",
        "getPipelineState",
        "getThirdPartyJobDetails",
        "listActionExecutions",
        "listActionTypes",
        "listDeployActionExecutionTargets",
        "listPipelineExecutions",
        "listPipelines",
        "listRuleExecutions",
        "listRuleTypes",
        "listTagsForResource",
        "listWebhooks",
        "overrideStageCondition",
        "pollForJobs",
        "pollForThirdPartyJobs",
        "putActionRevision",
        "putApprovalResult",
        "putJobFailureResult",
        "putJobSuccessResult",
        "putThirdPartyJobFailureResult",
        "putThirdPartyJobSuccessResult",
        "putWebhook",
        "registerWebhookWithThirdParty",
        "retryStageExecution",
        "rollbackStage",
        "startPipelineExecution",
        "stopPipelineExecution",
        "tagResource",
        "untagResource",
        "updateActionType",
        "updatePipeline"
      ]
    },
    {
      "service": "codestar-connections",
      "className": "CodeStarconnections",
      "operations": [
        "createConnection",
        "createHost",
        "createRepositoryLink",
        "createSyncConfiguration",
        "deleteConnection",
        "deleteHost",
        "deleteRepositoryLink",
        "deleteSyncConfiguration",
        "getConnection",
        "getHost",
        "getRepositoryLink",
        "getRepositorySyncStatus",
        "getResourceSyncStatus",
        "getSyncBlockerSummary",
        "getSyncConfiguration",
        "listConnections",
        "listHosts",
        "listRepositoryLinks",
        "listRepositorySyncDefinitions",
        "listSyncConfigurations",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "updateHost",
        "updateRepositoryLink",
        "updateSyncBlocker",
        "updateSyncConfiguration"
      ]
    },
    {
      "service": "codestar-notifications",
      "className": "codestarnotifications",
      "operations": [
        "createNotificationRule",
        "deleteNotificationRule",
        "deleteTarget",
        "describeNotificationRule",
        "listEventTypes",
        "listNotificationRules",
        "listTagsForResource",
        "listTargets",
        "subscribe",
        "tagResource",
        "unsubscribe",
        "untagResource",
        "updateNotificationRule"
      ]
    },
    {
      "service": "cognito-identity",
      "className": "CognitoIdentity",
      "operations": [
        "createIdentityPool",
        "deleteIdentities",
        "deleteIdentityPool",
        "describeIdentity",
        "describeIdentityPool",
        "getCredentialsForIdentity",
        "getId",
        "getIdentityPoolRoles",
        "getOpenIdToken",
        "getOpenIdTokenForDeveloperIdentity",
        "getPrincipalTagAttributeMap",
        "listIdentities",
        "listIdentityPools",
        "listTagsForResource",
        "lookupDeveloperIdentity",
        "mergeDeveloperIdentities",
        "setIdentityPoolRoles",
        "setPrincipalTagAttributeMap",
        "tagResource",
        "unlinkDeveloperIdentity",
        "unlinkIdentity",
        "untagResource",
        "updateIdentityPool"
      ]
    },
    {
      "service": "cognito-identity-provider",
      "className": "CognitoIdentityProvider",
      "operations": [
        "addCustomAttributes",
        "adminAddUserToGroup",
        "adminConfirmSignUp",
        "adminCreateUser",
        "adminDeleteUser",
        "adminDeleteUserAttributes",
        "adminDisableProviderForUser",
        "adminDisableUser",
        "adminEnableUser",
        "adminForgetDevice",
        "adminGetDevice",
        "adminGetUser",
        "adminInitiateAuth",
        "adminLinkProviderForUser",
        "adminListDevices",
        "adminListGroupsForUser",
        "adminListUserAuthEvents",
        "adminRemoveUserFromGroup",
        "adminResetUserPassword",
        "adminRespondToAuthChallenge",
        "adminSetUserMFAPreference",
        "adminSetUserPassword",
        "adminSetUserSettings",
        "adminUpdateAuthEventFeedback",
        "adminUpdateDeviceStatus",
        "adminUpdateUserAttributes",
        "adminUserGlobalSignOut",
        "associateSoftwareToken",
        "changePassword",
        "completeWebAuthnRegistration",
        "confirmDevice",
        "confirmForgotPassword",
        "confirmSignUp",
        "createGroup",
        "createIdentityProvider",
        "createManagedLoginBranding",
        "createResourceServer",
        "createUserImportJob",
        "createUserPool",
        "createUserPoolClient",
        "createUserPoolDomain",
        "deleteGroup",
        "deleteIdentityProvider",
        "deleteManagedLoginBranding",
        "deleteResourceServer",
        "deleteUser",
        "deleteUserAttributes",
        "deleteUserPool",
        "deleteUserPoolClient",
        "deleteUserPoolDomain",
        "deleteWebAuthnCredential",
        "describeIdentityProvider",
        "describeManagedLoginBranding",
        "describeManagedLoginBrandingByClient",
        "describeResourceServer",
        "describeRiskConfiguration",
        "describeUserImportJob",
        "describeUserPool",
        "describeUserPoolClient",
        "describeUserPoolDomain",
        "forgetDevice",
        "forgotPassword",
        "getCSVHeader",
        "getDevice",
        "getGroup",
        "getIdentityProviderByIdentifier",
        "getLogDeliveryConfiguration",
        "getSigningCertificate",
        "getTokensFromRefreshToken",
        "getUICustomization",
        "getUser",
        "getUserAttributeVerificationCode",
        "getUserAuthFactors",
        "getUserPoolMfaConfig",
        "globalSignOut",
        "initiateAuth",
        "listDevices",
        "listGroups",
        "listIdentityProviders",
        "listResourceServers",
        "listTagsForResource",
        "listUserImportJobs",
        "listUserPoolClients",
        "listUserPools",
        "listUsers",
        "listUsersInGroup",
        "listWebAuthnCredentials",
        "resendConfirmationCode",
        "respondToAuthChallenge",
        "revokeToken",
        "setLogDeliveryConfiguration",
        "setRiskConfiguration",
        "setUICustomization",
        "setUserMFAPreference",
        "setUserPoolMfaConfig",
        "setUserSettings",
        "signUp",
        "startUserImportJob",
        "startWebAuthnRegistration",
        "stopUserImportJob",
        "tagResource",
        "untagResource",
        "updateAuthEventFeedback",
        "updateDeviceStatus",
        "updateGroup",
        "updateIdentityProvider",
        "updateManagedLoginBranding",
        "updateResourceServer",
        "updateUserAttributes",
        "updateUserPool",
        "updateUserPoolClient",
        "updateUserPoolDomain",
        "verifySoftwareToken",
        "verifyUserAttribute"
      ]
    },
    {
      "service": "cognito-sync",
      "className": "CognitoSync",
      "operations": [
        "bulkPublish",
        "deleteDataset",
        "describeDataset",
        "describeIdentityPoolUsage",
        "describeIdentityUsage",
        "getBulkPublishDetails",
        "getCognitoEvents",
        "getIdentityPoolConfiguration",
        "listDatasets",
        "listIdentityPoolUsage",
        "listRecords",
        "registerDevice",
        "setCognitoEvents",
        "setIdentityPoolConfiguration",
        "subscribeToDataset",
        "unsubscribeFromDataset",
        "updateRecords"
      ]
    },
    {
      "service": "comprehend",
      "className": "Comprehend",
      "operations": [
        "batchDetectDominantLanguage",
        "batchDetectEntities",
        "batchDetectKeyPhrases",
        "batchDetectSentiment",
        "batchDetectSyntax",
        "batchDetectTargetedSentiment",
        "classifyDocument",
        "containsPiiEntities",
        "createDataset",
        "createDocumentClassifier",
        "createEndpoint",
        "createEntityRecognizer",
        "createFlywheel",
        "deleteDocumentClassifier",
        "deleteEndpoint",
        "deleteEntityRecognizer",
        "deleteFlywheel",
        "deleteResourcePolicy",
        "describeDataset",
        "describeDocumentClassificationJob",
        "describeDocumentClassifier",
        "describeDominantLanguageDetectionJob",
        "describeEndpoint",
        "describeEntitiesDetectionJob",
        "describeEntityRecognizer",
        "describeEventsDetectionJob",
        "describeFlywheel",
        "describeFlywheelIteration",
        "describeKeyPhrasesDetectionJob",
        "describePiiEntitiesDetectionJob",
        "describeResourcePolicy",
        "describeSentimentDetectionJob",
        "describeTargetedSentimentDetectionJob",
        "describeTopicsDetectionJob",
        "detectDominantLanguage",
        "detectEntities",
        "detectKeyPhrases",
        "detectPiiEntities",
        "detectSentiment",
        "detectSyntax",
        "detectTargetedSentiment",
        "detectToxicContent",
        "importModel",
        "listDatasets",
        "listDocumentClassificationJobs",
        "listDocumentClassifiers",
        "listDocumentClassifierSummaries",
        "listDominantLanguageDetectionJobs",
        "listEndpoints",
        "listEntitiesDetectionJobs",
        "listEntityRecognizers",
        "listEntityRecognizerSummaries",
        "listEventsDetectionJobs",
        "listFlywheelIterationHistory",
        "listFlywheels",
        "listKeyPhrasesDetectionJobs",
        "listPiiEntitiesDetectionJobs",
        "listSentimentDetectionJobs",
        "listTagsForResource",
        "listTargetedSentimentDetectionJobs",
        "listTopicsDetectionJobs",
        "putResourcePolicy",
        "startDocumentClassificationJob",
        "startDominantLanguageDetectionJob",
        "startEntitiesDetectionJob",
        "startEventsDetectionJob",
        "startFlywheelIteration",
        "startKeyPhrasesDetectionJob",
        "startPiiEntitiesDetectionJob",
        "startSentimentDetectionJob",
        "startTargetedSentimentDetectionJob",
        "startTopicsDetectionJob",
        "stopDominantLanguageDetectionJob",
        "stopEntitiesDetectionJob",
        "stopEventsDetectionJob",
        "stopKeyPhrasesDetectionJob",
        "stopPiiEntitiesDetectionJob",
        "stopSentimentDetectionJob",
        "stopTargetedSentimentDetectionJob",
        "stopTrainingDocumentClassifier",
        "stopTrainingEntityRecognizer",
        "tagResource",
        "untagResource",
        "updateEndpoint",
        "updateFlywheel"
      ]
    },
    {
      "service": "comprehendmedical",
      "className": "ComprehendMedical",
      "operations": [
        "describeEntitiesDetectionV2Job",
        "describeICD10CMInferenceJob",
        "describePHIDetectionJob",
        "describeRxNormInferenceJob",
        "describeSNOMEDCTInferenceJob",
        "detectEntities",
        "detectEntitiesV2",
        "detectPHI",
        "inferICD10CM",
        "inferRxNorm",
        "inferSNOMEDCT",
        "listEntitiesDetectionV2Jobs",
        "listICD10CMInferenceJobs",
        "listPHIDetectionJobs",
        "listRxNormInferenceJobs",
        "listSNOMEDCTInferenceJobs",
        "startEntitiesDetectionV2Job",
        "startICD10CMInferenceJob",
        "startPHIDetectionJob",
        "startRxNormInferenceJob",
        "startSNOMEDCTInferenceJob",
        "stopEntitiesDetectionV2Job",
        "stopICD10CMInferenceJob",
        "stopPHIDetectionJob",
        "stopRxNormInferenceJob",
        "stopSNOMEDCTInferenceJob"
      ]
    },
    {
      "service": "compute-optimizer",
      "className": "ComputeOptimizer",
      "operations": [
        "deleteRecommendationPreferences",
        "describeRecommendationExportJobs",
        "exportAutoScalingGroupRecommendations",
        "exportEBSVolumeRecommendations",
        "exportEC2InstanceRecommendations",
        "exportECSServiceRecommendations",
        "exportIdleRecommendations",
        "exportLambdaFunctionRecommendations",
        "exportLicenseRecommendations",
        "exportRDSDatabaseRecommendations",
        "getAutoScalingGroupRecommendations",
        "getEBSVolumeRecommendations",
        "getEC2InstanceRecommendations",
        "getEC2RecommendationProjectedMetrics",
        "getECSServiceRecommendationProjectedMetrics",
        "getECSServiceRecommendations",
        "getEffectiveRecommendationPreferences",
        "getEnrollmentStatus",
        "getEnrollmentStatusesForOrganization",
        "getIdleRecommendations",
        "getLambdaFunctionRecommendations",
        "getLicenseRecommendations",
        "getRDSDatabaseRecommendationProjectedMetrics",
        "getRDSDatabaseRecommendations",
        "getRecommendationPreferences",
        "getRecommendationSummaries",
        "putRecommendationPreferences",
        "updateEnrollmentStatus"
      ]
    },
    {
      "service": "config-service",
      "className": "ConfigService",
      "operations": [
        "associateResourceTypes",
        "batchGetAggregateResourceConfig",
        "batchGetResourceConfig",
        "deleteAggregationAuthorization",
        "deleteConfigRule",
        "deleteConfigurationAggregator",
        "deleteConfigurationRecorder",
        "deleteConformancePack",
        "deleteDeliveryChannel",
        "deleteEvaluationResults",
        "deleteOrganizationConfigRule",
        "deleteOrganizationConformancePack",
        "deletePendingAggregationRequest",
        "deleteRemediationConfiguration",
        "deleteRemediationExceptions",
        "deleteResourceConfig",
        "deleteRetentionConfiguration",
        "deleteServiceLinkedConfigurationRecorder",
        "deleteStoredQuery",
        "deliverConfigSnapshot",
        "describeAggregateComplianceByConfigRules",
        "describeAggregateComplianceByConformancePacks",
        "describeAggregationAuthorizations",
        "describeComplianceByConfigRule",
        "describeComplianceByResource",
        "describeConfigRuleEvaluationStatus",
        "describeConfigRules",
        "describeConfigurationAggregators",
        "describeConfigurationAggregatorSourcesStatus",
        "describeConfigurationRecorders",
        "describeConfigurationRecorderStatus",
        "describeConformancePackCompliance",
        "describeConformancePacks",
        "describeConformancePackStatus",
        "describeDeliveryChannels",
        "describeDeliveryChannelStatus",
        "describeOrganizationConfigRules",
        "describeOrganizationConfigRuleStatuses",
        "describeOrganizationConformancePacks",
        "describeOrganizationConformancePackStatuses",
        "describePendingAggregationRequests",
        "describeRemediationConfigurations",
        "describeRemediationExceptions",
        "describeRemediationExecutionStatus",
        "describeRetentionConfigurations",
        "disassociateResourceTypes",
        "getAggregateComplianceDetailsByConfigRule",
        "getAggregateConfigRuleComplianceSummary",
        "getAggregateConformancePackComplianceSummary",
        "getAggregateDiscoveredResourceCounts",
        "getAggregateResourceConfig",
        "getComplianceDetailsByConfigRule",
        "getComplianceDetailsByResource",
        "getComplianceSummaryByConfigRule",
        "getComplianceSummaryByResourceType",
        "getConformancePackComplianceDetails",
        "getConformancePackComplianceSummary",
        "getCustomRulePolicy",
        "getDiscoveredResourceCounts",
        "getOrganizationConfigRuleDetailedStatus",
        "getOrganizationConformancePackDetailedStatus",
        "getOrganizationCustomRulePolicy",
        "getResourceConfigHistory",
        "getResourceEvaluationSummary",
        "getStoredQuery",
        "listAggregateDiscoveredResources",
        "listConfigurationRecorders",
        "listConformancePackComplianceScores",
        "listDiscoveredResources",
        "listResourceEvaluations",
        "listStoredQueries",
        "listTagsForResource",
        "putAggregationAuthorization",
        "putConfigRule",
        "putConfigurationAggregator",
        "putConfigurationRecorder",
        "putConformancePack",
        "putDeliveryChannel",
        "putEvaluations",
        "putExternalEvaluation",
        "putOrganizationConfigRule",
        "putOrganizationConformancePack",
        "putRemediationConfigurations",
        "putRemediationExceptions",
        "putResourceConfig",
        "putRetentionConfiguration",
        "putServiceLinkedConfigurationRecorder",
        "putStoredQuery",
        "selectAggregateResourceConfig",
        "selectResourceConfig",
        "startConfigRulesEvaluation",
        "startConfigurationRecorder",
        "startRemediationExecution",
        "startResourceEvaluation",
        "stopConfigurationRecorder",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "connect",
      "className": "Connect",
      "operations": [
        "activateEvaluationForm",
        "associateAnalyticsDataSet",
        "associateApprovedOrigin",
        "associateBot",
        "associateDefaultVocabulary",
        "associateFlow",
        "associateInstanceStorageConfig",
        "associateLambdaFunction",
        "associateLexBot",
        "associatePhoneNumberContactFlow",
        "associateQueueQuickConnects",
        "associateRoutingProfileQueues",
        "associateSecurityKey",
        "associateTrafficDistributionGroupUser",
        "associateUserProficiencies",
        "batchAssociateAnalyticsDataSet",
        "batchDisassociateAnalyticsDataSet",
        "batchGetAttachedFileMetadata",
        "batchGetFlowAssociation",
        "batchPutContact",
        "claimPhoneNumber",
        "completeAttachedFileUpload",
        "createAgentStatus",
        "createContact",
        "createContactFlow",
        "createContactFlowModule",
        "createContactFlowVersion",
        "createEmailAddress",
        "createEvaluationForm",
        "createHoursOfOperation",
        "createHoursOfOperationOverride",
        "createInstance",
        "createIntegrationAssociation",
        "createParticipant",
        "createPersistentContactAssociation",
        "createPredefinedAttribute",
        "createPrompt",
        "createPushNotificationRegistration",
        "createQueue",
        "createQuickConnect",
        "createRoutingProfile",
        "createRule",
        "createSecurityProfile",
        "createTaskTemplate",
        "createTrafficDistributionGroup",
        "createUseCase",
        "createUser",
        "createUserHierarchyGroup",
        "createView",
        "createViewVersion",
        "createVocabulary",
        "deactivateEvaluationForm",
        "deleteAttachedFile",
        "deleteContactEvaluation",
        "deleteContactFlow",
        "deleteContactFlowModule",
        "deleteContactFlowVersion",
        "deleteEmailAddress",
        "deleteEvaluationForm",
        "deleteHoursOfOperation",
        "deleteHoursOfOperationOverride",
        "deleteInstance",
        "deleteIntegrationAssociation",
        "deletePredefinedAttribute",
        "deletePrompt",
        "deletePushNotificationRegistration",
        "deleteQueue",
        "deleteQuickConnect",
        "deleteRoutingProfile",
        "deleteRule",
        "deleteSecurityProfile",
        "deleteTaskTemplate",
        "deleteTrafficDistributionGroup",
        "deleteUseCase",
        "deleteUser",
        "deleteUserHierarchyGroup",
        "deleteView",
        "deleteViewVersion",
        "deleteVocabulary",
        "describeAgentStatus",
        "describeAuthenticationProfile",
        "describeContact",
        "describeContactEvaluation",
        "describeContactFlow",
        "describeContactFlowModule",
        "describeEmailAddress",
        "describeEvaluationForm",
        "describeHoursOfOperation",
        "describeHoursOfOperationOverride",
        "describeInstance",
        "describeInstanceAttribute",
        "describeInstanceStorageConfig",
        "describePhoneNumber",
        "describePredefinedAttribute",
        "describePrompt",
        "describeQueue",
        "describeQuickConnect",
        "describeRoutingProfile",
        "describeRule",
        "describeSecurityProfile",
        "describeTrafficDistributionGroup",
        "describeUser",
        "describeUserHierarchyGroup",
        "describeUserHierarchyStructure",
        "describeView",
        "describeVocabulary",
        "disassociateAnalyticsDataSet",
        "disassociateApprovedOrigin",
        "disassociateBot",
        "disassociateFlow",
        "disassociateInstanceStorageConfig",
        "disassociateLambdaFunction",
        "disassociateLexBot",
        "disassociatePhoneNumberContactFlow",
        "disassociateQueueQuickConnects",
        "disassociateRoutingProfileQueues",
        "disassociateSecurityKey",
        "disassociateTrafficDistributionGroupUser",
        "disassociateUserProficiencies",
        "dismissUserContact",
        "getAttachedFile",
        "getContactAttributes",
        "getCurrentMetricData",
        "getCurrentUserData",
        "getEffectiveHoursOfOperations",
        "getFederationToken",
        "getFlowAssociation",
        "getMetricData",
        "getMetricDataV2",
        "getPromptFile",
        "getTaskTemplate",
        "getTrafficDistribution",
        "importPhoneNumber",
        "listAgentStatuses",
        "listAnalyticsDataAssociations",
        "listAnalyticsDataLakeDataSets",
        "listApprovedOrigins",
        "listAssociatedContacts",
        "listAuthenticationProfiles",
        "listBots",
        "listContactEvaluations",
        "listContactFlowModules",
        "listContactFlows",
        "listContactFlowVersions",
        "listContactReferences",
        "listDefaultVocabularies",
        "listEvaluationForms",
        "listEvaluationFormVersions",
        "listFlowAssociations",
        "listHoursOfOperationOverrides",
        "listHoursOfOperations",
        "listInstanceAttributes",
        "listInstances",
        "listInstanceStorageConfigs",
        "listIntegrationAssociations",
        "listLambdaFunctions",
        "listLexBots",
        "listPhoneNumbers",
        "listPhoneNumbersV2",
        "listPredefinedAttributes",
        "listPrompts",
        "listQueueQuickConnects",
        "listQueues",
        "listQuickConnects",
        "listRealtimeContactAnalysisSegmentsV2",
        "listRoutingProfileQueues",
        "listRoutingProfiles",
        "listRules",
        "listSecurityKeys",
        "listSecurityProfileApplications",
        "listSecurityProfilePermissions",
        "listSecurityProfiles",
        "listTagsForResource",
        "listTaskTemplates",
        "listTrafficDistributionGroups",
        "listTrafficDistributionGroupUsers",
        "listUseCases",
        "listUserHierarchyGroups",
        "listUserProficiencies",
        "listUsers",
        "listViews",
        "listViewVersions",
        "monitorContact",
        "pauseContact",
        "putUserStatus",
        "releasePhoneNumber",
        "replicateInstance",
        "resumeContact",
        "resumeContactRecording",
        "searchAgentStatuses",
        "searchAvailablePhoneNumbers",
        "searchContactFlowModules",
        "searchContactFlows",
        "searchContacts",
        "searchEmailAddresses",
        "searchHoursOfOperationOverrides",
        "searchHoursOfOperations",
        "searchPredefinedAttributes",
        "searchPrompts",
        "searchQueues",
        "searchQuickConnects",
        "searchResourceTags",
        "searchRoutingProfiles",
        "searchSecurityProfiles",
        "searchUserHierarchyGroups",
        "searchUsers",
        "searchVocabularies",
        "sendChatIntegrationEvent",
        "sendOutboundEmail",
        "startAttachedFileUpload",
        "startChatContact",
        "startContactEvaluation",
        "startContactRecording",
        "startContactStreaming",
        "startEmailContact",
        "startOutboundChatContact",
        "startOutboundEmailContact",
        "startOutboundVoiceContact",
        "startScreenSharing",
        "startTaskContact",
        "startWebRTCContact",
        "stopContact",
        "stopContactRecording",
        "stopContactStreaming",
        "submitContactEvaluation",
        "suspendContactRecording",
        "tagContact",
        "tagResource",
        "transferContact",
        "untagContact",
        "untagResource",
        "updateAgentStatus",
        "updateAuthenticationProfile",
        "updateContact",
        "updateContactAttributes",
        "updateContactEvaluation",
        "updateContactFlowContent",
        "updateContactFlowMetadata",
        "updateContactFlowModuleContent",
        "updateContactFlowModuleMetadata",
        "updateContactFlowName",
        "updateContactRoutingData",
        "updateContactSchedule",
        "updateEmailAddressMetadata",
        "updateEvaluationForm",
        "updateHoursOfOperation",
        "updateHoursOfOperationOverride",
        "updateInstanceAttribute",
        "updateInstanceStorageConfig",
        "updateParticipantAuthentication",
        "updateParticipantRoleConfig",
        "updatePhoneNumber",
        "updatePhoneNumberMetadata",
        "updatePredefinedAttribute",
        "updatePrompt",
        "updateQueueHoursOfOperation",
        "updateQueueMaxContacts",
        "updateQueueName",
        "updateQueueOutboundCallerConfig",
        "updateQueueOutboundEmailConfig",
        "updateQueueStatus",
        "updateQuickConnectConfig",
        "updateQuickConnectName",
        "updateRoutingProfileAgentAvailabilityTimer",
        "updateRoutingProfileConcurrency",
        "updateRoutingProfileDefaultOutboundQueue",
        "updateRoutingProfileName",
        "updateRoutingProfileQueues",
        "updateRule",
        "updateSecurityProfile",
        "updateTaskTemplate",
        "updateTrafficDistribution",
        "updateUserHierarchy",
        "updateUserHierarchyGroupName",
        "updateUserHierarchyStructure",
        "updateUserIdentityInfo",
        "updateUserPhoneConfig",
        "updateUserProficiencies",
        "updateUserRoutingProfile",
        "updateUserSecurityProfiles",
        "updateViewContent",
        "updateViewMetadata"
      ]
    },
    {
      "service": "connect-contact-lens",
      "className": "ConnectContactLens",
      "operations": [
        "listRealtimeContactAnalysisSegments"
      ]
    },
    {
      "service": "connectcampaigns",
      "className": "ConnectCampaigns",
      "operations": [
        "createCampaign",
        "deleteCampaign",
        "deleteConnectInstanceConfig",
        "deleteInstanceOnboardingJob",
        "describeCampaign",
        "getCampaignState",
        "getCampaignStateBatch",
        "getConnectInstanceConfig",
        "getInstanceOnboardingJobStatus",
        "listCampaigns",
        "listTagsForResource",
        "pauseCampaign",
        "putDialRequestBatch",
        "resumeCampaign",
        "startCampaign",
        "startInstanceOnboardingJob",
        "stopCampaign",
        "tagResource",
        "untagResource",
        "updateCampaignDialerConfig",
        "updateCampaignName",
        "updateCampaignOutboundCallConfig"
      ]
    },
    {
      "service": "connectcampaignsv2",
      "className": "ConnectCampaignsV2",
      "operations": [
        "createCampaign",
        "deleteCampaign",
        "deleteCampaignChannelSubtypeConfig",
        "deleteCampaignCommunicationLimits",
        "deleteCampaignCommunicationTime",
        "deleteConnectInstanceConfig",
        "deleteConnectInstanceIntegration",
        "deleteInstanceOnboardingJob",
        "describeCampaign",
        "getCampaignState",
        "getCampaignStateBatch",
        "getConnectInstanceConfig",
        "getInstanceCommunicationLimits",
        "getInstanceOnboardingJobStatus",
        "listCampaigns",
        "listConnectInstanceIntegrations",
        "listTagsForResource",
        "pauseCampaign",
        "putConnectInstanceIntegration",
        "putInstanceCommunicationLimits",
        "putOutboundRequestBatch",
        "putProfileOutboundRequestBatch",
        "resumeCampaign",
        "startCampaign",
        "startInstanceOnboardingJob",
        "stopCampaign",
        "tagResource",
        "untagResource",
        "updateCampaignChannelSubtypeConfig",
        "updateCampaignCommunicationLimits",
        "updateCampaignCommunicationTime",
        "updateCampaignFlowAssociation",
        "updateCampaignName",
        "updateCampaignSchedule",
        "updateCampaignSource"
      ]
    },
    {
      "service": "connectcases",
      "className": "ConnectCases",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "batchGetCaseRule",
        "batchGetField",
        "batchPutFieldOptions",
        "createCase",
        "createCaseRule",
        "createDomain",
        "createField",
        "createLayout",
        "createRelatedItem",
        "createTemplate",
        "deleteCase",
        "deleteCaseRule",
        "deleteDomain",
        "deleteField",
        "deleteLayout",
        "deleteRelatedItem",
        "deleteTemplate",
        "getCase",
        "getCaseAuditEvents",
        "getCaseEventConfiguration",
        "getDomain",
        "getLayout",
        "getTemplate",
        "listCaseRules",
        "listCasesForContact",
        "listDomains",
        "listFieldOptions",
        "listFields",
        "listLayouts",
        "listTemplates",
        "putCaseEventConfiguration",
        "searchCases",
        "searchRelatedItems",
        "updateCase",
        "updateCaseRule",
        "updateField",
        "updateLayout",
        "updateTemplate"
      ]
    },
    {
      "service": "connectparticipant",
      "className": "ConnectParticipant",
      "operations": [
        "cancelParticipantAuthentication",
        "completeAttachmentUpload",
        "createParticipantConnection",
        "describeView",
        "disconnectParticipant",
        "getAttachment",
        "getAuthenticationUrl",
        "getTranscript",
        "sendEvent",
        "sendMessage",
        "startAttachmentUpload"
      ]
    },
    {
      "service": "controlcatalog",
      "className": "ControlCatalog",
      "operations": [
        "listControlMappings",
        "getControl",
        "listCommonControls",
        "listControls",
        "listDomains",
        "listObjectives"
      ]
    },
    {
      "service": "controltower",
      "className": "ControlTower",
      "operations": [
        "disableControl",
        "createLandingZone",
        "deleteLandingZone",
        "disableBaseline",
        "enableBaseline",
        "enableControl",
        "getBaseline",
        "getBaselineOperation",
        "getControlOperation",
        "getEnabledBaseline",
        "getEnabledControl",
        "getLandingZone",
        "getLandingZoneOperation",
        "listBaselines",
        "listControlOperations",
        "listEnabledBaselines",
        "listEnabledControls",
        "listLandingZoneOperations",
        "listLandingZones",
        "listTagsForResource",
        "resetEnabledBaseline",
        "resetEnabledControl",
        "resetLandingZone",
        "tagResource",
        "untagResource",
        "updateEnabledBaseline",
        "updateEnabledControl",
        "updateLandingZone"
      ]
    },
    {
      "service": "cost-and-usage-report-service",
      "className": "CostandUsageReportService",
      "operations": [
        "deleteReportDefinition",
        "describeReportDefinitions",
        "listTagsForResource",
        "modifyReportDefinition",
        "putReportDefinition",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "cost-explorer",
      "className": "CostExplorer",
      "operations": [
        "createAnomalyMonitor",
        "createAnomalySubscription",
        "createCostCategoryDefinition",
        "deleteAnomalyMonitor",
        "deleteAnomalySubscription",
        "deleteCostCategoryDefinition",
        "describeCostCategoryDefinition",
        "getAnomalies",
        "getAnomalyMonitors",
        "getAnomalySubscriptions",
        "getApproximateUsageRecords",
        "getCommitmentPurchaseAnalysis",
        "getCostAndUsage",
        "getCostAndUsageComparisons",
        "getCostAndUsageWithResources",
        "getCostCategories",
        "getCostComparisonDrivers",
        "getCostForecast",
        "getDimensionValues",
        "getReservationCoverage",
        "getReservationPurchaseRecommendation",
        "getReservationUtilization",
        "getRightsizingRecommendation",
        "getSavingsPlanPurchaseRecommendationDetails",
        "getSavingsPlansCoverage",
        "getSavingsPlansPurchaseRecommendation",
        "getSavingsPlansUtilization",
        "getSavingsPlansUtilizationDetails",
        "getTags",
        "getUsageForecast",
        "listCommitmentPurchaseAnalyses",
        "listCostAllocationTagBackfillHistory",
        "listCostAllocationTags",
        "listCostCategoryDefinitions",
        "listSavingsPlansPurchaseRecommendationGeneration",
        "listTagsForResource",
        "provideAnomalyFeedback",
        "startCommitmentPurchaseAnalysis",
        "startCostAllocationTagBackfill",
        "startSavingsPlansPurchaseRecommendationGeneration",
        "tagResource",
        "untagResource",
        "updateAnomalyMonitor",
        "updateAnomalySubscription",
        "updateCostAllocationTagsStatus",
        "updateCostCategoryDefinition"
      ]
    },
    {
      "service": "cost-optimization-hub",
      "className": "CostOptimizationHub",
      "operations": [
        "getPreferences",
        "getRecommendation",
        "listEnrollmentStatuses",
        "listRecommendations",
        "listRecommendationSummaries",
        "updateEnrollmentStatus",
        "updatePreferences"
      ]
    },
    {
      "service": "customer-profiles",
      "className": "CustomerProfiles",
      "operations": [
        "addProfileKey",
        "batchGetCalculatedAttributeForProfile",
        "batchGetProfile",
        "createCalculatedAttributeDefinition",
        "createDomain",
        "createDomainLayout",
        "createEventStream",
        "createEventTrigger",
        "createIntegrationWorkflow",
        "createProfile",
        "createSegmentDefinition",
        "createSegmentEstimate",
        "createSegmentSnapshot",
        "createUploadJob",
        "deleteCalculatedAttributeDefinition",
        "deleteDomain",
        "deleteDomainLayout",
        "deleteEventStream",
        "deleteEventTrigger",
        "deleteIntegration",
        "deleteProfile",
        "deleteProfileKey",
        "deleteProfileObject",
        "deleteProfileObjectType",
        "deleteSegmentDefinition",
        "deleteWorkflow",
        "detectProfileObjectType",
        "getAutoMergingPreview",
        "getCalculatedAttributeDefinition",
        "getCalculatedAttributeForProfile",
        "getDomain",
        "getDomainLayout",
        "getEventStream",
        "getEventTrigger",
        "getIdentityResolutionJob",
        "getIntegration",
        "getMatches",
        "getProfileObjectType",
        "getProfileObjectTypeTemplate",
        "getSegmentDefinition",
        "getSegmentEstimate",
        "getSegmentMembership",
        "getSegmentSnapshot",
        "getSimilarProfiles",
        "getUploadJob",
        "getUploadJobPath",
        "getWorkflow",
        "getWorkflowSteps",
        "listAccountIntegrations",
        "listCalculatedAttributeDefinitions",
        "listCalculatedAttributesForProfile",
        "listDomainLayouts",
        "listDomains",
        "listEventStreams",
        "listEventTriggers",
        "listIdentityResolutionJobs",
        "listIntegrations",
        "listObjectTypeAttributes",
        "listProfileAttributeValues",
        "listProfileObjects",
        "listProfileObjectTypes",
        "listProfileObjectTypeTemplates",
        "listRuleBasedMatches",
        "listSegmentDefinitions",
        "listTagsForResource",
        "listUploadJobs",
        "listWorkflows",
        "mergeProfiles",
        "putIntegration",
        "putProfileObject",
        "putProfileObjectType",
        "searchProfiles",
        "startUploadJob",
        "stopUploadJob",
        "tagResource",
        "untagResource",
        "updateCalculatedAttributeDefinition",
        "updateDomain",
        "updateDomainLayout",
        "updateEventTrigger",
        "updateProfile"
      ]
    },
    {
      "service": "data-pipeline",
      "className": "DataPipeline",
      "operations": [
        "activatePipeline",
        "addTags",
        "createPipeline",
        "deactivatePipeline",
        "deletePipeline",
        "describeObjects",
        "describePipelines",
        "evaluateExpression",
        "getPipelineDefinition",
        "listPipelines",
        "pollForTask",
        "putPipelineDefinition",
        "queryObjects",
        "removeTags",
        "reportTaskProgress",
        "reportTaskRunnerHeartbeat",
        "setStatus",
        "setTaskStatus",
        "validatePipelineDefinition"
      ]
    },
    {
      "service": "database-migration-service",
      "className": "DatabaseMigrationService",
      "operations": [
        "addTagsToResource",
        "applyPendingMaintenanceAction",
        "batchStartRecommendations",
        "cancelReplicationTaskAssessmentRun",
        "createDataMigration",
        "createDataProvider",
        "createEndpoint",
        "createEventSubscription",
        "createFleetAdvisorCollector",
        "createInstanceProfile",
        "createMigrationProject",
        "createReplicationConfig",
        "createReplicationInstance",
        "createReplicationSubnetGroup",
        "createReplicationTask",
        "deleteCertificate",
        "deleteConnection",
        "deleteDataMigration",
        "deleteDataProvider",
        "deleteEndpoint",
        "deleteEventSubscription",
        "deleteFleetAdvisorCollector",
        "deleteFleetAdvisorDatabases",
        "deleteInstanceProfile",
        "deleteMigrationProject",
        "deleteReplicationConfig",
        "deleteReplicationInstance",
        "deleteReplicationSubnetGroup",
        "deleteReplicationTask",
        "deleteReplicationTaskAssessmentRun",
        "describeAccountAttributes",
        "describeApplicableIndividualAssessments",
        "describeCertificates",
        "describeConnections",
        "describeConversionConfiguration",
        "describeDataMigrations",
        "describeDataProviders",
        "describeEndpoints",
        "describeEndpointSettings",
        "describeEndpointTypes",
        "describeEngineVersions",
        "describeEventCategories",
        "describeEvents",
        "describeEventSubscriptions",
        "describeExtensionPackAssociations",
        "describeFleetAdvisorCollectors",
        "describeFleetAdvisorDatabases",
        "describeFleetAdvisorLsaAnalysis",
        "describeFleetAdvisorSchemaObjectSummary",
        "describeFleetAdvisorSchemas",
        "describeInstanceProfiles",
        "describeMetadataModelAssessments",
        "describeMetadataModelConversions",
        "describeMetadataModelExportsAsScript",
        "describeMetadataModelExportsToTarget",
        "describeMetadataModelImports",
        "describeMigrationProjects",
        "describeOrderableReplicationInstances",
        "describePendingMaintenanceActions",
        "describeRecommendationLimitations",
        "describeRecommendations",
        "describeRefreshSchemasStatus",
        "describeReplicationConfigs",
        "describeReplicationInstances",
        "describeReplicationInstanceTaskLogs",
        "describeReplications",
        "describeReplicationSubnetGroups",
        "describeReplicationTableStatistics",
        "describeReplicationTaskAssessmentResults",
        "describeReplicationTaskAssessmentRuns",
        "describeReplicationTaskIndividualAssessments",
        "describeReplicationTasks",
        "describeSchemas",
        "describeTableStatistics",
        "exportMetadataModelAssessment",
        "importCertificate",
        "listTagsForResource",
        "modifyConversionConfiguration",
        "modifyDataMigration",
        "modifyDataProvider",
        "modifyEndpoint",
        "modifyEventSubscription",
        "modifyInstanceProfile",
        "modifyMigrationProject",
        "modifyReplicationConfig",
        "modifyReplicationInstance",
        "modifyReplicationSubnetGroup",
        "modifyReplicationTask",
        "moveReplicationTask",
        "rebootReplicationInstance",
        "refreshSchemas",
        "reloadReplicationTables",
        "reloadTables",
        "removeTagsFromResource",
        "runFleetAdvisorLsaAnalysis",
        "startDataMigration",
        "startExtensionPackAssociation",
        "startMetadataModelAssessment",
        "startMetadataModelConversion",
        "startMetadataModelExportAsScript",
        "startMetadataModelExportToTarget",
        "startMetadataModelImport",
        "startRecommendations",
        "startReplication",
        "startReplicationTask",
        "startReplicationTaskAssessment",
        "startReplicationTaskAssessmentRun",
        "stopDataMigration",
        "stopReplication",
        "stopReplicationTask",
        "testConnection",
        "updateSubscriptionsToEventBridge"
      ]
    },
    {
      "service": "databrew",
      "className": "DataBrew",
      "operations": [
        "batchDeleteRecipeVersion",
        "createDataset",
        "createProfileJob",
        "createProject",
        "createRecipe",
        "createRecipeJob",
        "createRuleset",
        "createSchedule",
        "deleteDataset",
        "deleteJob",
        "deleteProject",
        "deleteRecipeVersion",
        "deleteRuleset",
        "deleteSchedule",
        "describeDataset",
        "describeJob",
        "describeJobRun",
        "describeProject",
        "describeRecipe",
        "describeRuleset",
        "describeSchedule",
        "listDatasets",
        "listJobRuns",
        "listJobs",
        "listProjects",
        "listRecipes",
        "listRecipeVersions",
        "listRulesets",
        "listSchedules",
        "listTagsForResource",
        "publishRecipe",
        "sendProjectSessionAction",
        "startJobRun",
        "startProjectSession",
        "stopJobRun",
        "tagResource",
        "untagResource",
        "updateDataset",
        "updateProfileJob",
        "updateProject",
        "updateRecipe",
        "updateRecipeJob",
        "updateRuleset",
        "updateSchedule"
      ]
    },
    {
      "service": "dataexchange",
      "className": "DataExchange",
      "operations": [
        "acceptDataGrant",
        "cancelJob",
        "createDataGrant",
        "createDataSet",
        "createEventAction",
        "createJob",
        "createRevision",
        "deleteAsset",
        "deleteDataGrant",
        "deleteDataSet",
        "deleteEventAction",
        "deleteRevision",
        "getAsset",
        "getDataGrant",
        "getDataSet",
        "getEventAction",
        "getJob",
        "getReceivedDataGrant",
        "getRevision",
        "listDataGrants",
        "listDataSetRevisions",
        "listDataSets",
        "listEventActions",
        "listJobs",
        "listReceivedDataGrants",
        "listRevisionAssets",
        "listTagsForResource",
        "revokeRevision",
        "sendApiAsset",
        "sendDataSetNotification",
        "startJob",
        "tagResource",
        "untagResource",
        "updateAsset",
        "updateDataSet",
        "updateEventAction",
        "updateRevision"
      ]
    },
    {
      "service": "datasync",
      "className": "DataSync",
      "operations": [
        "cancelTaskExecution",
        "createAgent",
        "createLocationAzureBlob",
        "createLocationEfs",
        "createLocationFsxLustre",
        "createLocationFsxOntap",
        "createLocationFsxOpenZfs",
        "createLocationFsxWindows",
        "createLocationHdfs",
        "createLocationNfs",
        "createLocationObjectStorage",
        "createLocationS3",
        "createLocationSmb",
        "createTask",
        "deleteAgent",
        "deleteLocation",
        "deleteTask",
        "describeAgent",
        "describeLocationAzureBlob",
        "describeLocationEfs",
        "describeLocationFsxLustre",
        "describeLocationFsxOntap",
        "describeLocationFsxOpenZfs",
        "describeLocationFsxWindows",
        "describeLocationHdfs",
        "describeLocationNfs",
        "describeLocationObjectStorage",
        "describeLocationS3",
        "describeLocationSmb",
        "describeTask",
        "describeTaskExecution",
        "listAgents",
        "listLocations",
        "listTagsForResource",
        "listTaskExecutions",
        "listTasks",
        "startTaskExecution",
        "tagResource",
        "untagResource",
        "updateAgent",
        "updateLocationAzureBlob",
        "updateLocationEfs",
        "updateLocationFsxLustre",
        "updateLocationFsxOntap",
        "updateLocationFsxOpenZfs",
        "updateLocationFsxWindows",
        "updateLocationHdfs",
        "updateLocationNfs",
        "updateLocationObjectStorage",
        "updateLocationS3",
        "updateLocationSmb",
        "updateTask",
        "updateTaskExecution"
      ]
    },
    {
      "service": "datazone",
      "className": "DataZone",
      "operations": [
        "acceptPredictions",
        "acceptSubscriptionRequest",
        "addEntityOwner",
        "addPolicyGrant",
        "associateEnvironmentRole",
        "cancelSubscription",
        "createAssetFilter",
        "createConnection",
        "createEnvironment",
        "createEnvironmentAction",
        "createEnvironmentProfile",
        "createGroupProfile",
        "createListingChangeSet",
        "createProject",
        "createProjectMembership",
        "createProjectProfile",
        "createSubscriptionGrant",
        "createSubscriptionRequest",
        "createSubscriptionTarget",
        "createUserProfile",
        "deleteAssetFilter",
        "deleteConnection",
        "deleteEnvironment",
        "deleteEnvironmentAction",
        "deleteEnvironmentProfile",
        "deleteProject",
        "deleteProjectMembership",
        "deleteProjectProfile",
        "deleteSubscriptionGrant",
        "deleteSubscriptionRequest",
        "deleteSubscriptionTarget",
        "deleteTimeSeriesDataPoints",
        "disassociateEnvironmentRole",
        "getAssetFilter",
        "getConnection",
        "getEnvironment",
        "getEnvironmentAction",
        "getEnvironmentBlueprint",
        "getEnvironmentCredentials",
        "getEnvironmentProfile",
        "getGroupProfile",
        "getIamPortalLoginUrl",
        "getJobRun",
        "getLineageEvent",
        "getLineageNode",
        "getProject",
        "getProjectProfile",
        "getSubscription",
        "getSubscriptionGrant",
        "getSubscriptionRequestDetails",
        "getSubscriptionTarget",
        "getTimeSeriesDataPoint",
        "getUserProfile",
        "listAssetFilters",
        "listAssetRevisions",
        "listConnections",
        "listDataProductRevisions",
        "listDataSourceRunActivities",
        "listEntityOwners",
        "listEnvironmentActions",
        "listEnvironmentBlueprints",
        "listEnvironmentProfiles",
        "listEnvironments",
        "listJobRuns",
        "listLineageEvents",
        "listLineageNodeHistory",
        "listNotifications",
        "listPolicyGrants",
        "listProjectMemberships",
        "listProjectProfiles",
        "listProjects",
        "listSubscriptionGrants",
        "listSubscriptionRequests",
        "listSubscriptions",
        "listSubscriptionTargets",
        "listTagsForResource",
        "listTimeSeriesDataPoints",
        "postLineageEvent",
        "postTimeSeriesDataPoints",
        "rejectPredictions",
        "rejectSubscriptionRequest",
        "removeEntityOwner",
        "removePolicyGrant",
        "revokeSubscription",
        "search",
        "searchGroupProfiles",
        "searchListings",
        "searchTypes",
        "searchUserProfiles",
        "tagResource",
        "untagResource",
        "updateAssetFilter",
        "updateConnection",
        "updateEnvironment",
        "updateEnvironmentAction",
        "updateEnvironmentProfile",
        "updateGroupProfile",
        "updateProject",
        "updateProjectProfile",
        "updateSubscriptionGrantStatus",
        "updateSubscriptionRequest",
        "updateSubscriptionTarget",
        "updateUserProfile",
        "cancelMetadataGenerationRun",
        "createAsset",
        "createAssetRevision",
        "createAssetType",
        "createDataProduct",
        "createDataProductRevision",
        "createDataSource",
        "createDomain",
        "createDomainUnit",
        "createFormType",
        "createGlossary",
        "createGlossaryTerm",
        "createRule",
        "deleteAsset",
        "deleteAssetType",
        "deleteDataProduct",
        "deleteDataSource",
        "deleteDomain",
        "deleteDomainUnit",
        "deleteEnvironmentBlueprintConfiguration",
        "deleteFormType",
        "deleteGlossary",
        "deleteGlossaryTerm",
        "deleteListing",
        "deleteRule",
        "getAsset",
        "getAssetType",
        "getDataProduct",
        "getDataSource",
        "getDataSourceRun",
        "getDomain",
        "getDomainUnit",
        "getEnvironmentBlueprintConfiguration",
        "getFormType",
        "getGlossary",
        "getGlossaryTerm",
        "getListing",
        "getMetadataGenerationRun",
        "getRule",
        "listDataSourceRuns",
        "listDataSources",
        "listDomainUnitsForParent",
        "listDomains",
        "listEnvironmentBlueprintConfigurations",
        "listMetadataGenerationRuns",
        "listRules",
        "putEnvironmentBlueprintConfiguration",
        "startDataSourceRun",
        "startMetadataGenerationRun",
        "updateDataSource",
        "updateDomain",
        "updateDomainUnit",
        "updateGlossary",
        "updateGlossaryTerm",
        "updateRule"
      ]
    },
    {
      "service": "dax",
      "className": "DAX",
      "operations": [
        "createCluster",
        "createParameterGroup",
        "createSubnetGroup",
        "decreaseReplicationFactor",
        "deleteCluster",
        "deleteParameterGroup",
        "deleteSubnetGroup",
        "describeClusters",
        "describeDefaultParameters",
        "describeEvents",
        "describeParameterGroups",
        "describeParameters",
        "describeSubnetGroups",
        "increaseReplicationFactor",
        "listTags",
        "rebootNode",
        "tagResource",
        "untagResource",
        "updateCluster",
        "updateParameterGroup",
        "updateSubnetGroup"
      ]
    },
    {
      "service": "deadline",
      "className": "deadline",
      "operations": [
        "createQueueFleetAssociation",
        "createQueueLimitAssociation",
        "deleteQueueFleetAssociation",
        "deleteQueueLimitAssociation",
        "getQueueFleetAssociation",
        "getQueueLimitAssociation",
        "getSessionsStatisticsAggregation",
        "listAvailableMeteredProducts",
        "listQueueFleetAssociations",
        "listQueueLimitAssociations",
        "listTagsForResource",
        "searchJobs",
        "searchSteps",
        "searchTasks",
        "searchWorkers",
        "startSessionsStatisticsAggregation",
        "tagResource",
        "untagResource",
        "updateQueueFleetAssociation",
        "updateQueueLimitAssociation",
        "associateMemberToFarm",
        "associateMemberToFleet",
        "associateMemberToJob",
        "associateMemberToQueue",
        "assumeFleetRoleForRead",
        "assumeFleetRoleForWorker",
        "assumeQueueRoleForRead",
        "assumeQueueRoleForUser",
        "assumeQueueRoleForWorker",
        "batchGetJobEntity",
        "copyJobTemplate",
        "createBudget",
        "createFarm",
        "createFleet",
        "createJob",
        "createLicenseEndpoint",
        "createLimit",
        "createMonitor",
        "createQueue",
        "createQueueEnvironment",
        "createStorageProfile",
        "createWorker",
        "deleteBudget",
        "deleteFarm",
        "deleteFleet",
        "deleteLicenseEndpoint",
        "deleteLimit",
        "deleteMeteredProduct",
        "deleteMonitor",
        "deleteQueue",
        "deleteQueueEnvironment",
        "deleteStorageProfile",
        "deleteWorker",
        "disassociateMemberFromFarm",
        "disassociateMemberFromFleet",
        "disassociateMemberFromJob",
        "disassociateMemberFromQueue",
        "getBudget",
        "getFarm",
        "getFleet",
        "getJob",
        "getLicenseEndpoint",
        "getLimit",
        "getMonitor",
        "getQueue",
        "getQueueEnvironment",
        "getSession",
        "getSessionAction",
        "getStep",
        "getStorageProfile",
        "getStorageProfileForQueue",
        "getTask",
        "getWorker",
        "listBudgets",
        "listFarmMembers",
        "listFarms",
        "listFleetMembers",
        "listFleets",
        "listJobMembers",
        "listJobParameterDefinitions",
        "listJobs",
        "listLicenseEndpoints",
        "listLimits",
        "listMeteredProducts",
        "listMonitors",
        "listQueueEnvironments",
        "listQueueMembers",
        "listQueues",
        "listSessionActions",
        "listSessions",
        "listSessionsForWorker",
        "listStepConsumers",
        "listStepDependencies",
        "listSteps",
        "listStorageProfiles",
        "listStorageProfilesForQueue",
        "listTasks",
        "listWorkers",
        "putMeteredProduct",
        "updateBudget",
        "updateFarm",
        "updateFleet",
        "updateJob",
        "updateLimit",
        "updateMonitor",
        "updateQueue",
        "updateQueueEnvironment",
        "updateSession",
        "updateStep",
        "updateStorageProfile",
        "updateTask",
        "updateWorker",
        "updateWorkerSchedule"
      ]
    },
    {
      "service": "detective",
      "className": "Detective",
      "operations": [
        "acceptInvitation",
        "batchGetGraphMemberDatasources",
        "batchGetMembershipDatasources",
        "createGraph",
        "createMembers",
        "deleteGraph",
        "deleteMembers",
        "describeOrganizationConfiguration",
        "disableOrganizationAdminAccount",
        "disassociateMembership",
        "enableOrganizationAdminAccount",
        "getInvestigation",
        "getMembers",
        "listDatasourcePackages",
        "listGraphs",
        "listIndicators",
        "listInvestigations",
        "listInvitations",
        "listMembers",
        "listOrganizationAdminAccounts",
        "listTagsForResource",
        "rejectInvitation",
        "startInvestigation",
        "startMonitoringMember",
        "tagResource",
        "untagResource",
        "updateDatasourcePackages",
        "updateInvestigationState",
        "updateOrganizationConfiguration"
      ]
    },
    {
      "service": "device-farm",
      "className": "DeviceFarm",
      "operations": [
        "createDevicePool",
        "createInstanceProfile",
        "createNetworkProfile",
        "createProject",
        "createRemoteAccessSession",
        "createTestGridProject",
        "createTestGridUrl",
        "createUpload",
        "createVPCEConfiguration",
        "deleteDevicePool",
        "deleteInstanceProfile",
        "deleteNetworkProfile",
        "deleteProject",
        "deleteRemoteAccessSession",
        "deleteRun",
        "deleteTestGridProject",
        "deleteUpload",
        "deleteVPCEConfiguration",
        "getAccountSettings",
        "getDevice",
        "getDeviceInstance",
        "getDevicePool",
        "getDevicePoolCompatibility",
        "getInstanceProfile",
        "getJob",
        "getNetworkProfile",
        "getOfferingStatus",
        "getProject",
        "getRemoteAccessSession",
        "getRun",
        "getSuite",
        "getTest",
        "getTestGridProject",
        "getTestGridSession",
        "getUpload",
        "getVPCEConfiguration",
        "installToRemoteAccessSession",
        "listArtifacts",
        "listDeviceInstances",
        "listDevicePools",
        "listDevices",
        "listInstanceProfiles",
        "listJobs",
        "listNetworkProfiles",
        "listOfferingPromotions",
        "listOfferings",
        "listOfferingTransactions",
        "listProjects",
        "listRemoteAccessSessions",
        "listRuns",
        "listSamples",
        "listSuites",
        "listTagsForResource",
        "listTestGridProjects",
        "listTestGridSessionActions",
        "listTestGridSessionArtifacts",
        "listTestGridSessions",
        "listTests",
        "listUniqueProblems",
        "listUploads",
        "listVPCEConfigurations",
        "purchaseOffering",
        "renewOffering",
        "scheduleRun",
        "stopJob",
        "stopRemoteAccessSession",
        "stopRun",
        "tagResource",
        "untagResource",
        "updateDeviceInstance",
        "updateDevicePool",
        "updateInstanceProfile",
        "updateNetworkProfile",
        "updateProject",
        "updateTestGridProject",
        "updateUpload",
        "updateVPCEConfiguration"
      ]
    },
    {
      "service": "devops-guru",
      "className": "DevOpsGuru",
      "operations": [
        "addNotificationChannel",
        "deleteInsight",
        "describeAccountHealth",
        "describeAccountOverview",
        "describeAnomaly",
        "describeEventSourcesConfig",
        "describeFeedback",
        "describeInsight",
        "describeOrganizationHealth",
        "describeOrganizationOverview",
        "describeOrganizationResourceCollectionHealth",
        "describeResourceCollectionHealth",
        "describeServiceIntegration",
        "getCostEstimation",
        "getResourceCollection",
        "listAnomaliesForInsight",
        "listAnomalousLogGroups",
        "listEvents",
        "listInsights",
        "listMonitoredResources",
        "listNotificationChannels",
        "listOrganizationInsights",
        "listRecommendations",
        "putFeedback",
        "removeNotificationChannel",
        "searchInsights",
        "searchOrganizationInsights",
        "startCostEstimation",
        "updateEventSourcesConfig",
        "updateResourceCollection",
        "updateServiceIntegration"
      ]
    },
    {
      "service": "direct-connect",
      "className": "DirectConnect",
      "operations": [
        "acceptDirectConnectGatewayAssociationProposal",
        "allocateConnectionOnInterconnect",
        "allocateHostedConnection",
        "allocatePrivateVirtualInterface",
        "allocatePublicVirtualInterface",
        "allocateTransitVirtualInterface",
        "associateConnectionWithLag",
        "associateHostedConnection",
        "associateMacSecKey",
        "associateVirtualInterface",
        "confirmConnection",
        "confirmCustomerAgreement",
        "confirmPrivateVirtualInterface",
        "confirmPublicVirtualInterface",
        "confirmTransitVirtualInterface",
        "createBGPPeer",
        "createConnection",
        "createDirectConnectGateway",
        "createDirectConnectGatewayAssociation",
        "createDirectConnectGatewayAssociationProposal",
        "createInterconnect",
        "createLag",
        "createPrivateVirtualInterface",
        "createPublicVirtualInterface",
        "createTransitVirtualInterface",
        "deleteBGPPeer",
        "deleteConnection",
        "deleteDirectConnectGateway",
        "deleteDirectConnectGatewayAssociation",
        "deleteDirectConnectGatewayAssociationProposal",
        "deleteInterconnect",
        "deleteLag",
        "deleteVirtualInterface",
        "describeConnectionLoa",
        "describeConnections",
        "describeConnectionsOnInterconnect",
        "describeCustomerMetadata",
        "describeDirectConnectGatewayAssociationProposals",
        "describeDirectConnectGatewayAssociations",
        "describeDirectConnectGatewayAttachments",
        "describeDirectConnectGateways",
        "describeHostedConnections",
        "describeInterconnectLoa",
        "describeInterconnects",
        "describeLags",
        "describeLoa",
        "describeLocations",
        "describeRouterConfiguration",
        "describeTags",
        "describeVirtualGateways",
        "describeVirtualInterfaces",
        "disassociateConnectionFromLag",
        "disassociateMacSecKey",
        "listVirtualInterfaceTestHistory",
        "startBgpFailoverTest",
        "stopBgpFailoverTest",
        "tagResource",
        "untagResource",
        "updateConnection",
        "updateDirectConnectGateway",
        "updateDirectConnectGatewayAssociation",
        "updateLag",
        "updateVirtualInterfaceAttributes"
      ]
    },
    {
      "service": "directory-service",
      "className": "DirectoryService",
      "operations": [
        "acceptSharedDirectory",
        "addIpRoutes",
        "addRegion",
        "addTagsToResource",
        "cancelSchemaExtension",
        "connectDirectory",
        "createAlias",
        "createComputer",
        "createConditionalForwarder",
        "createDirectory",
        "createHybridAD",
        "createLogSubscription",
        "createMicrosoftAD",
        "createSnapshot",
        "createTrust",
        "deleteADAssessment",
        "deleteConditionalForwarder",
        "deleteDirectory",
        "deleteLogSubscription",
        "deleteSnapshot",
        "deleteTrust",
        "deregisterCertificate",
        "deregisterEventTopic",
        "describeADAssessment",
        "describeCertificate",
        "describeClientAuthenticationSettings",
        "describeConditionalForwarders",
        "describeDirectories",
        "describeDirectoryDataAccess",
        "describeDomainControllers",
        "describeEventTopics",
        "describeHybridADUpdate",
        "describeLDAPSSettings",
        "describeRegions",
        "describeSettings",
        "describeSharedDirectories",
        "describeSnapshots",
        "describeTrusts",
        "describeUpdateDirectory",
        "disableClientAuthentication",
        "disableDirectoryDataAccess",
        "disableLDAPS",
        "disableRadius",
        "disableSso",
        "enableClientAuthentication",
        "enableDirectoryDataAccess",
        "enableLDAPS",
        "enableRadius",
        "enableSso",
        "getDirectoryLimits",
        "getSnapshotLimits",
        "listADAssessments",
        "listCertificates",
        "listIpRoutes",
        "listLogSubscriptions",
        "listSchemaExtensions",
        "listTagsForResource",
        "registerCertificate",
        "registerEventTopic",
        "rejectSharedDirectory",
        "removeIpRoutes",
        "removeRegion",
        "removeTagsFromResource",
        "resetUserPassword",
        "restoreFromSnapshot",
        "shareDirectory",
        "startADAssessment",
        "startSchemaExtension",
        "unshareDirectory",
        "updateConditionalForwarder",
        "updateDirectorySetup",
        "updateHybridAD",
        "updateNumberOfDomainControllers",
        "updateRadius",
        "updateSettings",
        "updateTrust",
        "verifyTrust"
      ]
    },
    {
      "service": "directory-service-data",
      "className": "DirectoryServiceData",
      "operations": [
        "addGroupMember",
        "createGroup",
        "createUser",
        "deleteGroup",
        "deleteUser",
        "describeGroup",
        "describeUser",
        "disableUser",
        "listGroupMembers",
        "listGroups",
        "listGroupsForMember",
        "listUsers",
        "removeGroupMember",
        "searchGroups",
        "searchUsers",
        "updateGroup",
        "updateUser"
      ]
    },
    {
      "service": "dlm",
      "className": "DLM",
      "operations": [
        "createLifecyclePolicy",
        "deleteLifecyclePolicy",
        "getLifecyclePolicies",
        "getLifecyclePolicy",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "updateLifecyclePolicy"
      ]
    },
    {
      "service": "docdb",
      "className": "DocDB",
      "operations": [
        "addSourceIdentifierToSubscription",
        "addTagsToResource",
        "applyPendingMaintenanceAction",
        "copyDBClusterParameterGroup",
        "copyDBClusterSnapshot",
        "createDBCluster",
        "createDBClusterParameterGroup",
        "createDBClusterSnapshot",
        "createDBInstance",
        "createDBSubnetGroup",
        "createEventSubscription",
        "createGlobalCluster",
        "deleteDBCluster",
        "deleteDBClusterParameterGroup",
        "deleteDBClusterSnapshot",
        "deleteDBInstance",
        "deleteDBSubnetGroup",
        "deleteEventSubscription",
        "deleteGlobalCluster",
        "describeCertificates",
        "describeDBClusterParameterGroups",
        "describeDBClusterParameters",
        "describeDBClusters",
        "describeDBClusterSnapshotAttributes",
        "describeDBClusterSnapshots",
        "describeDBEngineVersions",
        "describeDBInstances",
        "describeDBSubnetGroups",
        "describeEngineDefaultClusterParameters",
        "describeEventCategories",
        "describeEvents",
        "describeEventSubscriptions",
        "describeGlobalClusters",
        "describeOrderableDBInstanceOptions",
        "describePendingMaintenanceActions",
        "failoverDBCluster",
        "failoverGlobalCluster",
        "listTagsForResource",
        "modifyDBCluster",
        "modifyDBClusterParameterGroup",
        "modifyDBClusterSnapshotAttribute",
        "modifyDBInstance",
        "modifyDBSubnetGroup",
        "modifyEventSubscription",
        "modifyGlobalCluster",
        "rebootDBInstance",
        "removeFromGlobalCluster",
        "removeSourceIdentifierFromSubscription",
        "removeTagsFromResource",
        "resetDBClusterParameterGroup",
        "restoreDBClusterFromSnapshot",
        "restoreDBClusterToPointInTime",
        "startDBCluster",
        "stopDBCluster",
        "switchoverGlobalCluster"
      ]
    },
    {
      "service": "docdb-elastic",
      "className": "DocDBElastic",
      "operations": [
        "applyPendingMaintenanceAction",
        "copyClusterSnapshot",
        "createCluster",
        "createClusterSnapshot",
        "deleteCluster",
        "deleteClusterSnapshot",
        "getCluster",
        "getClusterSnapshot",
        "getPendingMaintenanceAction",
        "listClusters",
        "listClusterSnapshots",
        "listPendingMaintenanceActions",
        "listTagsForResource",
        "restoreClusterFromSnapshot",
        "startCluster",
        "stopCluster",
        "tagResource",
        "untagResource",
        "updateCluster"
      ]
    },
    {
      "service": "drs",
      "className": "drs",
      "operations": [
        "createExtendedSourceServer",
        "deleteLaunchAction",
        "initializeService",
        "listExtensibleSourceServers",
        "listLaunchActions",
        "listStagingAccounts",
        "listTagsForResource",
        "putLaunchAction",
        "tagResource",
        "untagResource",
        "associateSourceNetworkStack",
        "createLaunchConfigurationTemplate",
        "createReplicationConfigurationTemplate",
        "createSourceNetwork",
        "deleteJob",
        "deleteLaunchConfigurationTemplate",
        "deleteRecoveryInstance",
        "deleteReplicationConfigurationTemplate",
        "deleteSourceNetwork",
        "deleteSourceServer",
        "describeJobLogItems",
        "describeJobs",
        "describeLaunchConfigurationTemplates",
        "describeRecoveryInstances",
        "describeRecoverySnapshots",
        "describeReplicationConfigurationTemplates",
        "describeSourceNetworks",
        "describeSourceServers",
        "disconnectRecoveryInstance",
        "disconnectSourceServer",
        "exportSourceNetworkCfnTemplate",
        "getFailbackReplicationConfiguration",
        "getLaunchConfiguration",
        "getReplicationConfiguration",
        "retryDataReplication",
        "reverseReplication",
        "startFailbackLaunch",
        "startRecovery",
        "startReplication",
        "startSourceNetworkRecovery",
        "startSourceNetworkReplication",
        "stopFailback",
        "stopReplication",
        "stopSourceNetworkReplication",
        "terminateRecoveryInstances",
        "updateFailbackReplicationConfiguration",
        "updateLaunchConfiguration",
        "updateLaunchConfigurationTemplate",
        "updateReplicationConfiguration",
        "updateReplicationConfigurationTemplate"
      ]
    },
    {
      "service": "dsql",
      "className": "DSQL",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "createCluster",
        "deleteCluster",
        "getCluster",
        "getVpcEndpointServiceName",
        "listClusters",
        "updateCluster"
      ]
    },
    {
      "service": "dynamodb",
      "className": "DynamoDB",
      "operations": [
        "batchExecuteStatement",
        "batchGetItem",
        "batchWriteItem",
        "createBackup",
        "createGlobalTable",
        "createTable",
        "deleteBackup",
        "deleteItem",
        "deleteResourcePolicy",
        "deleteTable",
        "describeBackup",
        "describeContinuousBackups",
        "describeContributorInsights",
        "describeEndpoints",
        "describeExport",
        "describeGlobalTable",
        "describeGlobalTableSettings",
        "describeImport",
        "describeKinesisStreamingDestination",
        "describeLimits",
        "describeTable",
        "describeTableReplicaAutoScaling",
        "describeTimeToLive",
        "disableKinesisStreamingDestination",
        "enableKinesisStreamingDestination",
        "executeStatement",
        "executeTransaction",
        "exportTableToPointInTime",
        "getItem",
        "getResourcePolicy",
        "importTable",
        "listBackups",
        "listContributorInsights",
        "listExports",
        "listGlobalTables",
        "listImports",
        "listTables",
        "listTagsOfResource",
        "putItem",
        "putResourcePolicy",
        "query",
        "restoreTableFromBackup",
        "restoreTableToPointInTime",
        "scan",
        "tagResource",
        "transactGetItems",
        "transactWriteItems",
        "untagResource",
        "updateContinuousBackups",
        "updateContributorInsights",
        "updateGlobalTable",
        "updateGlobalTableSettings",
        "updateItem",
        "updateKinesisStreamingDestination",
        "updateTable",
        "updateTableReplicaAutoScaling",
        "updateTimeToLive"
      ]
    },
    {
      "service": "dynamodb-streams",
      "className": "DynamoDBStreams",
      "operations": [
        "describeStream",
        "getRecords",
        "getShardIterator",
        "listStreams"
      ]
    },
    {
      "service": "ebs",
      "className": "EBS",
      "operations": [
        "completeSnapshot",
        "getSnapshotBlock",
        "listChangedBlocks",
        "listSnapshotBlocks",
        "putSnapshotBlock",
        "startSnapshot"
      ]
    },
    {
      "service": "ec2",
      "className": "EC2",
      "operations": [
        "acceptAddressTransfer",
        "acceptCapacityReservationBillingOwnership",
        "acceptReservedInstancesExchangeQuote",
        "acceptTransitGatewayMulticastDomainAssociations",
        "acceptTransitGatewayPeeringAttachment",
        "acceptTransitGatewayVpcAttachment",
        "acceptVpcEndpointConnections",
        "acceptVpcPeeringConnection",
        "advertiseByoipCidr",
        "allocateAddress",
        "allocateHosts",
        "allocateIpamPoolCidr",
        "applySecurityGroupsToClientVpnTargetNetwork",
        "assignIpv6Addresses",
        "assignPrivateIpAddresses",
        "assignPrivateNatGatewayAddress",
        "associateAddress",
        "associateCapacityReservationBillingOwner",
        "associateClientVpnTargetNetwork",
        "associateDhcpOptions",
        "associateEnclaveCertificateIamRole",
        "associateIamInstanceProfile",
        "associateInstanceEventWindow",
        "associateIpamByoasn",
        "associateIpamResourceDiscovery",
        "associateNatGatewayAddress",
        "associateRouteServer",
        "associateRouteTable",
        "associateSecurityGroupVpc",
        "associateSubnetCidrBlock",
        "associateTransitGatewayMulticastDomain",
        "associateTransitGatewayPolicyTable",
        "associateTransitGatewayRouteTable",
        "associateTrunkInterface",
        "associateVpcCidrBlock",
        "attachClassicLinkVpc",
        "attachInternetGateway",
        "attachNetworkInterface",
        "attachVerifiedAccessTrustProvider",
        "attachVolume",
        "attachVpnGateway",
        "authorizeClientVpnIngress",
        "authorizeSecurityGroupEgress",
        "authorizeSecurityGroupIngress",
        "bundleInstance",
        "cancelBundleTask",
        "cancelCapacityReservation",
        "cancelCapacityReservationFleets",
        "cancelConversionTask",
        "cancelDeclarativePoliciesReport",
        "cancelExportTask",
        "cancelImageLaunchPermission",
        "cancelImportTask",
        "cancelReservedInstancesListing",
        "cancelSpotFleetRequests",
        "cancelSpotInstanceRequests",
        "confirmProductInstance",
        "copyFpgaImage",
        "copyImage",
        "copySnapshot",
        "createCapacityReservation",
        "createCapacityReservationBySplitting",
        "createCapacityReservationFleet",
        "createCarrierGateway",
        "createClientVpnEndpoint",
        "createClientVpnRoute",
        "createCoipCidr",
        "createCoipPool",
        "createCustomerGateway",
        "createDefaultSubnet",
        "createDefaultVpc",
        "createDelegateMacVolumeOwnershipTask",
        "createDhcpOptions",
        "createEgressOnlyInternetGateway",
        "createFleet",
        "createFlowLogs",
        "createFpgaImage",
        "createImage",
        "createInstanceConnectEndpoint",
        "createInstanceEventWindow",
        "createInstanceExportTask",
        "createInternetGateway",
        "createIpam",
        "createIpamExternalResourceVerificationToken",
        "createIpamPool",
        "createIpamResourceDiscovery",
        "createIpamScope",
        "createKeyPair",
        "createLaunchTemplate",
        "createLaunchTemplateVersion",
        "createLocalGatewayRoute",
        "createLocalGatewayRouteTable",
        "createLocalGatewayRouteTableVirtualInterfaceGroupAssociation",
        "createLocalGatewayRouteTableVpcAssociation",
        "createLocalGatewayVirtualInterface",
        "createLocalGatewayVirtualInterfaceGroup",
        "createMacSystemIntegrityProtectionModificationTask",
        "createManagedPrefixList",
        "createNatGateway",
        "createNetworkAcl",
        "createNetworkAclEntry",
        "createNetworkInsightsAccessScope",
        "createNetworkInsightsPath",
        "createNetworkInterface",
        "createNetworkInterfacePermission",
        "createPlacementGroup",
        "createPublicIpv4Pool",
        "createReplaceRootVolumeTask",
        "createReservedInstancesListing",
        "createRestoreImageTask",
        "createRoute",
        "createRouteServer",
        "createRouteServerEndpoint",
        "createRouteServerPeer",
        "createRouteTable",
        "createSecurityGroup",
        "createSnapshot",
        "createSnapshots",
        "createSpotDatafeedSubscription",
        "createStoreImageTask",
        "createSubnet",
        "createSubnetCidrReservation",
        "createTags",
        "createTrafficMirrorFilter",
        "createTrafficMirrorFilterRule",
        "createTrafficMirrorSession",
        "createTrafficMirrorTarget",
        "createTransitGateway",
        "createTransitGatewayConnect",
        "createTransitGatewayConnectPeer",
        "createTransitGatewayMulticastDomain",
        "createTransitGatewayPeeringAttachment",
        "createTransitGatewayPolicyTable",
        "createTransitGatewayPrefixListReference",
        "createTransitGatewayRoute",
        "createTransitGatewayRouteTable",
        "createTransitGatewayRouteTableAnnouncement",
        "createTransitGatewayVpcAttachment",
        "createVerifiedAccessEndpoint",
        "createVerifiedAccessGroup",
        "createVerifiedAccessInstance",
        "createVerifiedAccessTrustProvider",
        "createVolume",
        "createVpc",
        "createVpcBlockPublicAccessExclusion",
        "createVpcEndpoint",
        "createVpcEndpointConnectionNotification",
        "createVpcEndpointServiceConfiguration",
        "createVpcPeeringConnection",
        "createVpnConnection",
        "createVpnConnectionRoute",
        "createVpnGateway",
        "deleteCarrierGateway",
        "deleteClientVpnEndpoint",
        "deleteClientVpnRoute",
        "deleteCoipCidr",
        "deleteCoipPool",
        "deleteCustomerGateway",
        "deleteDhcpOptions",
        "deleteEgressOnlyInternetGateway",
        "deleteFleets",
        "deleteFlowLogs",
        "deleteFpgaImage",
        "deleteInstanceConnectEndpoint",
        "deleteInstanceEventWindow",
        "deleteInternetGateway",
        "deleteIpam",
        "deleteIpamExternalResourceVerificationToken",
        "deleteIpamPool",
        "deleteIpamResourceDiscovery",
        "deleteIpamScope",
        "deleteKeyPair",
        "deleteLaunchTemplate",
        "deleteLaunchTemplateVersions",
        "deleteLocalGatewayRoute",
        "deleteLocalGatewayRouteTable",
        "deleteLocalGatewayRouteTableVirtualInterfaceGroupAssociation",
        "deleteLocalGatewayRouteTableVpcAssociation",
        "deleteLocalGatewayVirtualInterface",
        "deleteLocalGatewayVirtualInterfaceGroup",
        "deleteManagedPrefixList",
        "deleteNatGateway",
        "deleteNetworkAcl",
        "deleteNetworkAclEntry",
        "deleteNetworkInsightsAccessScope",
        "deleteNetworkInsightsAccessScopeAnalysis",
        "deleteNetworkInsightsAnalysis",
        "deleteNetworkInsightsPath",
        "deleteNetworkInterface",
        "deleteNetworkInterfacePermission",
        "deletePlacementGroup",
        "deletePublicIpv4Pool",
        "deleteQueuedReservedInstances",
        "deleteRoute",
        "deleteRouteServer",
        "deleteRouteServerEndpoint",
        "deleteRouteServerPeer",
        "deleteRouteTable",
        "deleteSecurityGroup",
        "deleteSnapshot",
        "deleteSpotDatafeedSubscription",
        "deleteSubnet",
        "deleteSubnetCidrReservation",
        "deleteTags",
        "deleteTrafficMirrorFilter",
        "deleteTrafficMirrorFilterRule",
        "deleteTrafficMirrorSession",
        "deleteTrafficMirrorTarget",
        "deleteTransitGateway",
        "deleteTransitGatewayConnect",
        "deleteTransitGatewayConnectPeer",
        "deleteTransitGatewayMulticastDomain",
        "deleteTransitGatewayPeeringAttachment",
        "deleteTransitGatewayPolicyTable",
        "deleteTransitGatewayPrefixListReference",
        "deleteTransitGatewayRoute",
        "deleteTransitGatewayRouteTable",
        "deleteTransitGatewayRouteTableAnnouncement",
        "deleteTransitGatewayVpcAttachment",
        "deleteVerifiedAccessEndpoint",
        "deleteVerifiedAccessGroup",
        "deleteVerifiedAccessInstance",
        "deleteVerifiedAccessTrustProvider",
        "deleteVolume",
        "deleteVpc",
        "deleteVpcBlockPublicAccessExclusion",
        "deleteVpcEndpointConnectionNotifications",
        "deleteVpcEndpoints",
        "deleteVpcEndpointServiceConfigurations",
        "deleteVpcPeeringConnection",
        "deleteVpnConnection",
        "deleteVpnConnectionRoute",
        "deleteVpnGateway",
        "deprovisionByoipCidr",
        "deprovisionIpamByoasn",
        "deprovisionIpamPoolCidr",
        "deprovisionPublicIpv4PoolCidr",
        "deregisterImage",
        "deregisterInstanceEventNotificationAttributes",
        "deregisterTransitGatewayMulticastGroupMembers",
        "deregisterTransitGatewayMulticastGroupSources",
        "describeAccountAttributes",
        "describeAddresses",
        "describeAddressesAttribute",
        "describeAddressTransfers",
        "describeAggregateIdFormat",
        "describeAvailabilityZones",
        "describeAwsNetworkPerformanceMetricSubscriptions",
        "describeBundleTasks",
        "describeByoipCidrs",
        "describeCapacityBlockExtensionHistory",
        "describeCapacityBlockExtensionOfferings",
        "describeCapacityBlockOfferings",
        "describeCapacityBlocks",
        "describeCapacityBlockStatus",
        "describeCapacityReservationBillingRequests",
        "describeCapacityReservationFleets",
        "describeCapacityReservations",
        "describeCarrierGateways",
        "describeClassicLinkInstances",
        "describeClientVpnAuthorizationRules",
        "describeClientVpnConnections",
        "describeClientVpnEndpoints",
        "describeClientVpnRoutes",
        "describeClientVpnTargetNetworks",
        "describeCoipPools",
        "describeConversionTasks",
        "describeCustomerGateways",
        "describeDeclarativePoliciesReports",
        "describeDhcpOptions",
        "describeEgressOnlyInternetGateways",
        "describeElasticGpus",
        "describeExportImageTasks",
        "describeExportTasks",
        "describeFastLaunchImages",
        "describeFastSnapshotRestores",
        "describeFleetHistory",
        "describeFleetInstances",
        "describeFleets",
        "describeFlowLogs",
        "describeFpgaImageAttribute",
        "describeFpgaImages",
        "describeHostReservationOfferings",
        "describeHostReservations",
        "describeHosts",
        "describeIamInstanceProfileAssociations",
        "describeIdentityIdFormat",
        "describeIdFormat",
        "describeImageAttribute",
        "describeImages",
        "describeImportImageTasks",
        "describeImportSnapshotTasks",
        "describeInstanceAttribute",
        "describeInstanceConnectEndpoints",
        "describeInstanceCreditSpecifications",
        "describeInstanceEventNotificationAttributes",
        "describeInstanceEventWindows",
        "describeInstanceImageMetadata",
        "describeInstances",
        "describeInstanceStatus",
        "describeInstanceTopology",
        "describeInstanceTypeOfferings",
        "describeInstanceTypes",
        "describeInternetGateways",
        "describeIpamByoasn",
        "describeIpamExternalResourceVerificationTokens",
        "describeIpamPools",
        "describeIpamResourceDiscoveries",
        "describeIpamResourceDiscoveryAssociations",
        "describeIpams",
        "describeIpamScopes",
        "describeIpv6Pools",
        "describeKeyPairs",
        "describeLaunchTemplates",
        "describeLaunchTemplateVersions",
        "describeLocalGatewayRouteTables",
        "describeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
        "describeLocalGatewayRouteTableVpcAssociations",
        "describeLocalGateways",
        "describeLocalGatewayVirtualInterfaceGroups",
        "describeLocalGatewayVirtualInterfaces",
        "describeLockedSnapshots",
        "describeMacHosts",
        "describeMacModificationTasks",
        "describeManagedPrefixLists",
        "describeMovingAddresses",
        "describeNatGateways",
        "describeNetworkAcls",
        "describeNetworkInsightsAccessScopeAnalyses",
        "describeNetworkInsightsAccessScopes",
        "describeNetworkInsightsAnalyses",
        "describeNetworkInsightsPaths",
        "describeNetworkInterfaceAttribute",
        "describeNetworkInterfacePermissions",
        "describeNetworkInterfaces",
        "describeOutpostLags",
        "describePlacementGroups",
        "describePrefixLists",
        "describePrincipalIdFormat",
        "describePublicIpv4Pools",
        "describeRegions",
        "describeReplaceRootVolumeTasks",
        "describeReservedInstances",
        "describeReservedInstancesListings",
        "describeReservedInstancesModifications",
        "describeReservedInstancesOfferings",
        "describeRouteServerEndpoints",
        "describeRouteServerPeers",
        "describeRouteServers",
        "describeRouteTables",
        "describeScheduledInstanceAvailability",
        "describeScheduledInstances",
        "describeSecurityGroupReferences",
        "describeSecurityGroupRules",
        "describeSecurityGroups",
        "describeSecurityGroupVpcAssociations",
        "describeServiceLinkVirtualInterfaces",
        "describeSnapshotAttribute",
        "describeSnapshots",
        "describeSnapshotTierStatus",
        "describeSpotDatafeedSubscription",
        "describeSpotFleetInstances",
        "describeSpotFleetRequestHistory",
        "describeSpotFleetRequests",
        "describeSpotInstanceRequests",
        "describeSpotPriceHistory",
        "describeStaleSecurityGroups",
        "describeStoreImageTasks",
        "describeSubnets",
        "describeTags",
        "describeTrafficMirrorFilterRules",
        "describeTrafficMirrorFilters",
        "describeTrafficMirrorSessions",
        "describeTrafficMirrorTargets",
        "describeTransitGatewayAttachments",
        "describeTransitGatewayConnectPeers",
        "describeTransitGatewayConnects",
        "describeTransitGatewayMulticastDomains",
        "describeTransitGatewayPeeringAttachments",
        "describeTransitGatewayPolicyTables",
        "describeTransitGatewayRouteTableAnnouncements",
        "describeTransitGatewayRouteTables",
        "describeTransitGateways",
        "describeTransitGatewayVpcAttachments",
        "describeTrunkInterfaceAssociations",
        "describeVerifiedAccessEndpoints",
        "describeVerifiedAccessGroups",
        "describeVerifiedAccessInstanceLoggingConfigurations",
        "describeVerifiedAccessInstances",
        "describeVerifiedAccessTrustProviders",
        "describeVolumeAttribute",
        "describeVolumes",
        "describeVolumesModifications",
        "describeVolumeStatus",
        "describeVpcAttribute",
        "describeVpcBlockPublicAccessExclusions",
        "describeVpcBlockPublicAccessOptions",
        "describeVpcClassicLink",
        "describeVpcClassicLinkDnsSupport",
        "describeVpcEndpointAssociations",
        "describeVpcEndpointConnectionNotifications",
        "describeVpcEndpointConnections",
        "describeVpcEndpoints",
        "describeVpcEndpointServiceConfigurations",
        "describeVpcEndpointServicePermissions",
        "describeVpcEndpointServices",
        "describeVpcPeeringConnections",
        "describeVpcs",
        "describeVpnConnections",
        "describeVpnGateways",
        "detachClassicLinkVpc",
        "detachInternetGateway",
        "detachNetworkInterface",
        "detachVerifiedAccessTrustProvider",
        "detachVolume",
        "detachVpnGateway",
        "disableAddressTransfer",
        "disableAllowedImagesSettings",
        "disableAwsNetworkPerformanceMetricSubscription",
        "disableEbsEncryptionByDefault",
        "disableFastLaunch",
        "disableFastSnapshotRestores",
        "disableImage",
        "disableImageBlockPublicAccess",
        "disableImageDeprecation",
        "disableImageDeregistrationProtection",
        "disableIpamOrganizationAdminAccount",
        "disableRouteServerPropagation",
        "disableSerialConsoleAccess",
        "disableSnapshotBlockPublicAccess",
        "disableTransitGatewayRouteTablePropagation",
        "disableVgwRoutePropagation",
        "disableVpcClassicLink",
        "disableVpcClassicLinkDnsSupport",
        "disassociateAddress",
        "disassociateCapacityReservationBillingOwner",
        "disassociateClientVpnTargetNetwork",
        "disassociateEnclaveCertificateIamRole",
        "disassociateIamInstanceProfile",
        "disassociateInstanceEventWindow",
        "disassociateIpamByoasn",
        "disassociateIpamResourceDiscovery",
        "disassociateNatGatewayAddress",
        "disassociateRouteServer",
        "disassociateRouteTable",
        "disassociateSecurityGroupVpc",
        "disassociateSubnetCidrBlock",
        "disassociateTransitGatewayMulticastDomain",
        "disassociateTransitGatewayPolicyTable",
        "disassociateTransitGatewayRouteTable",
        "disassociateTrunkInterface",
        "disassociateVpcCidrBlock",
        "enableAddressTransfer",
        "enableAllowedImagesSettings",
        "enableAwsNetworkPerformanceMetricSubscription",
        "enableEbsEncryptionByDefault",
        "enableFastLaunch",
        "enableFastSnapshotRestores",
        "enableImage",
        "enableImageBlockPublicAccess",
        "enableImageDeprecation",
        "enableImageDeregistrationProtection",
        "enableIpamOrganizationAdminAccount",
        "enableReachabilityAnalyzerOrganizationSharing",
        "enableRouteServerPropagation",
        "enableSerialConsoleAccess",
        "enableSnapshotBlockPublicAccess",
        "enableTransitGatewayRouteTablePropagation",
        "enableVgwRoutePropagation",
        "enableVolumeIO",
        "enableVpcClassicLink",
        "enableVpcClassicLinkDnsSupport",
        "exportClientVpnClientCertificateRevocationList",
        "exportClientVpnClientConfiguration",
        "exportImage",
        "exportTransitGatewayRoutes",
        "exportVerifiedAccessInstanceClientConfiguration",
        "getActiveVpnTunnelStatus",
        "getAllowedImagesSettings",
        "getAssociatedEnclaveCertificateIamRoles",
        "getAssociatedIpv6PoolCidrs",
        "getAwsNetworkPerformanceData",
        "getCapacityReservationUsage",
        "getCoipPoolUsage",
        "getConsoleOutput",
        "getConsoleScreenshot",
        "getDeclarativePoliciesReportSummary",
        "getDefaultCreditSpecification",
        "getEbsDefaultKmsKeyId",
        "getEbsEncryptionByDefault",
        "getFlowLogsIntegrationTemplate",
        "getGroupsForCapacityReservation",
        "getHostReservationPurchasePreview",
        "getImageBlockPublicAccessState",
        "getInstanceMetadataDefaults",
        "getInstanceTpmEkPub",
        "getInstanceTypesFromInstanceRequirements",
        "getInstanceUefiData",
        "getIpamAddressHistory",
        "getIpamDiscoveredAccounts",
        "getIpamDiscoveredPublicAddresses",
        "getIpamDiscoveredResourceCidrs",
        "getIpamPoolAllocations",
        "getIpamPoolCidrs",
        "getIpamResourceCidrs",
        "getLaunchTemplateData",
        "getManagedPrefixListAssociations",
        "getManagedPrefixListEntries",
        "getNetworkInsightsAccessScopeAnalysisFindings",
        "getNetworkInsightsAccessScopeContent",
        "getPasswordData",
        "getReservedInstancesExchangeQuote",
        "getRouteServerAssociations",
        "getRouteServerPropagations",
        "getRouteServerRoutingDatabase",
        "getSecurityGroupsForVpc",
        "getSerialConsoleAccessStatus",
        "getSnapshotBlockPublicAccessState",
        "getSpotPlacementScores",
        "getSubnetCidrReservations",
        "getTransitGatewayAttachmentPropagations",
        "getTransitGatewayMulticastDomainAssociations",
        "getTransitGatewayPolicyTableAssociations",
        "getTransitGatewayPolicyTableEntries",
        "getTransitGatewayPrefixListReferences",
        "getTransitGatewayRouteTableAssociations",
        "getTransitGatewayRouteTablePropagations",
        "getVerifiedAccessEndpointPolicy",
        "getVerifiedAccessEndpointTargets",
        "getVerifiedAccessGroupPolicy",
        "getVpnConnectionDeviceSampleConfiguration",
        "getVpnConnectionDeviceTypes",
        "getVpnTunnelReplacementStatus",
        "importClientVpnClientCertificateRevocationList",
        "importImage",
        "importInstance",
        "importKeyPair",
        "importSnapshot",
        "importVolume",
        "listImagesInRecycleBin",
        "listSnapshotsInRecycleBin",
        "lockSnapshot",
        "modifyAddressAttribute",
        "modifyAvailabilityZoneGroup",
        "modifyCapacityReservation",
        "modifyCapacityReservationFleet",
        "modifyClientVpnEndpoint",
        "modifyDefaultCreditSpecification",
        "modifyEbsDefaultKmsKeyId",
        "modifyFleet",
        "modifyFpgaImageAttribute",
        "modifyHosts",
        "modifyIdentityIdFormat",
        "modifyIdFormat",
        "modifyImageAttribute",
        "modifyInstanceAttribute",
        "modifyInstanceCapacityReservationAttributes",
        "modifyInstanceCpuOptions",
        "modifyInstanceCreditSpecification",
        "modifyInstanceEventStartTime",
        "modifyInstanceEventWindow",
        "modifyInstanceMaintenanceOptions",
        "modifyInstanceMetadataDefaults",
        "modifyInstanceMetadataOptions",
        "modifyInstanceNetworkPerformanceOptions",
        "modifyInstancePlacement",
        "modifyIpam",
        "modifyIpamPool",
        "modifyIpamResourceCidr",
        "modifyIpamResourceDiscovery",
        "modifyIpamScope",
        "modifyLaunchTemplate",
        "modifyLocalGatewayRoute",
        "modifyManagedPrefixList",
        "modifyNetworkInterfaceAttribute",
        "modifyPrivateDnsNameOptions",
        "modifyPublicIpDnsNameOptions",
        "modifyReservedInstances",
        "modifyRouteServer",
        "modifySecurityGroupRules",
        "modifySnapshotAttribute",
        "modifySnapshotTier",
        "modifySpotFleetRequest",
        "modifySubnetAttribute",
        "modifyTrafficMirrorFilterNetworkServices",
        "modifyTrafficMirrorFilterRule",
        "modifyTrafficMirrorSession",
        "modifyTransitGateway",
        "modifyTransitGatewayPrefixListReference",
        "modifyTransitGatewayVpcAttachment",
        "modifyVerifiedAccessEndpoint",
        "modifyVerifiedAccessEndpointPolicy",
        "modifyVerifiedAccessGroup",
        "modifyVerifiedAccessGroupPolicy",
        "modifyVerifiedAccessInstance",
        "modifyVerifiedAccessInstanceLoggingConfiguration",
        "modifyVerifiedAccessTrustProvider",
        "modifyVolume",
        "modifyVolumeAttribute",
        "modifyVpcAttribute",
        "modifyVpcBlockPublicAccessExclusion",
        "modifyVpcBlockPublicAccessOptions",
        "modifyVpcEndpoint",
        "modifyVpcEndpointConnectionNotification",
        "modifyVpcEndpointServiceConfiguration",
        "modifyVpcEndpointServicePayerResponsibility",
        "modifyVpcEndpointServicePermissions",
        "modifyVpcPeeringConnectionOptions",
        "modifyVpcTenancy",
        "modifyVpnConnection",
        "modifyVpnConnectionOptions",
        "modifyVpnTunnelCertificate",
        "modifyVpnTunnelOptions",
        "monitorInstances",
        "moveAddressToVpc",
        "moveByoipCidrToIpam",
        "moveCapacityReservationInstances",
        "provisionByoipCidr",
        "provisionIpamByoasn",
        "provisionIpamPoolCidr",
        "provisionPublicIpv4PoolCidr",
        "purchaseCapacityBlock",
        "purchaseCapacityBlockExtension",
        "purchaseHostReservation",
        "purchaseReservedInstancesOffering",
        "purchaseScheduledInstances",
        "rebootInstances",
        "registerImage",
        "registerInstanceEventNotificationAttributes",
        "registerTransitGatewayMulticastGroupMembers",
        "registerTransitGatewayMulticastGroupSources",
        "rejectCapacityReservationBillingOwnership",
        "rejectTransitGatewayMulticastDomainAssociations",
        "rejectTransitGatewayPeeringAttachment",
        "rejectTransitGatewayVpcAttachment",
        "rejectVpcEndpointConnections",
        "rejectVpcPeeringConnection",
        "releaseAddress",
        "releaseHosts",
        "releaseIpamPoolAllocation",
        "replaceIamInstanceProfileAssociation",
        "replaceImageCriteriaInAllowedImagesSettings",
        "replaceNetworkAclAssociation",
        "replaceNetworkAclEntry",
        "replaceRoute",
        "replaceRouteTableAssociation",
        "replaceTransitGatewayRoute",
        "replaceVpnTunnel",
        "reportInstanceStatus",
        "requestSpotFleet",
        "requestSpotInstances",
        "resetAddressAttribute",
        "resetEbsDefaultKmsKeyId",
        "resetFpgaImageAttribute",
        "resetImageAttribute",
        "resetInstanceAttribute",
        "resetNetworkInterfaceAttribute",
        "resetSnapshotAttribute",
        "restoreAddressToClassic",
        "restoreImageFromRecycleBin",
        "restoreManagedPrefixListVersion",
        "restoreSnapshotFromRecycleBin",
        "restoreSnapshotTier",
        "revokeClientVpnIngress",
        "revokeSecurityGroupEgress",
        "revokeSecurityGroupIngress",
        "runInstances",
        "runScheduledInstances",
        "searchLocalGatewayRoutes",
        "searchTransitGatewayMulticastGroups",
        "searchTransitGatewayRoutes",
        "sendDiagnosticInterrupt",
        "startDeclarativePoliciesReport",
        "startInstances",
        "startNetworkInsightsAccessScopeAnalysis",
        "startNetworkInsightsAnalysis",
        "startVpcEndpointServicePrivateDnsVerification",
        "stopInstances",
        "terminateClientVpnConnections",
        "terminateInstances",
        "unassignIpv6Addresses",
        "unassignPrivateIpAddresses",
        "unassignPrivateNatGatewayAddress",
        "unlockSnapshot",
        "unmonitorInstances",
        "updateSecurityGroupRuleDescriptionsEgress",
        "updateSecurityGroupRuleDescriptionsIngress",
        "withdrawByoipCidr"
      ]
    },
    {
      "service": "ec2-instance-connect",
      "className": "EC2InstanceConnect",
      "operations": [
        "sendSerialConsoleSSHPublicKey",
        "sendSSHPublicKey"
      ]
    },
    {
      "service": "ecr",
      "className": "ECR",
      "operations": [
        "batchCheckLayerAvailability",
        "batchDeleteImage",
        "batchGetImage",
        "batchGetRepositoryScanningConfiguration",
        "completeLayerUpload",
        "createPullThroughCacheRule",
        "createRepository",
        "createRepositoryCreationTemplate",
        "deleteLifecyclePolicy",
        "deletePullThroughCacheRule",
        "deleteRegistryPolicy",
        "deleteRepository",
        "deleteRepositoryCreationTemplate",
        "deleteRepositoryPolicy",
        "describeImageReplicationStatus",
        "describeImages",
        "describeImageScanFindings",
        "describePullThroughCacheRules",
        "describeRegistry",
        "describeRepositories",
        "describeRepositoryCreationTemplates",
        "getAccountSetting",
        "getAuthorizationToken",
        "getDownloadUrlForLayer",
        "getLifecyclePolicy",
        "getLifecyclePolicyPreview",
        "getRegistryPolicy",
        "getRegistryScanningConfiguration",
        "getRepositoryPolicy",
        "initiateLayerUpload",
        "listImages",
        "listTagsForResource",
        "putAccountSetting",
        "putImage",
        "putImageScanningConfiguration",
        "putImageTagMutability",
        "putLifecyclePolicy",
        "putRegistryPolicy",
        "putRegistryScanningConfiguration",
        "putReplicationConfiguration",
        "setRepositoryPolicy",
        "startImageScan",
        "startLifecyclePolicyPreview",
        "tagResource",
        "untagResource",
        "updatePullThroughCacheRule",
        "updateRepositoryCreationTemplate",
        "uploadLayerPart",
        "validatePullThroughCacheRule"
      ]
    },
    {
      "service": "ecr-public",
      "className": "ECRPUBLIC",
      "operations": [
        "batchCheckLayerAvailability",
        "batchDeleteImage",
        "completeLayerUpload",
        "createRepository",
        "deleteRepository",
        "deleteRepositoryPolicy",
        "describeImages",
        "describeImageTags",
        "describeRegistries",
        "describeRepositories",
        "getAuthorizationToken",
        "getRegistryCatalogData",
        "getRepositoryCatalogData",
        "getRepositoryPolicy",
        "initiateLayerUpload",
        "listTagsForResource",
        "putImage",
        "putRegistryCatalogData",
        "putRepositoryCatalogData",
        "setRepositoryPolicy",
        "tagResource",
        "untagResource",
        "uploadLayerPart"
      ]
    },
    {
      "service": "ecs",
      "className": "ECS",
      "operations": [
        "createCapacityProvider",
        "createCluster",
        "createService",
        "createTaskSet",
        "deleteAccountSetting",
        "deleteAttributes",
        "deleteCapacityProvider",
        "deleteCluster",
        "deleteService",
        "deleteTaskDefinitions",
        "deleteTaskSet",
        "deregisterContainerInstance",
        "deregisterTaskDefinition",
        "describeCapacityProviders",
        "describeClusters",
        "describeContainerInstances",
        "describeServiceDeployments",
        "describeServiceRevisions",
        "describeServices",
        "describeTaskDefinition",
        "describeTasks",
        "describeTaskSets",
        "discoverPollEndpoint",
        "executeCommand",
        "getTaskProtection",
        "listAccountSettings",
        "listAttributes",
        "listClusters",
        "listContainerInstances",
        "listServiceDeployments",
        "listServices",
        "listServicesByNamespace",
        "listTagsForResource",
        "listTaskDefinitionFamilies",
        "listTaskDefinitions",
        "listTasks",
        "putAccountSetting",
        "putAccountSettingDefault",
        "putAttributes",
        "putClusterCapacityProviders",
        "registerContainerInstance",
        "registerTaskDefinition",
        "runTask",
        "startTask",
        "stopServiceDeployment",
        "stopTask",
        "submitAttachmentStateChanges",
        "submitContainerStateChange",
        "submitTaskStateChange",
        "tagResource",
        "untagResource",
        "updateCapacityProvider",
        "updateCluster",
        "updateClusterSettings",
        "updateContainerAgent",
        "updateContainerInstancesState",
        "updateService",
        "updateServicePrimaryTaskSet",
        "updateTaskProtection",
        "updateTaskSet"
      ]
    },
    {
      "service": "efs",
      "className": "EFS",
      "operations": [
        "createAccessPoint",
        "createFileSystem",
        "createMountTarget",
        "createReplicationConfiguration",
        "createTags",
        "deleteAccessPoint",
        "deleteFileSystem",
        "deleteFileSystemPolicy",
        "deleteMountTarget",
        "deleteReplicationConfiguration",
        "deleteTags",
        "describeAccessPoints",
        "describeAccountPreferences",
        "describeBackupPolicy",
        "describeFileSystemPolicy",
        "describeFileSystems",
        "describeLifecycleConfiguration",
        "describeMountTargets",
        "describeMountTargetSecurityGroups",
        "describeReplicationConfigurations",
        "describeTags",
        "listTagsForResource",
        "modifyMountTargetSecurityGroups",
        "putAccountPreferences",
        "putBackupPolicy",
        "putFileSystemPolicy",
        "putLifecycleConfiguration",
        "tagResource",
        "untagResource",
        "updateFileSystem",
        "updateFileSystemProtection"
      ]
    },
    {
      "service": "eks",
      "className": "EKS",
      "operations": [
        "associateAccessPolicy",
        "associateEncryptionConfig",
        "associateIdentityProviderConfig",
        "createAccessEntry",
        "createAddon",
        "createCluster",
        "createEksAnywhereSubscription",
        "createFargateProfile",
        "createNodegroup",
        "createPodIdentityAssociation",
        "deleteAccessEntry",
        "deleteAddon",
        "deleteCluster",
        "deleteEksAnywhereSubscription",
        "deleteFargateProfile",
        "deleteNodegroup",
        "deletePodIdentityAssociation",
        "deregisterCluster",
        "describeAccessEntry",
        "describeAddon",
        "describeAddonConfiguration",
        "describeAddonVersions",
        "describeCluster",
        "describeClusterVersions",
        "describeEksAnywhereSubscription",
        "describeFargateProfile",
        "describeIdentityProviderConfig",
        "describeInsight",
        "describeNodegroup",
        "describePodIdentityAssociation",
        "describeUpdate",
        "disassociateAccessPolicy",
        "disassociateIdentityProviderConfig",
        "listAccessEntries",
        "listAccessPolicies",
        "listAddons",
        "listAssociatedAccessPolicies",
        "listClusters",
        "listEksAnywhereSubscriptions",
        "listFargateProfiles",
        "listIdentityProviderConfigs",
        "listInsights",
        "listNodegroups",
        "listPodIdentityAssociations",
        "listTagsForResource",
        "listUpdates",
        "registerCluster",
        "tagResource",
        "untagResource",
        "updateAccessEntry",
        "updateAddon",
        "updateClusterConfig",
        "updateClusterVersion",
        "updateEksAnywhereSubscription",
        "updateNodegroupConfig",
        "updateNodegroupVersion",
        "updatePodIdentityAssociation"
      ]
    },
    {
      "service": "eks-auth",
      "className": "EKSAuth",
      "operations": [
        "assumeRoleForPodIdentity"
      ]
    },
    {
      "service": "elastic-beanstalk",
      "className": "ElasticBeanstalk",
      "operations": [
        "abortEnvironmentUpdate",
        "applyEnvironmentManagedAction",
        "associateEnvironmentOperationsRole",
        "checkDNSAvailability",
        "composeEnvironments",
        "createApplication",
        "createApplicationVersion",
        "createConfigurationTemplate",
        "createEnvironment",
        "createPlatformVersion",
        "createStorageLocation",
        "deleteApplication",
        "deleteApplicationVersion",
        "deleteConfigurationTemplate",
        "deleteEnvironmentConfiguration",
        "deletePlatformVersion",
        "describeAccountAttributes",
        "describeApplications",
        "describeApplicationVersions",
        "describeConfigurationOptions",
        "describeConfigurationSettings",
        "describeEnvironmentHealth",
        "describeEnvironmentManagedActionHistory",
        "describeEnvironmentManagedActions",
        "describeEnvironmentResources",
        "describeEnvironments",
        "describeEvents",
        "describeInstancesHealth",
        "describePlatformVersion",
        "disassociateEnvironmentOperationsRole",
        "listAvailableSolutionStacks",
        "listPlatformBranches",
        "listPlatformVersions",
        "listTagsForResource",
        "rebuildEnvironment",
        "requestEnvironmentInfo",
        "restartAppServer",
        "retrieveEnvironmentInfo",
        "swapEnvironmentCNAMEs",
        "terminateEnvironment",
        "updateApplication",
        "updateApplicationResourceLifecycle",
        "updateApplicationVersion",
        "updateConfigurationTemplate",
        "updateEnvironment",
        "updateTagsForResource",
        "validateConfigurationSettings"
      ]
    },
    {
      "service": "elastic-load-balancing",
      "className": "ElasticLoadBalancing",
      "operations": [
        "addTags",
        "applySecurityGroupsToLoadBalancer",
        "attachLoadBalancerToSubnets",
        "configureHealthCheck",
        "createAppCookieStickinessPolicy",
        "createLBCookieStickinessPolicy",
        "createLoadBalancer",
        "createLoadBalancerListeners",
        "createLoadBalancerPolicy",
        "deleteLoadBalancer",
        "deleteLoadBalancerListeners",
        "deleteLoadBalancerPolicy",
        "deregisterInstancesFromLoadBalancer",
        "describeAccountLimits",
        "describeInstanceHealth",
        "describeLoadBalancerAttributes",
        "describeLoadBalancerPolicies",
        "describeLoadBalancerPolicyTypes",
        "describeLoadBalancers",
        "describeTags",
        "detachLoadBalancerFromSubnets",
        "disableAvailabilityZonesForLoadBalancer",
        "enableAvailabilityZonesForLoadBalancer",
        "modifyLoadBalancerAttributes",
        "registerInstancesWithLoadBalancer",
        "removeTags",
        "setLoadBalancerListenerSSLCertificate",
        "setLoadBalancerPoliciesForBackendServer",
        "setLoadBalancerPoliciesOfListener"
      ]
    },
    {
      "service": "elastic-load-balancing-v2",
      "className": "ElasticLoadBalancingv2",
      "operations": [
        "addListenerCertificates",
        "addTags",
        "addTrustStoreRevocations",
        "createListener",
        "createLoadBalancer",
        "createRule",
        "createTargetGroup",
        "createTrustStore",
        "deleteListener",
        "deleteLoadBalancer",
        "deleteRule",
        "deleteSharedTrustStoreAssociation",
        "deleteTargetGroup",
        "deleteTrustStore",
        "deregisterTargets",
        "describeAccountLimits",
        "describeCapacityReservation",
        "describeListenerAttributes",
        "describeListenerCertificates",
        "describeListeners",
        "describeLoadBalancerAttributes",
        "describeLoadBalancers",
        "describeRules",
        "describeSSLPolicies",
        "describeTags",
        "describeTargetGroupAttributes",
        "describeTargetGroups",
        "describeTargetHealth",
        "describeTrustStoreAssociations",
        "describeTrustStoreRevocations",
        "describeTrustStores",
        "getResourcePolicy",
        "getTrustStoreCaCertificatesBundle",
        "getTrustStoreRevocationContent",
        "modifyCapacityReservation",
        "modifyIpPools",
        "modifyListener",
        "modifyListenerAttributes",
        "modifyLoadBalancerAttributes",
        "modifyRule",
        "modifyTargetGroup",
        "modifyTargetGroupAttributes",
        "modifyTrustStore",
        "registerTargets",
        "removeListenerCertificates",
        "removeTags",
        "removeTrustStoreRevocations",
        "setIpAddressType",
        "setRulePriorities",
        "setSecurityGroups",
        "setSubnets"
      ]
    },
    {
      "service": "elastic-transcoder",
      "className": "ElasticTranscoder",
      "operations": [
        "cancelJob",
        "createJob",
        "createPipeline",
        "createPreset",
        "deletePipeline",
        "deletePreset",
        "listJobsByPipeline",
        "listJobsByStatus",
        "listPipelines",
        "listPresets",
        "readJob",
        "readPipeline",
        "readPreset",
        "testRole",
        "updatePipeline",
        "updatePipelineNotifications",
        "updatePipelineStatus"
      ]
    },
    {
      "service": "elasticache",
      "className": "ElastiCache",
      "operations": [
        "addTagsToResource",
        "authorizeCacheSecurityGroupIngress",
        "batchApplyUpdateAction",
        "batchStopUpdateAction",
        "completeMigration",
        "copyServerlessCacheSnapshot",
        "copySnapshot",
        "createCacheCluster",
        "createCacheParameterGroup",
        "createCacheSecurityGroup",
        "createCacheSubnetGroup",
        "createGlobalReplicationGroup",
        "createReplicationGroup",
        "createServerlessCache",
        "createServerlessCacheSnapshot",
        "createSnapshot",
        "createUser",
        "createUserGroup",
        "decreaseNodeGroupsInGlobalReplicationGroup",
        "decreaseReplicaCount",
        "deleteCacheCluster",
        "deleteCacheParameterGroup",
        "deleteCacheSecurityGroup",
        "deleteCacheSubnetGroup",
        "deleteGlobalReplicationGroup",
        "deleteReplicationGroup",
        "deleteServerlessCache",
        "deleteServerlessCacheSnapshot",
        "deleteSnapshot",
        "deleteUser",
        "deleteUserGroup",
        "describeCacheClusters",
        "describeCacheEngineVersions",
        "describeCacheParameterGroups",
        "describeCacheParameters",
        "describeCacheSecurityGroups",
        "describeCacheSubnetGroups",
        "describeEngineDefaultParameters",
        "describeEvents",
        "describeGlobalReplicationGroups",
        "describeReplicationGroups",
        "describeReservedCacheNodes",
        "describeReservedCacheNodesOfferings",
        "describeServerlessCaches",
        "describeServerlessCacheSnapshots",
        "describeServiceUpdates",
        "describeSnapshots",
        "describeUpdateActions",
        "describeUserGroups",
        "describeUsers",
        "disassociateGlobalReplicationGroup",
        "exportServerlessCacheSnapshot",
        "failoverGlobalReplicationGroup",
        "increaseNodeGroupsInGlobalReplicationGroup",
        "increaseReplicaCount",
        "listAllowedNodeTypeModifications",
        "listTagsForResource",
        "modifyCacheCluster",
        "modifyCacheParameterGroup",
        "modifyCacheSubnetGroup",
        "modifyGlobalReplicationGroup",
        "modifyReplicationGroup",
        "modifyReplicationGroupShardConfiguration",
        "modifyServerlessCache",
        "modifyUser",
        "modifyUserGroup",
        "purchaseReservedCacheNodesOffering",
        "rebalanceSlotsInGlobalReplicationGroup",
        "rebootCacheCluster",
        "removeTagsFromResource",
        "resetCacheParameterGroup",
        "revokeCacheSecurityGroupIngress",
        "startMigration",
        "testFailover",
        "testMigration"
      ]
    },
    {
      "service": "elasticsearch-service",
      "className": "ElasticsearchService",
      "operations": [
        "acceptInboundCrossClusterSearchConnection",
        "addTags",
        "associatePackage",
        "authorizeVpcEndpointAccess",
        "cancelDomainConfigChange",
        "cancelElasticsearchServiceSoftwareUpdate",
        "createElasticsearchDomain",
        "createOutboundCrossClusterSearchConnection",
        "createPackage",
        "createVpcEndpoint",
        "deleteElasticsearchDomain",
        "deleteElasticsearchServiceRole",
        "deleteInboundCrossClusterSearchConnection",
        "deleteOutboundCrossClusterSearchConnection",
        "deletePackage",
        "deleteVpcEndpoint",
        "describeDomainAutoTunes",
        "describeDomainChangeProgress",
        "describeElasticsearchDomain",
        "describeElasticsearchDomainConfig",
        "describeElasticsearchDomains",
        "describeElasticsearchInstanceTypeLimits",
        "describeInboundCrossClusterSearchConnections",
        "describeOutboundCrossClusterSearchConnections",
        "describePackages",
        "describeReservedElasticsearchInstanceOfferings",
        "describeReservedElasticsearchInstances",
        "describeVpcEndpoints",
        "dissociatePackage",
        "getCompatibleElasticsearchVersions",
        "getPackageVersionHistory",
        "getUpgradeHistory",
        "getUpgradeStatus",
        "listDomainNames",
        "listDomainsForPackage",
        "listElasticsearchInstanceTypes",
        "listElasticsearchVersions",
        "listPackagesForDomain",
        "listTags",
        "listVpcEndpointAccess",
        "listVpcEndpoints",
        "listVpcEndpointsForDomain",
        "purchaseReservedElasticsearchInstanceOffering",
        "rejectInboundCrossClusterSearchConnection",
        "removeTags",
        "revokeVpcEndpointAccess",
        "startElasticsearchServiceSoftwareUpdate",
        "updateElasticsearchDomainConfig",
        "updatePackage",
        "updateVpcEndpoint",
        "upgradeElasticsearchDomain"
      ]
    },
    {
      "service": "emr",
      "className": "EMR",
      "operations": [
        "addInstanceFleet",
        "addInstanceGroups",
        "addJobFlowSteps",
        "addTags",
        "cancelSteps",
        "createPersistentAppUI",
        "createSecurityConfiguration",
        "createStudio",
        "createStudioSessionMapping",
        "deleteSecurityConfiguration",
        "deleteStudio",
        "deleteStudioSessionMapping",
        "describeCluster",
        "describeJobFlows",
        "describeNotebookExecution",
        "describePersistentAppUI",
        "describeReleaseLabel",
        "describeSecurityConfiguration",
        "describeStep",
        "describeStudio",
        "getAutoTerminationPolicy",
        "getBlockPublicAccessConfiguration",
        "getClusterSessionCredentials",
        "getManagedScalingPolicy",
        "getOnClusterAppUIPresignedURL",
        "getPersistentAppUIPresignedURL",
        "getStudioSessionMapping",
        "listBootstrapActions",
        "listClusters",
        "listInstanceFleets",
        "listInstanceGroups",
        "listInstances",
        "listNotebookExecutions",
        "listReleaseLabels",
        "listSecurityConfigurations",
        "listSteps",
        "listStudios",
        "listStudioSessionMappings",
        "listSupportedInstanceTypes",
        "modifyCluster",
        "modifyInstanceFleet",
        "modifyInstanceGroups",
        "putAutoScalingPolicy",
        "putAutoTerminationPolicy",
        "putBlockPublicAccessConfiguration",
        "putManagedScalingPolicy",
        "removeAutoScalingPolicy",
        "removeAutoTerminationPolicy",
        "removeManagedScalingPolicy",
        "removeTags",
        "runJobFlow",
        "setKeepJobFlowAliveWhenNoSteps",
        "setTerminationProtection",
        "setUnhealthyNodeReplacement",
        "setVisibleToAllUsers",
        "startNotebookExecution",
        "stopNotebookExecution",
        "terminateJobFlows",
        "updateStudio",
        "updateStudioSessionMapping"
      ]
    },
    {
      "service": "emr-containers",
      "className": "EMRcontainers",
      "operations": [
        "cancelJobRun",
        "createJobTemplate",
        "createManagedEndpoint",
        "createSecurityConfiguration",
        "createVirtualCluster",
        "deleteJobTemplate",
        "deleteManagedEndpoint",
        "deleteVirtualCluster",
        "describeJobRun",
        "describeJobTemplate",
        "describeManagedEndpoint",
        "describeSecurityConfiguration",
        "describeVirtualCluster",
        "getManagedEndpointSessionCredentials",
        "listJobRuns",
        "listJobTemplates",
        "listManagedEndpoints",
        "listSecurityConfigurations",
        "listTagsForResource",
        "listVirtualClusters",
        "startJobRun",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "emr-serverless",
      "className": "EMRServerless",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "cancelJobRun",
        "createApplication",
        "deleteApplication",
        "getApplication",
        "getDashboardForJobRun",
        "getJobRun",
        "listApplications",
        "listJobRunAttempts",
        "listJobRuns",
        "startApplication",
        "startJobRun",
        "stopApplication",
        "updateApplication"
      ]
    },
    {
      "service": "entityresolution",
      "className": "EntityResolution",
      "operations": [
        "addPolicyStatement",
        "batchDeleteUniqueId",
        "createIdMappingWorkflow",
        "createIdNamespace",
        "createMatchingWorkflow",
        "createSchemaMapping",
        "deleteIdMappingWorkflow",
        "deleteIdNamespace",
        "deleteMatchingWorkflow",
        "deletePolicyStatement",
        "deleteSchemaMapping",
        "generateMatchId",
        "getIdMappingJob",
        "getIdMappingWorkflow",
        "getIdNamespace",
        "getMatchId",
        "getMatchingJob",
        "getMatchingWorkflow",
        "getPolicy",
        "getProviderService",
        "getSchemaMapping",
        "listIdMappingJobs",
        "listIdMappingWorkflows",
        "listIdNamespaces",
        "listMatchingJobs",
        "listMatchingWorkflows",
        "listProviderServices",
        "listSchemaMappings",
        "listTagsForResource",
        "putPolicy",
        "startIdMappingJob",
        "startMatchingJob",
        "tagResource",
        "untagResource",
        "updateIdMappingWorkflow",
        "updateIdNamespace",
        "updateMatchingWorkflow",
        "updateSchemaMapping"
      ]
    },
    {
      "service": "eventbridge",
      "className": "EventBridge",
      "operations": [
        "activateEventSource",
        "cancelReplay",
        "createApiDestination",
        "createArchive",
        "createConnection",
        "createEndpoint",
        "createEventBus",
        "createPartnerEventSource",
        "deactivateEventSource",
        "deauthorizeConnection",
        "deleteApiDestination",
        "deleteArchive",
        "deleteConnection",
        "deleteEndpoint",
        "deleteEventBus",
        "deletePartnerEventSource",
        "deleteRule",
        "describeApiDestination",
        "describeArchive",
        "describeConnection",
        "describeEndpoint",
        "describeEventBus",
        "describeEventSource",
        "describePartnerEventSource",
        "describeReplay",
        "describeRule",
        "disableRule",
        "enableRule",
        "listApiDestinations",
        "listArchives",
        "listConnections",
        "listEndpoints",
        "listEventBuses",
        "listEventSources",
        "listPartnerEventSourceAccounts",
        "listPartnerEventSources",
        "listReplays",
        "listRuleNamesByTarget",
        "listRules",
        "listTagsForResource",
        "listTargetsByRule",
        "putEvents",
        "putPartnerEvents",
        "putPermission",
        "putRule",
        "putTargets",
        "removePermission",
        "removeTargets",
        "startReplay",
        "tagResource",
        "testEventPattern",
        "untagResource",
        "updateApiDestination",
        "updateArchive",
        "updateConnection",
        "updateEndpoint",
        "updateEventBus"
      ]
    },
    {
      "service": "evidently",
      "className": "Evidently",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "testSegmentPattern",
        "untagResource",
        "batchEvaluateFeature",
        "createExperiment",
        "createFeature",
        "createLaunch",
        "createProject",
        "createSegment",
        "deleteExperiment",
        "deleteFeature",
        "deleteLaunch",
        "deleteProject",
        "deleteSegment",
        "evaluateFeature",
        "getExperiment",
        "getExperimentResults",
        "getFeature",
        "getLaunch",
        "getProject",
        "getSegment",
        "listExperiments",
        "listFeatures",
        "listLaunches",
        "listProjects",
        "listSegmentReferences",
        "listSegments",
        "putProjectEvents",
        "startExperiment",
        "startLaunch",
        "stopExperiment",
        "stopLaunch",
        "updateExperiment",
        "updateFeature",
        "updateLaunch",
        "updateProject",
        "updateProjectDataDelivery"
      ]
    },
    {
      "service": "evs",
      "className": "evs",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "createEnvironment",
        "createEnvironmentHost",
        "deleteEnvironment",
        "deleteEnvironmentHost",
        "getEnvironment",
        "listEnvironmentHosts",
        "listEnvironmentVlans",
        "listEnvironments"
      ]
    },
    {
      "service": "finspace",
      "className": "finspace",
      "operations": [
        "createEnvironment",
        "createKxChangeset",
        "createKxCluster",
        "createKxDatabase",
        "createKxDataview",
        "createKxEnvironment",
        "createKxScalingGroup",
        "createKxUser",
        "createKxVolume",
        "deleteEnvironment",
        "deleteKxCluster",
        "deleteKxClusterNode",
        "deleteKxDatabase",
        "deleteKxDataview",
        "deleteKxEnvironment",
        "deleteKxScalingGroup",
        "deleteKxUser",
        "deleteKxVolume",
        "getEnvironment",
        "getKxChangeset",
        "getKxCluster",
        "getKxConnectionString",
        "getKxDatabase",
        "getKxDataview",
        "getKxEnvironment",
        "getKxScalingGroup",
        "getKxUser",
        "getKxVolume",
        "listEnvironments",
        "listKxChangesets",
        "listKxClusterNodes",
        "listKxClusters",
        "listKxDatabases",
        "listKxDataviews",
        "listKxEnvironments",
        "listKxScalingGroups",
        "listKxUsers",
        "listKxVolumes",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "updateEnvironment",
        "updateKxClusterCodeConfiguration",
        "updateKxClusterDatabases",
        "updateKxDatabase",
        "updateKxDataview",
        "updateKxEnvironment",
        "updateKxEnvironmentNetwork",
        "updateKxUser",
        "updateKxVolume"
      ]
    },
    {
      "service": "finspace-data",
      "className": "finspacedata",
      "operations": [
        "associateUserToPermissionGroup",
        "createChangeset",
        "createDataset",
        "createDataView",
        "createPermissionGroup",
        "createUser",
        "deleteDataset",
        "deletePermissionGroup",
        "disableUser",
        "disassociateUserFromPermissionGroup",
        "enableUser",
        "getChangeset",
        "getDataset",
        "getDataView",
        "getExternalDataViewAccessDetails",
        "getPermissionGroup",
        "getProgrammaticAccessCredentials",
        "getUser",
        "getWorkingLocation",
        "listChangesets",
        "listDatasets",
        "listDataViews",
        "listPermissionGroups",
        "listPermissionGroupsByUser",
        "listUsers",
        "listUsersByPermissionGroup",
        "resetUserPassword",
        "updateChangeset",
        "updateDataset",
        "updatePermissionGroup",
        "updateUser"
      ]
    },
    {
      "service": "firehose",
      "className": "Firehose",
      "operations": [
        "createDeliveryStream",
        "deleteDeliveryStream",
        "describeDeliveryStream",
        "listDeliveryStreams",
        "listTagsForDeliveryStream",
        "putRecord",
        "putRecordBatch",
        "startDeliveryStreamEncryption",
        "stopDeliveryStreamEncryption",
        "tagDeliveryStream",
        "untagDeliveryStream",
        "updateDestination"
      ]
    },
    {
      "service": "fis",
      "className": "fis",
      "operations": [
        "createExperimentTemplate",
        "createTargetAccountConfiguration",
        "deleteExperimentTemplate",
        "deleteTargetAccountConfiguration",
        "getAction",
        "getExperiment",
        "getExperimentTargetAccountConfiguration",
        "getExperimentTemplate",
        "getSafetyLever",
        "getTargetAccountConfiguration",
        "getTargetResourceType",
        "listActions",
        "listExperimentResolvedTargets",
        "listExperiments",
        "listExperimentTargetAccountConfigurations",
        "listExperimentTemplates",
        "listTagsForResource",
        "listTargetAccountConfigurations",
        "listTargetResourceTypes",
        "startExperiment",
        "stopExperiment",
        "tagResource",
        "untagResource",
        "updateExperimentTemplate",
        "updateSafetyLeverState",
        "updateTargetAccountConfiguration"
      ]
    },
    {
      "service": "fms",
      "className": "FMS",
      "operations": [
        "associateAdminAccount",
        "associateThirdPartyFirewall",
        "batchAssociateResource",
        "batchDisassociateResource",
        "deleteAppsList",
        "deleteNotificationChannel",
        "deletePolicy",
        "deleteProtocolsList",
        "deleteResourceSet",
        "disassociateAdminAccount",
        "disassociateThirdPartyFirewall",
        "getAdminAccount",
        "getAdminScope",
        "getAppsList",
        "getComplianceDetail",
        "getNotificationChannel",
        "getPolicy",
        "getProtectionStatus",
        "getProtocolsList",
        "getResourceSet",
        "getThirdPartyFirewallAssociationStatus",
        "getViolationDetails",
        "listAdminAccountsForOrganization",
        "listAdminsManagingAccount",
        "listAppsLists",
        "listComplianceStatus",
        "listDiscoveredResources",
        "listMemberAccounts",
        "listPolicies",
        "listProtocolsLists",
        "listResourceSetResources",
        "listResourceSets",
        "listTagsForResource",
        "listThirdPartyFirewallFirewallPolicies",
        "putAdminAccount",
        "putAppsList",
        "putNotificationChannel",
        "putPolicy",
        "putProtocolsList",
        "putResourceSet",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "forecast",
      "className": "forecast",
      "operations": [
        "createAutoPredictor",
        "createDataset",
        "createDatasetGroup",
        "createDatasetImportJob",
        "createExplainability",
        "createExplainabilityExport",
        "createForecast",
        "createForecastExportJob",
        "createMonitor",
        "createPredictor",
        "createPredictorBacktestExportJob",
        "createWhatIfAnalysis",
        "createWhatIfForecast",
        "createWhatIfForecastExport",
        "deleteDataset",
        "deleteDatasetGroup",
        "deleteDatasetImportJob",
        "deleteExplainability",
        "deleteExplainabilityExport",
        "deleteForecast",
        "deleteForecastExportJob",
        "deleteMonitor",
        "deletePredictor",
        "deletePredictorBacktestExportJob",
        "deleteResourceTree",
        "deleteWhatIfAnalysis",
        "deleteWhatIfForecast",
        "deleteWhatIfForecastExport",
        "describeAutoPredictor",
        "describeDataset",
        "describeDatasetGroup",
        "describeDatasetImportJob",
        "describeExplainability",
        "describeExplainabilityExport",
        "describeForecast",
        "describeForecastExportJob",
        "describeMonitor",
        "describePredictor",
        "describePredictorBacktestExportJob",
        "describeWhatIfAnalysis",
        "describeWhatIfForecast",
        "describeWhatIfForecastExport",
        "getAccuracyMetrics",
        "listDatasetGroups",
        "listDatasetImportJobs",
        "listDatasets",
        "listExplainabilities",
        "listExplainabilityExports",
        "listForecastExportJobs",
        "listForecasts",
        "listMonitorEvaluations",
        "listMonitors",
        "listPredictorBacktestExportJobs",
        "listPredictors",
        "listTagsForResource",
        "listWhatIfAnalyses",
        "listWhatIfForecastExports",
        "listWhatIfForecasts",
        "resumeResource",
        "stopResource",
        "tagResource",
        "untagResource",
        "updateDatasetGroup"
      ]
    },
    {
      "service": "forecastquery",
      "className": "forecastquery",
      "operations": [
        "queryForecast",
        "queryWhatIfForecast"
      ]
    },
    {
      "service": "frauddetector",
      "className": "FraudDetector",
      "operations": [
        "batchCreateVariable",
        "batchGetVariable",
        "cancelBatchImportJob",
        "cancelBatchPredictionJob",
        "createBatchImportJob",
        "createBatchPredictionJob",
        "createDetectorVersion",
        "createList",
        "createModel",
        "createModelVersion",
        "createRule",
        "createVariable",
        "deleteBatchImportJob",
        "deleteBatchPredictionJob",
        "deleteDetector",
        "deleteDetectorVersion",
        "deleteEntityType",
        "deleteEvent",
        "deleteEventsByEventType",
        "deleteEventType",
        "deleteExternalModel",
        "deleteLabel",
        "deleteList",
        "deleteModel",
        "deleteModelVersion",
        "deleteOutcome",
        "deleteRule",
        "deleteVariable",
        "describeDetector",
        "describeModelVersions",
        "getBatchImportJobs",
        "getBatchPredictionJobs",
        "getDeleteEventsByEventTypeStatus",
        "getDetectors",
        "getDetectorVersion",
        "getEntityTypes",
        "getEvent",
        "getEventPrediction",
        "getEventPredictionMetadata",
        "getEventTypes",
        "getExternalModels",
        "getKMSEncryptionKey",
        "getLabels",
        "getListElements",
        "getListsMetadata",
        "getModels",
        "getModelVersion",
        "getOutcomes",
        "getRules",
        "getVariables",
        "listEventPredictions",
        "listTagsForResource",
        "putDetector",
        "putEntityType",
        "putEventType",
        "putExternalModel",
        "putKMSEncryptionKey",
        "putLabel",
        "putOutcome",
        "sendEvent",
        "tagResource",
        "untagResource",
        "updateDetectorVersion",
        "updateDetectorVersionMetadata",
        "updateDetectorVersionStatus",
        "updateEventLabel",
        "updateList",
        "updateModel",
        "updateModelVersion",
        "updateModelVersionStatus",
        "updateRuleMetadata",
        "updateRuleVersion",
        "updateVariable"
      ]
    },
    {
      "service": "freetier",
      "className": "FreeTier",
      "operations": [
        "getAccountActivity",
        "getAccountPlanState",
        "getFreeTierUsage",
        "listAccountActivities",
        "upgradeAccountPlan"
      ]
    },
    {
      "service": "fsx",
      "className": "FSx",
      "operations": [
        "associateFileSystemAliases",
        "cancelDataRepositoryTask",
        "copyBackup",
        "copySnapshotAndUpdateVolume",
        "createAndAttachS3AccessPoint",
        "createBackup",
        "createDataRepositoryAssociation",
        "createDataRepositoryTask",
        "createFileCache",
        "createFileSystem",
        "createFileSystemFromBackup",
        "createSnapshot",
        "createStorageVirtualMachine",
        "createVolume",
        "createVolumeFromBackup",
        "deleteBackup",
        "deleteDataRepositoryAssociation",
        "deleteFileCache",
        "deleteFileSystem",
        "deleteSnapshot",
        "deleteStorageVirtualMachine",
        "deleteVolume",
        "describeBackups",
        "describeDataRepositoryAssociations",
        "describeDataRepositoryTasks",
        "describeFileCaches",
        "describeFileSystemAliases",
        "describeFileSystems",
        "describeS3AccessPointAttachments",
        "describeSharedVpcConfiguration",
        "describeSnapshots",
        "describeStorageVirtualMachines",
        "describeVolumes",
        "detachAndDeleteS3AccessPoint",
        "disassociateFileSystemAliases",
        "listTagsForResource",
        "releaseFileSystemNfsV3Locks",
        "restoreVolumeFromSnapshot",
        "startMisconfiguredStateRecovery",
        "tagResource",
        "untagResource",
        "updateDataRepositoryAssociation",
        "updateFileCache",
        "updateFileSystem",
        "updateSharedVpcConfiguration",
        "updateSnapshot",
        "updateStorageVirtualMachine",
        "updateVolume"
      ]
    },
    {
      "service": "gamelift",
      "className": "GameLift",
      "operations": [
        "acceptMatch",
        "claimGameServer",
        "createAlias",
        "createBuild",
        "createContainerFleet",
        "createContainerGroupDefinition",
        "createFleet",
        "createFleetLocations",
        "createGameServerGroup",
        "createGameSession",
        "createGameSessionQueue",
        "createLocation",
        "createMatchmakingConfiguration",
        "createMatchmakingRuleSet",
        "createPlayerSession",
        "createPlayerSessions",
        "createScript",
        "createVpcPeeringAuthorization",
        "createVpcPeeringConnection",
        "deleteAlias",
        "deleteBuild",
        "deleteContainerFleet",
        "deleteContainerGroupDefinition",
        "deleteFleet",
        "deleteFleetLocations",
        "deleteGameServerGroup",
        "deleteGameSessionQueue",
        "deleteLocation",
        "deleteMatchmakingConfiguration",
        "deleteMatchmakingRuleSet",
        "deleteScalingPolicy",
        "deleteScript",
        "deleteVpcPeeringAuthorization",
        "deleteVpcPeeringConnection",
        "deregisterCompute",
        "deregisterGameServer",
        "describeAlias",
        "describeBuild",
        "describeCompute",
        "describeContainerFleet",
        "describeContainerGroupDefinition",
        "describeEC2InstanceLimits",
        "describeFleetAttributes",
        "describeFleetCapacity",
        "describeFleetDeployment",
        "describeFleetEvents",
        "describeFleetLocationAttributes",
        "describeFleetLocationCapacity",
        "describeFleetLocationUtilization",
        "describeFleetPortSettings",
        "describeFleetUtilization",
        "describeGameServer",
        "describeGameServerGroup",
        "describeGameServerInstances",
        "describeGameSessionDetails",
        "describeGameSessionPlacement",
        "describeGameSessionQueues",
        "describeGameSessions",
        "describeInstances",
        "describeMatchmaking",
        "describeMatchmakingConfigurations",
        "describeMatchmakingRuleSets",
        "describePlayerSessions",
        "describeRuntimeConfiguration",
        "describeScalingPolicies",
        "describeScript",
        "describeVpcPeeringAuthorizations",
        "describeVpcPeeringConnections",
        "getComputeAccess",
        "getComputeAuthToken",
        "getGameSessionLogUrl",
        "getInstanceAccess",
        "listAliases",
        "listBuilds",
        "listCompute",
        "listContainerFleets",
        "listContainerGroupDefinitions",
        "listContainerGroupDefinitionVersions",
        "listFleetDeployments",
        "listFleets",
        "listGameServerGroups",
        "listGameServers",
        "listLocations",
        "listScripts",
        "listTagsForResource",
        "putScalingPolicy",
        "registerCompute",
        "registerGameServer",
        "requestUploadCredentials",
        "resolveAlias",
        "resumeGameServerGroup",
        "searchGameSessions",
        "startFleetActions",
        "startGameSessionPlacement",
        "startMatchBackfill",
        "startMatchmaking",
        "stopFleetActions",
        "stopGameSessionPlacement",
        "stopMatchmaking",
        "suspendGameServerGroup",
        "tagResource",
        "terminateGameSession",
        "untagResource",
        "updateAlias",
        "updateBuild",
        "updateContainerFleet",
        "updateContainerGroupDefinition",
        "updateFleetAttributes",
        "updateFleetCapacity",
        "updateFleetPortSettings",
        "updateGameServer",
        "updateGameServerGroup",
        "updateGameSession",
        "updateGameSessionQueue",
        "updateMatchmakingConfiguration",
        "updateRuntimeConfiguration",
        "updateScript",
        "validateMatchmakingRuleSet"
      ]
    },
    {
      "service": "gameliftstreams",
      "className": "GameLiftStreams",
      "operations": [
        "addStreamGroupLocations",
        "associateApplications",
        "createStreamSessionConnection",
        "disassociateApplications",
        "exportStreamSessionFiles",
        "getStreamSession",
        "listStreamSessions",
        "listStreamSessionsByAccount",
        "listTagsForResource",
        "removeStreamGroupLocations",
        "startStreamSession",
        "tagResource",
        "terminateStreamSession",
        "untagResource",
        "createApplication",
        "createStreamGroup",
        "deleteApplication",
        "deleteStreamGroup",
        "getApplication",
        "getStreamGroup",
        "listApplications",
        "listStreamGroups",
        "updateApplication",
        "updateStreamGroup"
      ]
    },
    {
      "service": "geo-maps",
      "className": "GeoMaps",
      "operations": [
        "getGlyphs",
        "getSprites",
        "getStaticMap",
        "getStyleDescriptor",
        "getTile"
      ]
    },
    {
      "service": "geo-places",
      "className": "GeoPlaces",
      "operations": [
        "autocomplete",
        "geocode",
        "getPlace",
        "reverseGeocode",
        "searchNearby",
        "searchText",
        "suggest"
      ]
    },
    {
      "service": "geo-routes",
      "className": "GeoRoutes",
      "operations": [
        "calculateIsolines",
        "calculateRouteMatrix",
        "calculateRoutes",
        "optimizeWaypoints",
        "snapToRoads"
      ]
    },
    {
      "service": "glacier",
      "className": "Glacier",
      "operations": [
        "abortMultipartUpload",
        "abortVaultLock",
        "addTagsToVault",
        "completeMultipartUpload",
        "completeVaultLock",
        "createVault",
        "deleteArchive",
        "deleteVault",
        "deleteVaultAccessPolicy",
        "deleteVaultNotifications",
        "describeJob",
        "describeVault",
        "getDataRetrievalPolicy",
        "getJobOutput",
        "getVaultAccessPolicy",
        "getVaultLock",
        "getVaultNotifications",
        "initiateJob",
        "initiateMultipartUpload",
        "initiateVaultLock",
        "listJobs",
        "listMultipartUploads",
        "listParts",
        "listProvisionedCapacity",
        "listTagsForVault",
        "listVaults",
        "purchaseProvisionedCapacity",
        "removeTagsFromVault",
        "setDataRetrievalPolicy",
        "setVaultAccessPolicy",
        "setVaultNotifications",
        "uploadArchive",
        "uploadMultipartPart"
      ]
    },
    {
      "service": "global-accelerator",
      "className": "GlobalAccelerator",
      "operations": [
        "addCustomRoutingEndpoints",
        "addEndpoints",
        "advertiseByoipCidr",
        "allowCustomRoutingTraffic",
        "createAccelerator",
        "createCrossAccountAttachment",
        "createCustomRoutingAccelerator",
        "createCustomRoutingEndpointGroup",
        "createCustomRoutingListener",
        "createEndpointGroup",
        "createListener",
        "deleteAccelerator",
        "deleteCrossAccountAttachment",
        "deleteCustomRoutingAccelerator",
        "deleteCustomRoutingEndpointGroup",
        "deleteCustomRoutingListener",
        "deleteEndpointGroup",
        "deleteListener",
        "denyCustomRoutingTraffic",
        "deprovisionByoipCidr",
        "describeAccelerator",
        "describeAcceleratorAttributes",
        "describeCrossAccountAttachment",
        "describeCustomRoutingAccelerator",
        "describeCustomRoutingAcceleratorAttributes",
        "describeCustomRoutingEndpointGroup",
        "describeCustomRoutingListener",
        "describeEndpointGroup",
        "describeListener",
        "listAccelerators",
        "listByoipCidrs",
        "listCrossAccountAttachments",
        "listCrossAccountResourceAccounts",
        "listCrossAccountResources",
        "listCustomRoutingAccelerators",
        "listCustomRoutingEndpointGroups",
        "listCustomRoutingListeners",
        "listCustomRoutingPortMappings",
        "listCustomRoutingPortMappingsByDestination",
        "listEndpointGroups",
        "listListeners",
        "listTagsForResource",
        "provisionByoipCidr",
        "removeCustomRoutingEndpoints",
        "removeEndpoints",
        "tagResource",
        "untagResource",
        "updateAccelerator",
        "updateAcceleratorAttributes",
        "updateCrossAccountAttachment",
        "updateCustomRoutingAccelerator",
        "updateCustomRoutingAcceleratorAttributes",
        "updateCustomRoutingListener",
        "updateEndpointGroup",
        "updateListener",
        "withdrawByoipCidr"
      ]
    },
    {
      "service": "glue",
      "className": "Glue",
      "operations": [
        "batchCreatePartition",
        "batchDeleteConnection",
        "batchDeletePartition",
        "batchDeleteTable",
        "batchDeleteTableVersion",
        "batchGetBlueprints",
        "batchGetCrawlers",
        "batchGetCustomEntityTypes",
        "batchGetDataQualityResult",
        "batchGetDevEndpoints",
        "batchGetJobs",
        "batchGetPartition",
        "batchGetTableOptimizer",
        "batchGetTriggers",
        "batchGetWorkflows",
        "batchPutDataQualityStatisticAnnotation",
        "batchStopJobRun",
        "batchUpdatePartition",
        "cancelDataQualityRuleRecommendationRun",
        "cancelDataQualityRulesetEvaluationRun",
        "cancelMLTaskRun",
        "cancelStatement",
        "checkSchemaVersionValidity",
        "createBlueprint",
        "createCatalog",
        "createClassifier",
        "createColumnStatisticsTaskSettings",
        "createConnection",
        "createCrawler",
        "createCustomEntityType",
        "createDatabase",
        "createDataQualityRuleset",
        "createDevEndpoint",
        "createIntegration",
        "createIntegrationResourceProperty",
        "createIntegrationTableProperties",
        "createJob",
        "createMLTransform",
        "createPartition",
        "createPartitionIndex",
        "createRegistry",
        "createSchema",
        "createScript",
        "createSecurityConfiguration",
        "createSession",
        "createTable",
        "createTableOptimizer",
        "createTrigger",
        "createUsageProfile",
        "createUserDefinedFunction",
        "createWorkflow",
        "deleteBlueprint",
        "deleteCatalog",
        "deleteClassifier",
        "deleteColumnStatisticsForPartition",
        "deleteColumnStatisticsForTable",
        "deleteColumnStatisticsTaskSettings",
        "deleteConnection",
        "deleteCrawler",
        "deleteCustomEntityType",
        "deleteDatabase",
        "deleteDataQualityRuleset",
        "deleteDevEndpoint",
        "deleteIntegration",
        "deleteIntegrationTableProperties",
        "deleteJob",
        "deleteMLTransform",
        "deletePartition",
        "deletePartitionIndex",
        "deleteRegistry",
        "deleteResourcePolicy",
        "deleteSchema",
        "deleteSchemaVersions",
        "deleteSecurityConfiguration",
        "deleteSession",
        "deleteTable",
        "deleteTableOptimizer",
        "deleteTableVersion",
        "deleteTrigger",
        "deleteUsageProfile",
        "deleteUserDefinedFunction",
        "deleteWorkflow",
        "describeConnectionType",
        "describeEntity",
        "describeInboundIntegrations",
        "describeIntegrations",
        "getBlueprint",
        "getBlueprintRun",
        "getBlueprintRuns",
        "getCatalog",
        "getCatalogImportStatus",
        "getCatalogs",
        "getClassifier",
        "getClassifiers",
        "getColumnStatisticsForPartition",
        "getColumnStatisticsForTable",
        "getColumnStatisticsTaskRun",
        "getColumnStatisticsTaskRuns",
        "getColumnStatisticsTaskSettings",
        "getConnection",
        "getConnections",
        "getCrawler",
        "getCrawlerMetrics",
        "getCrawlers",
        "getCustomEntityType",
        "getDatabase",
        "getDatabases",
        "getDataCatalogEncryptionSettings",
        "getDataflowGraph",
        "getDataQualityModel",
        "getDataQualityModelResult",
        "getDataQualityResult",
        "getDataQualityRuleRecommendationRun",
        "getDataQualityRuleset",
        "getDataQualityRulesetEvaluationRun",
        "getDevEndpoint",
        "getDevEndpoints",
        "getEntityRecords",
        "getIntegrationResourceProperty",
        "getIntegrationTableProperties",
        "getJob",
        "getJobBookmark",
        "getJobRun",
        "getJobRuns",
        "getJobs",
        "getMapping",
        "getMLTaskRun",
        "getMLTaskRuns",
        "getMLTransform",
        "getMLTransforms",
        "getPartition",
        "getPartitionIndexes",
        "getPartitions",
        "getPlan",
        "getRegistry",
        "getResourcePolicies",
        "getResourcePolicy",
        "getSchema",
        "getSchemaByDefinition",
        "getSchemaVersion",
        "getSchemaVersionsDiff",
        "getSecurityConfiguration",
        "getSecurityConfigurations",
        "getSession",
        "getStatement",
        "getTable",
        "getTableOptimizer",
        "getTables",
        "getTableVersion",
        "getTableVersions",
        "getTags",
        "getTrigger",
        "getTriggers",
        "getUnfilteredPartitionMetadata",
        "getUnfilteredPartitionsMetadata",
        "getUnfilteredTableMetadata",
        "getUsageProfile",
        "getUserDefinedFunction",
        "getUserDefinedFunctions",
        "getWorkflow",
        "getWorkflowRun",
        "getWorkflowRunProperties",
        "getWorkflowRuns",
        "importCatalogToGlue",
        "listBlueprints",
        "listColumnStatisticsTaskRuns",
        "listConnectionTypes",
        "listCrawlers",
        "listCrawls",
        "listCustomEntityTypes",
        "listDataQualityResults",
        "listDataQualityRuleRecommendationRuns",
        "listDataQualityRulesetEvaluationRuns",
        "listDataQualityRulesets",
        "listDataQualityStatisticAnnotations",
        "listDataQualityStatistics",
        "listDevEndpoints",
        "listEntities",
        "listJobs",
        "listMLTransforms",
        "listRegistries",
        "listSchemas",
        "listSchemaVersions",
        "listSessions",
        "listStatements",
        "listTableOptimizerRuns",
        "listTriggers",
        "listUsageProfiles",
        "listWorkflows",
        "modifyIntegration",
        "putDataCatalogEncryptionSettings",
        "putDataQualityProfileAnnotation",
        "putResourcePolicy",
        "putSchemaVersionMetadata",
        "putWorkflowRunProperties",
        "querySchemaVersionMetadata",
        "registerSchemaVersion",
        "removeSchemaVersionMetadata",
        "resetJobBookmark",
        "resumeWorkflowRun",
        "runStatement",
        "searchTables",
        "startBlueprintRun",
        "startColumnStatisticsTaskRun",
        "startColumnStatisticsTaskRunSchedule",
        "startCrawler",
        "startCrawlerSchedule",
        "startDataQualityRuleRecommendationRun",
        "startDataQualityRulesetEvaluationRun",
        "startExportLabelsTaskRun",
        "startImportLabelsTaskRun",
        "startJobRun",
        "startMLEvaluationTaskRun",
        "startMLLabelingSetGenerationTaskRun",
        "startTrigger",
        "startWorkflowRun",
        "stopColumnStatisticsTaskRun",
        "stopColumnStatisticsTaskRunSchedule",
        "stopCrawler",
        "stopCrawlerSchedule",
        "stopSession",
        "stopTrigger",
        "stopWorkflowRun",
        "tagResource",
        "testConnection",
        "untagResource",
        "updateBlueprint",
        "updateCatalog",
        "updateClassifier",
        "updateColumnStatisticsForPartition",
        "updateColumnStatisticsForTable",
        "updateColumnStatisticsTaskSettings",
        "updateConnection",
        "updateCrawler",
        "updateCrawlerSchedule",
        "updateDatabase",
        "updateDataQualityRuleset",
        "updateDevEndpoint",
        "updateIntegrationResourceProperty",
        "updateIntegrationTableProperties",
        "updateJob",
        "updateJobFromSourceControl",
        "updateMLTransform",
        "updatePartition",
        "updateRegistry",
        "updateSchema",
        "updateSourceControlFromJob",
        "updateTable",
        "updateTableOptimizer",
        "updateTrigger",
        "updateUsageProfile",
        "updateUserDefinedFunction",
        "updateWorkflow"
      ]
    },
    {
      "service": "grafana",
      "className": "grafana",
      "operations": [
        "listTagsForResource",
        "listVersions",
        "tagResource",
        "untagResource",
        "associateLicense",
        "createWorkspace",
        "createWorkspaceApiKey",
        "createWorkspaceServiceAccount",
        "createWorkspaceServiceAccountToken",
        "deleteWorkspace",
        "deleteWorkspaceApiKey",
        "deleteWorkspaceServiceAccount",
        "deleteWorkspaceServiceAccountToken",
        "describeWorkspace",
        "describeWorkspaceAuthentication",
        "describeWorkspaceConfiguration",
        "disassociateLicense",
        "listPermissions",
        "listWorkspaceServiceAccountTokens",
        "listWorkspaceServiceAccounts",
        "listWorkspaces",
        "updatePermissions",
        "updateWorkspace",
        "updateWorkspaceAuthentication",
        "updateWorkspaceConfiguration"
      ]
    },
    {
      "service": "greengrass",
      "className": "Greengrass",
      "operations": [
        "associateRoleToGroup",
        "associateServiceRoleToAccount",
        "createConnectorDefinition",
        "createConnectorDefinitionVersion",
        "createCoreDefinition",
        "createCoreDefinitionVersion",
        "createDeployment",
        "createDeviceDefinition",
        "createDeviceDefinitionVersion",
        "createFunctionDefinition",
        "createFunctionDefinitionVersion",
        "createGroup",
        "createGroupCertificateAuthority",
        "createGroupVersion",
        "createLoggerDefinition",
        "createLoggerDefinitionVersion",
        "createResourceDefinition",
        "createResourceDefinitionVersion",
        "createSoftwareUpdateJob",
        "createSubscriptionDefinition",
        "createSubscriptionDefinitionVersion",
        "deleteConnectorDefinition",
        "deleteCoreDefinition",
        "deleteDeviceDefinition",
        "deleteFunctionDefinition",
        "deleteGroup",
        "deleteLoggerDefinition",
        "deleteResourceDefinition",
        "deleteSubscriptionDefinition",
        "disassociateRoleFromGroup",
        "disassociateServiceRoleFromAccount",
        "getAssociatedRole",
        "getBulkDeploymentStatus",
        "getConnectivityInfo",
        "getConnectorDefinition",
        "getConnectorDefinitionVersion",
        "getCoreDefinition",
        "getCoreDefinitionVersion",
        "getDeploymentStatus",
        "getDeviceDefinition",
        "getDeviceDefinitionVersion",
        "getFunctionDefinition",
        "getFunctionDefinitionVersion",
        "getGroup",
        "getGroupCertificateAuthority",
        "getGroupCertificateConfiguration",
        "getGroupVersion",
        "getLoggerDefinition",
        "getLoggerDefinitionVersion",
        "getResourceDefinition",
        "getResourceDefinitionVersion",
        "getServiceRoleForAccount",
        "getSubscriptionDefinition",
        "getSubscriptionDefinitionVersion",
        "getThingRuntimeConfiguration",
        "listBulkDeploymentDetailedReports",
        "listBulkDeployments",
        "listConnectorDefinitions",
        "listConnectorDefinitionVersions",
        "listCoreDefinitions",
        "listCoreDefinitionVersions",
        "listDeployments",
        "listDeviceDefinitions",
        "listDeviceDefinitionVersions",
        "listFunctionDefinitions",
        "listFunctionDefinitionVersions",
        "listGroupCertificateAuthorities",
        "listGroups",
        "listGroupVersions",
        "listLoggerDefinitions",
        "listLoggerDefinitionVersions",
        "listResourceDefinitions",
        "listResourceDefinitionVersions",
        "listSubscriptionDefinitions",
        "listSubscriptionDefinitionVersions",
        "listTagsForResource",
        "resetDeployments",
        "startBulkDeployment",
        "stopBulkDeployment",
        "tagResource",
        "untagResource",
        "updateConnectivityInfo",
        "updateConnectorDefinition",
        "updateCoreDefinition",
        "updateDeviceDefinition",
        "updateFunctionDefinition",
        "updateGroup",
        "updateGroupCertificateConfiguration",
        "updateLoggerDefinition",
        "updateResourceDefinition",
        "updateSubscriptionDefinition",
        "updateThingRuntimeConfiguration"
      ]
    },
    {
      "service": "greengrassv2",
      "className": "GreengrassV2",
      "operations": [
        "associateServiceRoleToAccount",
        "batchAssociateClientDeviceWithCoreDevice",
        "batchDisassociateClientDeviceFromCoreDevice",
        "cancelDeployment",
        "createComponentVersion",
        "createDeployment",
        "deleteComponent",
        "deleteCoreDevice",
        "deleteDeployment",
        "describeComponent",
        "disassociateServiceRoleFromAccount",
        "getComponent",
        "getComponentVersionArtifact",
        "getConnectivityInfo",
        "getCoreDevice",
        "getDeployment",
        "getServiceRoleForAccount",
        "listClientDevicesAssociatedWithCoreDevice",
        "listComponents",
        "listComponentVersions",
        "listCoreDevices",
        "listDeployments",
        "listEffectiveDeployments",
        "listInstalledComponents",
        "listTagsForResource",
        "resolveComponentCandidates",
        "tagResource",
        "untagResource",
        "updateConnectivityInfo"
      ]
    },
    {
      "service": "groundstation",
      "className": "GroundStation",
      "operations": [
        "getMinuteUsage",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "cancelContact",
        "createConfig",
        "createDataflowEndpointGroup",
        "createEphemeris",
        "createMissionProfile",
        "deleteConfig",
        "deleteDataflowEndpointGroup",
        "deleteEphemeris",
        "deleteMissionProfile",
        "describeContact",
        "describeEphemeris",
        "getAgentConfiguration",
        "getConfig",
        "getDataflowEndpointGroup",
        "getMissionProfile",
        "getSatellite",
        "listConfigs",
        "listContacts",
        "listDataflowEndpointGroups",
        "listEphemerides",
        "listGroundStations",
        "listMissionProfiles",
        "listSatellites",
        "registerAgent",
        "reserveContact",
        "updateAgentStatus",
        "updateConfig",
        "updateEphemeris",
        "updateMissionProfile"
      ]
    },
    {
      "service": "guardduty",
      "className": "GuardDuty",
      "operations": [
        "acceptAdministratorInvitation",
        "acceptInvitation",
        "archiveFindings",
        "createDetector",
        "createFilter",
        "createIPSet",
        "createMalwareProtectionPlan",
        "createMembers",
        "createPublishingDestination",
        "createSampleFindings",
        "createThreatIntelSet",
        "declineInvitations",
        "deleteDetector",
        "deleteFilter",
        "deleteInvitations",
        "deleteIPSet",
        "deleteMalwareProtectionPlan",
        "deleteMembers",
        "deletePublishingDestination",
        "deleteThreatIntelSet",
        "describeMalwareScans",
        "describeOrganizationConfiguration",
        "describePublishingDestination",
        "disableOrganizationAdminAccount",
        "disassociateFromAdministratorAccount",
        "disassociateFromMasterAccount",
        "disassociateMembers",
        "enableOrganizationAdminAccount",
        "getAdministratorAccount",
        "getCoverageStatistics",
        "getDetector",
        "getFilter",
        "getFindings",
        "getFindingsStatistics",
        "getInvitationsCount",
        "getIPSet",
        "getMalwareProtectionPlan",
        "getMalwareScanSettings",
        "getMasterAccount",
        "getMemberDetectors",
        "getMembers",
        "getOrganizationStatistics",
        "getRemainingFreeTrialDays",
        "getThreatIntelSet",
        "getUsageStatistics",
        "inviteMembers",
        "listCoverage",
        "listDetectors",
        "listFilters",
        "listFindings",
        "listInvitations",
        "listIPSets",
        "listMalwareProtectionPlans",
        "listMembers",
        "listOrganizationAdminAccounts",
        "listPublishingDestinations",
        "listTagsForResource",
        "listThreatIntelSets",
        "startMalwareScan",
        "startMonitoringMembers",
        "stopMonitoringMembers",
        "tagResource",
        "unarchiveFindings",
        "untagResource",
        "updateDetector",
        "updateFilter",
        "updateFindingsFeedback",
        "updateIPSet",
        "updateMalwareProtectionPlan",
        "updateMalwareScanSettings",
        "updateMemberDetectors",
        "updateOrganizationConfiguration",
        "updatePublishingDestination",
        "updateThreatIntelSet"
      ]
    },
    {
      "service": "health",
      "className": "Health",
      "operations": [
        "describeAffectedAccountsForOrganization",
        "describeAffectedEntities",
        "describeAffectedEntitiesForOrganization",
        "describeEntityAggregates",
        "describeEntityAggregatesForOrganization",
        "describeEventAggregates",
        "describeEventDetails",
        "describeEventDetailsForOrganization",
        "describeEvents",
        "describeEventsForOrganization",
        "describeEventTypes",
        "describeHealthServiceStatusForOrganization",
        "disableHealthServiceAccessForOrganization",
        "enableHealthServiceAccessForOrganization"
      ]
    },
    {
      "service": "healthlake",
      "className": "HealthLake",
      "operations": [
        "createFHIRDatastore",
        "deleteFHIRDatastore",
        "describeFHIRDatastore",
        "describeFHIRExportJob",
        "describeFHIRImportJob",
        "listFHIRDatastores",
        "listFHIRExportJobs",
        "listFHIRImportJobs",
        "listTagsForResource",
        "startFHIRExportJob",
        "startFHIRImportJob",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "iam",
      "className": "IAM",
      "operations": [
        "addClientIDToOpenIDConnectProvider",
        "addRoleToInstanceProfile",
        "addUserToGroup",
        "attachGroupPolicy",
        "attachRolePolicy",
        "attachUserPolicy",
        "changePassword",
        "createAccessKey",
        "createAccountAlias",
        "createGroup",
        "createInstanceProfile",
        "createLoginProfile",
        "createOpenIDConnectProvider",
        "createPolicy",
        "createPolicyVersion",
        "createRole",
        "createSAMLProvider",
        "createServiceLinkedRole",
        "createServiceSpecificCredential",
        "createUser",
        "createVirtualMFADevice",
        "deactivateMFADevice",
        "deleteAccessKey",
        "deleteAccountAlias",
        "deleteAccountPasswordPolicy",
        "deleteGroup",
        "deleteGroupPolicy",
        "deleteInstanceProfile",
        "deleteLoginProfile",
        "deleteOpenIDConnectProvider",
        "deletePolicy",
        "deletePolicyVersion",
        "deleteRole",
        "deleteRolePermissionsBoundary",
        "deleteRolePolicy",
        "deleteSAMLProvider",
        "deleteServerCertificate",
        "deleteServiceLinkedRole",
        "deleteServiceSpecificCredential",
        "deleteSigningCertificate",
        "deleteSSHPublicKey",
        "deleteUser",
        "deleteUserPermissionsBoundary",
        "deleteUserPolicy",
        "deleteVirtualMFADevice",
        "detachGroupPolicy",
        "detachRolePolicy",
        "detachUserPolicy",
        "disableOrganizationsRootCredentialsManagement",
        "disableOrganizationsRootSessions",
        "enableMFADevice",
        "enableOrganizationsRootCredentialsManagement",
        "enableOrganizationsRootSessions",
        "generateCredentialReport",
        "generateOrganizationsAccessReport",
        "generateServiceLastAccessedDetails",
        "getAccessKeyLastUsed",
        "getAccountAuthorizationDetails",
        "getAccountPasswordPolicy",
        "getAccountSummary",
        "getContextKeysForCustomPolicy",
        "getContextKeysForPrincipalPolicy",
        "getCredentialReport",
        "getGroup",
        "getGroupPolicy",
        "getInstanceProfile",
        "getLoginProfile",
        "getMFADevice",
        "getOpenIDConnectProvider",
        "getOrganizationsAccessReport",
        "getPolicy",
        "getPolicyVersion",
        "getRole",
        "getRolePolicy",
        "getSAMLProvider",
        "getServerCertificate",
        "getServiceLastAccessedDetails",
        "getServiceLastAccessedDetailsWithEntities",
        "getServiceLinkedRoleDeletionStatus",
        "getSSHPublicKey",
        "getUser",
        "getUserPolicy",
        "listAccessKeys",
        "listAccountAliases",
        "listAttachedGroupPolicies",
        "listAttachedRolePolicies",
        "listAttachedUserPolicies",
        "listEntitiesForPolicy",
        "listGroupPolicies",
        "listGroups",
        "listGroupsForUser",
        "listInstanceProfiles",
        "listInstanceProfilesForRole",
        "listInstanceProfileTags",
        "listMFADevices",
        "listMFADeviceTags",
        "listOpenIDConnectProviders",
        "listOpenIDConnectProviderTags",
        "listOrganizationsFeatures",
        "listPolicies",
        "listPoliciesGrantingServiceAccess",
        "listPolicyTags",
        "listPolicyVersions",
        "listRolePolicies",
        "listRoles",
        "listRoleTags",
        "listSAMLProviders",
        "listSAMLProviderTags",
        "listServerCertificates",
        "listServerCertificateTags",
        "listServiceSpecificCredentials",
        "listSigningCertificates",
        "listSSHPublicKeys",
        "listUserPolicies",
        "listUsers",
        "listUserTags",
        "listVirtualMFADevices",
        "putGroupPolicy",
        "putRolePermissionsBoundary",
        "putRolePolicy",
        "putUserPermissionsBoundary",
        "putUserPolicy",
        "removeClientIDFromOpenIDConnectProvider",
        "removeRoleFromInstanceProfile",
        "removeUserFromGroup",
        "resetServiceSpecificCredential",
        "resyncMFADevice",
        "setDefaultPolicyVersion",
        "setSecurityTokenServicePreferences",
        "simulateCustomPolicy",
        "simulatePrincipalPolicy",
        "tagInstanceProfile",
        "tagMFADevice",
        "tagOpenIDConnectProvider",
        "tagPolicy",
        "tagRole",
        "tagSAMLProvider",
        "tagServerCertificate",
        "tagUser",
        "untagInstanceProfile",
        "untagMFADevice",
        "untagOpenIDConnectProvider",
        "untagPolicy",
        "untagRole",
        "untagSAMLProvider",
        "untagServerCertificate",
        "untagUser",
        "updateAccessKey",
        "updateAccountPasswordPolicy",
        "updateAssumeRolePolicy",
        "updateGroup",
        "updateLoginProfile",
        "updateOpenIDConnectProviderThumbprint",
        "updateRole",
        "updateRoleDescription",
        "updateSAMLProvider",
        "updateServerCertificate",
        "updateServiceSpecificCredential",
        "updateSigningCertificate",
        "updateSSHPublicKey",
        "updateUser",
        "uploadServerCertificate",
        "uploadSigningCertificate",
        "uploadSSHPublicKey"
      ]
    },
    {
      "service": "identitystore",
      "className": "identitystore",
      "operations": [
        "getGroupId",
        "getGroupMembershipId",
        "getUserId",
        "isMemberInGroups",
        "listGroupMembershipsForMember",
        "createGroup",
        "createGroupMembership",
        "createUser",
        "deleteGroup",
        "deleteGroupMembership",
        "deleteUser",
        "describeGroup",
        "describeGroupMembership",
        "describeUser",
        "listGroupMemberships",
        "listGroups",
        "listUsers",
        "updateGroup",
        "updateUser"
      ]
    },
    {
      "service": "imagebuilder",
      "className": "imagebuilder",
      "operations": [
        "cancelImageCreation",
        "cancelLifecycleExecution",
        "createComponent",
        "createContainerRecipe",
        "createDistributionConfiguration",
        "createImage",
        "createImagePipeline",
        "createImageRecipe",
        "createInfrastructureConfiguration",
        "createLifecyclePolicy",
        "createWorkflow",
        "deleteComponent",
        "deleteContainerRecipe",
        "deleteDistributionConfiguration",
        "deleteImage",
        "deleteImagePipeline",
        "deleteImageRecipe",
        "deleteInfrastructureConfiguration",
        "deleteLifecyclePolicy",
        "deleteWorkflow",
        "getComponent",
        "getComponentPolicy",
        "getContainerRecipe",
        "getContainerRecipePolicy",
        "getDistributionConfiguration",
        "getImage",
        "getImagePipeline",
        "getImagePolicy",
        "getImageRecipe",
        "getImageRecipePolicy",
        "getInfrastructureConfiguration",
        "getLifecycleExecution",
        "getLifecyclePolicy",
        "getMarketplaceResource",
        "getWorkflow",
        "getWorkflowExecution",
        "getWorkflowStepExecution",
        "importComponent",
        "importDiskImage",
        "importVmImage",
        "listComponentBuildVersions",
        "listComponents",
        "listContainerRecipes",
        "listDistributionConfigurations",
        "listImageBuildVersions",
        "listImagePackages",
        "listImagePipelineImages",
        "listImagePipelines",
        "listImageRecipes",
        "listImages",
        "listImageScanFindingAggregations",
        "listImageScanFindings",
        "listInfrastructureConfigurations",
        "listLifecycleExecutionResources",
        "listLifecycleExecutions",
        "listLifecyclePolicies",
        "listTagsForResource",
        "listWaitingWorkflowSteps",
        "listWorkflowBuildVersions",
        "listWorkflowExecutions",
        "listWorkflows",
        "listWorkflowStepExecutions",
        "putComponentPolicy",
        "putContainerRecipePolicy",
        "putImagePolicy",
        "putImageRecipePolicy",
        "sendWorkflowStepAction",
        "startImagePipelineExecution",
        "startResourceStateUpdate",
        "tagResource",
        "untagResource",
        "updateDistributionConfiguration",
        "updateImagePipeline",
        "updateInfrastructureConfiguration",
        "updateLifecyclePolicy"
      ]
    },
    {
      "service": "inspector",
      "className": "Inspector",
      "operations": [
        "addAttributesToFindings",
        "createAssessmentTarget",
        "createAssessmentTemplate",
        "createExclusionsPreview",
        "createResourceGroup",
        "deleteAssessmentRun",
        "deleteAssessmentTarget",
        "deleteAssessmentTemplate",
        "describeAssessmentRuns",
        "describeAssessmentTargets",
        "describeAssessmentTemplates",
        "describeCrossAccountAccessRole",
        "describeExclusions",
        "describeFindings",
        "describeResourceGroups",
        "describeRulesPackages",
        "getAssessmentReport",
        "getExclusionsPreview",
        "getTelemetryMetadata",
        "listAssessmentRunAgents",
        "listAssessmentRuns",
        "listAssessmentTargets",
        "listAssessmentTemplates",
        "listEventSubscriptions",
        "listExclusions",
        "listFindings",
        "listRulesPackages",
        "listTagsForResource",
        "previewAgents",
        "registerCrossAccountAccessRole",
        "removeAttributesFromFindings",
        "setTagsForResource",
        "startAssessmentRun",
        "stopAssessmentRun",
        "subscribeToEvent",
        "unsubscribeFromEvent",
        "updateAssessmentTarget"
      ]
    },
    {
      "service": "inspector-scan",
      "className": "InspectorScan",
      "operations": [
        "scanSbom"
      ]
    },
    {
      "service": "inspector2",
      "className": "Inspector2",
      "operations": [
        "associateMember",
        "batchAssociateCodeSecurityScanConfiguration",
        "batchDisassociateCodeSecurityScanConfiguration",
        "batchGetAccountStatus",
        "batchGetCodeSnippet",
        "batchGetFindingDetails",
        "batchGetFreeTrialInfo",
        "batchGetMemberEc2DeepInspectionStatus",
        "batchUpdateMemberEc2DeepInspectionStatus",
        "cancelFindingsReport",
        "cancelSbomExport",
        "createCisScanConfiguration",
        "createCodeSecurityIntegration",
        "createCodeSecurityScanConfiguration",
        "createFilter",
        "createFindingsReport",
        "createSbomExport",
        "deleteCisScanConfiguration",
        "deleteCodeSecurityIntegration",
        "deleteCodeSecurityScanConfiguration",
        "deleteFilter",
        "describeOrganizationConfiguration",
        "disable",
        "disableDelegatedAdminAccount",
        "disassociateMember",
        "enable",
        "enableDelegatedAdminAccount",
        "getCisScanReport",
        "getCisScanResultDetails",
        "getClustersForImage",
        "getCodeSecurityIntegration",
        "getCodeSecurityScan",
        "getCodeSecurityScanConfiguration",
        "getConfiguration",
        "getDelegatedAdminAccount",
        "getEc2DeepInspectionConfiguration",
        "getEncryptionKey",
        "getFindingsReportStatus",
        "getMember",
        "getSbomExport",
        "listAccountPermissions",
        "listCisScanConfigurations",
        "listCisScanResultsAggregatedByChecks",
        "listCisScanResultsAggregatedByTargetResource",
        "listCisScans",
        "listCodeSecurityIntegrations",
        "listCodeSecurityScanConfigurationAssociations",
        "listCodeSecurityScanConfigurations",
        "listCoverage",
        "listCoverageStatistics",
        "listDelegatedAdminAccounts",
        "listFilters",
        "listFindingAggregations",
        "listFindings",
        "listMembers",
        "listTagsForResource",
        "listUsageTotals",
        "resetEncryptionKey",
        "searchVulnerabilities",
        "sendCisSessionHealth",
        "sendCisSessionTelemetry",
        "startCisSession",
        "startCodeSecurityScan",
        "stopCisSession",
        "tagResource",
        "untagResource",
        "updateCisScanConfiguration",
        "updateCodeSecurityIntegration",
        "updateCodeSecurityScanConfiguration",
        "updateConfiguration",
        "updateEc2DeepInspectionConfiguration",
        "updateEncryptionKey",
        "updateFilter",
        "updateOrganizationConfiguration",
        "updateOrgEc2DeepInspectionConfiguration"
      ]
    },
    {
      "service": "internetmonitor",
      "className": "InternetMonitor",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "createMonitor",
        "deleteMonitor",
        "getHealthEvent",
        "getInternetEvent",
        "getMonitor",
        "getQueryResults",
        "getQueryStatus",
        "listHealthEvents",
        "listInternetEvents",
        "listMonitors",
        "startQuery",
        "stopQuery",
        "updateMonitor"
      ]
    },
    {
      "service": "invoicing",
      "className": "Invoicing",
      "operations": [
        "batchGetInvoiceProfile",
        "createInvoiceUnit",
        "deleteInvoiceUnit",
        "getInvoiceUnit",
        "listInvoiceSummaries",
        "listInvoiceUnits",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "updateInvoiceUnit"
      ]
    },
    {
      "service": "iot",
      "className": "IoT",
      "operations": [
        "acceptCertificateTransfer",
        "addThingToBillingGroup",
        "addThingToThingGroup",
        "associateSbomWithPackageVersion",
        "associateTargetsWithJob",
        "attachPolicy",
        "attachPrincipalPolicy",
        "attachSecurityProfile",
        "attachThingPrincipal",
        "cancelAuditMitigationActionsTask",
        "cancelAuditTask",
        "cancelCertificateTransfer",
        "cancelDetectMitigationActionsTask",
        "cancelJob",
        "cancelJobExecution",
        "clearDefaultAuthorizer",
        "confirmTopicRuleDestination",
        "createAuditSuppression",
        "createAuthorizer",
        "createBillingGroup",
        "createCertificateFromCsr",
        "createCertificateProvider",
        "createCommand",
        "createCustomMetric",
        "createDimension",
        "createDomainConfiguration",
        "createDynamicThingGroup",
        "createFleetMetric",
        "createJob",
        "createJobTemplate",
        "createKeysAndCertificate",
        "createMitigationAction",
        "createOTAUpdate",
        "createPackage",
        "createPackageVersion",
        "createPolicy",
        "createPolicyVersion",
        "createProvisioningClaim",
        "createProvisioningTemplate",
        "createProvisioningTemplateVersion",
        "createRoleAlias",
        "createScheduledAudit",
        "createSecurityProfile",
        "createStream",
        "createThing",
        "createThingGroup",
        "createThingType",
        "createTopicRule",
        "createTopicRuleDestination",
        "deleteAccountAuditConfiguration",
        "deleteAuditSuppression",
        "deleteAuthorizer",
        "deleteBillingGroup",
        "deleteCACertificate",
        "deleteCertificate",
        "deleteCertificateProvider",
        "deleteCommand",
        "deleteCommandExecution",
        "deleteCustomMetric",
        "deleteDimension",
        "deleteDomainConfiguration",
        "deleteDynamicThingGroup",
        "deleteFleetMetric",
        "deleteJob",
        "deleteJobExecution",
        "deleteJobTemplate",
        "deleteMitigationAction",
        "deleteOTAUpdate",
        "deletePackage",
        "deletePackageVersion",
        "deletePolicy",
        "deletePolicyVersion",
        "deleteProvisioningTemplate",
        "deleteProvisioningTemplateVersion",
        "deleteRegistrationCode",
        "deleteRoleAlias",
        "deleteScheduledAudit",
        "deleteSecurityProfile",
        "deleteStream",
        "deleteThing",
        "deleteThingGroup",
        "deleteThingType",
        "deleteTopicRule",
        "deleteTopicRuleDestination",
        "deleteV2LoggingLevel",
        "deprecateThingType",
        "describeAccountAuditConfiguration",
        "describeAuditFinding",
        "describeAuditMitigationActionsTask",
        "describeAuditSuppression",
        "describeAuditTask",
        "describeAuthorizer",
        "describeBillingGroup",
        "describeCACertificate",
        "describeCertificate",
        "describeCertificateProvider",
        "describeCustomMetric",
        "describeDefaultAuthorizer",
        "describeDetectMitigationActionsTask",
        "describeDimension",
        "describeDomainConfiguration",
        "describeEncryptionConfiguration",
        "describeEndpoint",
        "describeEventConfigurations",
        "describeFleetMetric",
        "describeIndex",
        "describeJob",
        "describeJobExecution",
        "describeJobTemplate",
        "describeManagedJobTemplate",
        "describeMitigationAction",
        "describeProvisioningTemplate",
        "describeProvisioningTemplateVersion",
        "describeRoleAlias",
        "describeScheduledAudit",
        "describeSecurityProfile",
        "describeStream",
        "describeThing",
        "describeThingGroup",
        "describeThingRegistrationTask",
        "describeThingType",
        "detachPolicy",
        "detachPrincipalPolicy",
        "detachSecurityProfile",
        "detachThingPrincipal",
        "disableTopicRule",
        "disassociateSbomFromPackageVersion",
        "enableTopicRule",
        "getBehaviorModelTrainingSummaries",
        "getBucketsAggregation",
        "getCardinality",
        "getCommand",
        "getCommandExecution",
        "getEffectivePolicies",
        "getIndexingConfiguration",
        "getJobDocument",
        "getLoggingOptions",
        "getOTAUpdate",
        "getPackage",
        "getPackageConfiguration",
        "getPackageVersion",
        "getPercentiles",
        "getPolicy",
        "getPolicyVersion",
        "getRegistrationCode",
        "getStatistics",
        "getThingConnectivityData",
        "getTopicRule",
        "getTopicRuleDestination",
        "getV2LoggingOptions",
        "listActiveViolations",
        "listAttachedPolicies",
        "listAuditFindings",
        "listAuditMitigationActionsExecutions",
        "listAuditMitigationActionsTasks",
        "listAuditSuppressions",
        "listAuditTasks",
        "listAuthorizers",
        "listBillingGroups",
        "listCACertificates",
        "listCertificateProviders",
        "listCertificates",
        "listCertificatesByCA",
        "listCommandExecutions",
        "listCommands",
        "listCustomMetrics",
        "listDetectMitigationActionsExecutions",
        "listDetectMitigationActionsTasks",
        "listDimensions",
        "listDomainConfigurations",
        "listFleetMetrics",
        "listIndices",
        "listJobExecutionsForJob",
        "listJobExecutionsForThing",
        "listJobs",
        "listJobTemplates",
        "listManagedJobTemplates",
        "listMetricValues",
        "listMitigationActions",
        "listOTAUpdates",
        "listOutgoingCertificates",
        "listPackages",
        "listPackageVersions",
        "listPolicies",
        "listPolicyPrincipals",
        "listPolicyVersions",
        "listPrincipalPolicies",
        "listPrincipalThings",
        "listPrincipalThingsV2",
        "listProvisioningTemplates",
        "listProvisioningTemplateVersions",
        "listRelatedResourcesForAuditFinding",
        "listRoleAliases",
        "listSbomValidationResults",
        "listScheduledAudits",
        "listSecurityProfiles",
        "listSecurityProfilesForTarget",
        "listStreams",
        "listTagsForResource",
        "listTargetsForPolicy",
        "listTargetsForSecurityProfile",
        "listThingGroups",
        "listThingGroupsForThing",
        "listThingPrincipals",
        "listThingPrincipalsV2",
        "listThingRegistrationTaskReports",
        "listThingRegistrationTasks",
        "listThings",
        "listThingsInBillingGroup",
        "listThingsInThingGroup",
        "listThingTypes",
        "listTopicRuleDestinations",
        "listTopicRules",
        "listV2LoggingLevels",
        "listViolationEvents",
        "putVerificationStateOnViolation",
        "registerCACertificate",
        "registerCertificate",
        "registerCertificateWithoutCA",
        "registerThing",
        "rejectCertificateTransfer",
        "removeThingFromBillingGroup",
        "removeThingFromThingGroup",
        "replaceTopicRule",
        "searchIndex",
        "setDefaultAuthorizer",
        "setDefaultPolicyVersion",
        "setLoggingOptions",
        "setV2LoggingLevel",
        "setV2LoggingOptions",
        "startAuditMitigationActionsTask",
        "startDetectMitigationActionsTask",
        "startOnDemandAuditTask",
        "startThingRegistrationTask",
        "stopThingRegistrationTask",
        "tagResource",
        "testAuthorization",
        "testInvokeAuthorizer",
        "transferCertificate",
        "untagResource",
        "updateAccountAuditConfiguration",
        "updateAuditSuppression",
        "updateAuthorizer",
        "updateBillingGroup",
        "updateCACertificate",
        "updateCertificate",
        "updateCertificateProvider",
        "updateCommand",
        "updateCustomMetric",
        "updateDimension",
        "updateDomainConfiguration",
        "updateDynamicThingGroup",
        "updateEncryptionConfiguration",
        "updateEventConfigurations",
        "updateFleetMetric",
        "updateIndexingConfiguration",
        "updateJob",
        "updateMitigationAction",
        "updatePackage",
        "updatePackageConfiguration",
        "updatePackageVersion",
        "updateProvisioningTemplate",
        "updateRoleAlias",
        "updateScheduledAudit",
        "updateSecurityProfile",
        "updateStream",
        "updateThing",
        "updateThingGroup",
        "updateThingGroupsForThing",
        "updateThingType",
        "updateTopicRuleDestination",
        "validateSecurityProfileBehaviors"
      ]
    },
    {
      "service": "iot-data-plane",
      "className": "IoTDataPlane",
      "operations": [
        "deleteThingShadow",
        "getRetainedMessage",
        "getThingShadow",
        "listNamedShadowsForThing",
        "listRetainedMessages",
        "publish",
        "updateThingShadow"
      ]
    },
    {
      "service": "iot-events",
      "className": "IoTEvents",
      "operations": [
        "createAlarmModel",
        "createDetectorModel",
        "createInput",
        "deleteAlarmModel",
        "deleteDetectorModel",
        "deleteInput",
        "describeAlarmModel",
        "describeDetectorModel",
        "describeDetectorModelAnalysis",
        "describeInput",
        "describeLoggingOptions",
        "getDetectorModelAnalysisResults",
        "listAlarmModels",
        "listAlarmModelVersions",
        "listDetectorModels",
        "listDetectorModelVersions",
        "listInputRoutings",
        "listInputs",
        "listTagsForResource",
        "putLoggingOptions",
        "startDetectorModelAnalysis",
        "tagResource",
        "untagResource",
        "updateAlarmModel",
        "updateDetectorModel",
        "updateInput"
      ]
    },
    {
      "service": "iot-events-data",
      "className": "IoTEventsData",
      "operations": [
        "batchAcknowledgeAlarm",
        "batchDeleteDetector",
        "batchDisableAlarm",
        "batchEnableAlarm",
        "batchPutMessage",
        "batchResetAlarm",
        "batchSnoozeAlarm",
        "batchUpdateDetector",
        "describeAlarm",
        "describeDetector",
        "listAlarms",
        "listDetectors"
      ]
    },
    {
      "service": "iot-jobs-data-plane",
      "className": "IoTJobsDataPlane",
      "operations": [
        "describeJobExecution",
        "getPendingJobExecutions",
        "startCommandExecution",
        "startNextPendingJobExecution",
        "updateJobExecution"
      ]
    },
    {
      "service": "iot-managed-integrations",
      "className": "IoTManagedIntegrations",
      "operations": [
        "getCustomEndpoint",
        "listTagsForResource",
        "registerCustomEndpoint",
        "sendConnectorEvent",
        "tagResource",
        "untagResource",
        "createAccountAssociation",
        "createCloudConnector",
        "createConnectorDestination",
        "createCredentialLocker",
        "createDestination",
        "createEventLogConfiguration",
        "createManagedThing",
        "createNotificationConfiguration",
        "createOtaTask",
        "createOtaTaskConfiguration",
        "createProvisioningProfile",
        "deleteAccountAssociation",
        "deleteCloudConnector",
        "deleteConnectorDestination",
        "deleteCredentialLocker",
        "deleteDestination",
        "deleteEventLogConfiguration",
        "deleteManagedThing",
        "deleteNotificationConfiguration",
        "deleteOtaTask",
        "deleteOtaTaskConfiguration",
        "deleteProvisioningProfile",
        "deregisterAccountAssociation",
        "getAccountAssociation",
        "getCloudConnector",
        "getConnectorDestination",
        "getCredentialLocker",
        "getDefaultEncryptionConfiguration",
        "getDestination",
        "getDeviceDiscovery",
        "getEventLogConfiguration",
        "getHubConfiguration",
        "getManagedThing",
        "getManagedThingCapabilities",
        "getManagedThingConnectivityData",
        "getManagedThingMetaData",
        "getManagedThingState",
        "getNotificationConfiguration",
        "getOtaTask",
        "getOtaTaskConfiguration",
        "getProvisioningProfile",
        "getRuntimeLogConfiguration",
        "getSchemaVersion",
        "listAccountAssociations",
        "listCloudConnectors",
        "listConnectorDestinations",
        "listCredentialLockers",
        "listDestinations",
        "listDeviceDiscoveries",
        "listDiscoveredDevices",
        "listEventLogConfigurations",
        "listManagedThingAccountAssociations",
        "listManagedThingSchemas",
        "listManagedThings",
        "listNotificationConfigurations",
        "listOtaTaskConfigurations",
        "listOtaTaskExecutions",
        "listOtaTasks",
        "listProvisioningProfiles",
        "listSchemaVersions",
        "putDefaultEncryptionConfiguration",
        "putHubConfiguration",
        "putRuntimeLogConfiguration",
        "registerAccountAssociation",
        "resetRuntimeLogConfiguration",
        "sendManagedThingCommand",
        "startAccountAssociationRefresh",
        "startDeviceDiscovery",
        "updateAccountAssociation",
        "updateCloudConnector",
        "updateConnectorDestination",
        "updateDestination",
        "updateEventLogConfiguration",
        "updateManagedThing",
        "updateNotificationConfiguration",
        "updateOtaTask"
      ]
    },
    {
      "service": "iot-wireless",
      "className": "IoTWireless",
      "operations": [
        "associateAwsAccountWithPartnerAccount",
        "associateMulticastGroupWithFuotaTask",
        "associateWirelessDeviceWithFuotaTask",
        "associateWirelessDeviceWithMulticastGroup",
        "associateWirelessDeviceWithThing",
        "associateWirelessGatewayWithCertificate",
        "associateWirelessGatewayWithThing",
        "cancelMulticastGroupSession",
        "createDestination",
        "createDeviceProfile",
        "createFuotaTask",
        "createMulticastGroup",
        "createNetworkAnalyzerConfiguration",
        "createServiceProfile",
        "createWirelessDevice",
        "createWirelessGateway",
        "createWirelessGatewayTask",
        "createWirelessGatewayTaskDefinition",
        "deleteDestination",
        "deleteDeviceProfile",
        "deleteFuotaTask",
        "deleteMulticastGroup",
        "deleteNetworkAnalyzerConfiguration",
        "deleteQueuedMessages",
        "deleteServiceProfile",
        "deleteWirelessDevice",
        "deleteWirelessDeviceImportTask",
        "deleteWirelessGateway",
        "deleteWirelessGatewayTask",
        "deleteWirelessGatewayTaskDefinition",
        "deregisterWirelessDevice",
        "disassociateAwsAccountFromPartnerAccount",
        "disassociateMulticastGroupFromFuotaTask",
        "disassociateWirelessDeviceFromFuotaTask",
        "disassociateWirelessDeviceFromMulticastGroup",
        "disassociateWirelessDeviceFromThing",
        "disassociateWirelessGatewayFromCertificate",
        "disassociateWirelessGatewayFromThing",
        "getDestination",
        "getDeviceProfile",
        "getEventConfigurationByResourceTypes",
        "getFuotaTask",
        "getLogLevelsByResourceTypes",
        "getMetricConfiguration",
        "getMetrics",
        "getMulticastGroup",
        "getMulticastGroupSession",
        "getNetworkAnalyzerConfiguration",
        "getPartnerAccount",
        "getPosition",
        "getPositionConfiguration",
        "getPositionEstimate",
        "getResourceEventConfiguration",
        "getResourceLogLevel",
        "getResourcePosition",
        "getServiceEndpoint",
        "getServiceProfile",
        "getWirelessDevice",
        "getWirelessDeviceImportTask",
        "getWirelessDeviceStatistics",
        "getWirelessGateway",
        "getWirelessGatewayCertificate",
        "getWirelessGatewayFirmwareInformation",
        "getWirelessGatewayStatistics",
        "getWirelessGatewayTask",
        "getWirelessGatewayTaskDefinition",
        "listDestinations",
        "listDeviceProfiles",
        "listDevicesForWirelessDeviceImportTask",
        "listEventConfigurations",
        "listFuotaTasks",
        "listMulticastGroups",
        "listMulticastGroupsByFuotaTask",
        "listNetworkAnalyzerConfigurations",
        "listPartnerAccounts",
        "listPositionConfigurations",
        "listQueuedMessages",
        "listServiceProfiles",
        "listTagsForResource",
        "listWirelessDeviceImportTasks",
        "listWirelessDevices",
        "listWirelessGateways",
        "listWirelessGatewayTaskDefinitions",
        "putPositionConfiguration",
        "putResourceLogLevel",
        "resetAllResourceLogLevels",
        "resetResourceLogLevel",
        "sendDataToMulticastGroup",
        "sendDataToWirelessDevice",
        "startBulkAssociateWirelessDeviceWithMulticastGroup",
        "startBulkDisassociateWirelessDeviceFromMulticastGroup",
        "startFuotaTask",
        "startMulticastGroupSession",
        "startSingleWirelessDeviceImportTask",
        "startWirelessDeviceImportTask",
        "tagResource",
        "testWirelessDevice",
        "untagResource",
        "updateDestination",
        "updateEventConfigurationByResourceTypes",
        "updateFuotaTask",
        "updateLogLevelsByResourceTypes",
        "updateMetricConfiguration",
        "updateMulticastGroup",
        "updateNetworkAnalyzerConfiguration",
        "updatePartnerAccount",
        "updatePosition",
        "updateResourceEventConfiguration",
        "updateResourcePosition",
        "updateWirelessDevice",
        "updateWirelessDeviceImportTask",
        "updateWirelessGateway"
      ]
    },
    {
      "service": "iotanalytics",
      "className": "IoTAnalytics",
      "operations": [
        "batchPutMessage",
        "cancelPipelineReprocessing",
        "createChannel",
        "createDataset",
        "createDatasetContent",
        "createDatastore",
        "createPipeline",
        "deleteChannel",
        "deleteDataset",
        "deleteDatasetContent",
        "deleteDatastore",
        "deletePipeline",
        "describeChannel",
        "describeDataset",
        "describeDatastore",
        "describeLoggingOptions",
        "describePipeline",
        "getDatasetContent",
        "listChannels",
        "listDatasetContents",
        "listDatasets",
        "listDatastores",
        "listPipelines",
        "listTagsForResource",
        "putLoggingOptions",
        "runPipelineActivity",
        "sampleChannelData",
        "startPipelineReprocessing",
        "tagResource",
        "untagResource",
        "updateChannel",
        "updateDataset",
        "updateDatastore",
        "updatePipeline"
      ]
    },
    {
      "service": "iotdeviceadvisor",
      "className": "IotDeviceAdvisor",
      "operations": [
        "createSuiteDefinition",
        "deleteSuiteDefinition",
        "getEndpoint",
        "getSuiteDefinition",
        "getSuiteRun",
        "getSuiteRunReport",
        "listSuiteDefinitions",
        "listSuiteRuns",
        "listTagsForResource",
        "startSuiteRun",
        "stopSuiteRun",
        "tagResource",
        "untagResource",
        "updateSuiteDefinition"
      ]
    },
    {
      "service": "iotfleethub",
      "className": "IoTFleetHub",
      "operations": [
        "createApplication",
        "deleteApplication",
        "describeApplication",
        "listApplications",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "updateApplication"
      ]
    },
    {
      "service": "iotfleetwise",
      "className": "IoTFleetWise",
      "operations": [
        "batchCreateVehicle",
        "batchUpdateVehicle",
        "getEncryptionConfiguration",
        "getLoggingOptions",
        "getRegisterAccountStatus",
        "getVehicleStatus",
        "listTagsForResource",
        "putEncryptionConfiguration",
        "putLoggingOptions",
        "registerAccount",
        "tagResource",
        "untagResource",
        "associateVehicleFleet",
        "createCampaign",
        "createDecoderManifest",
        "createFleet",
        "createModelManifest",
        "createSignalCatalog",
        "createStateTemplate",
        "createVehicle",
        "deleteCampaign",
        "deleteDecoderManifest",
        "deleteFleet",
        "deleteModelManifest",
        "deleteSignalCatalog",
        "deleteStateTemplate",
        "deleteVehicle",
        "disassociateVehicleFleet",
        "getCampaign",
        "getDecoderManifest",
        "getFleet",
        "getModelManifest",
        "getSignalCatalog",
        "getStateTemplate",
        "getVehicle",
        "importDecoderManifest",
        "importSignalCatalog",
        "listCampaigns",
        "listDecoderManifestNetworkInterfaces",
        "listDecoderManifestSignals",
        "listDecoderManifests",
        "listFleets",
        "listFleetsForVehicle",
        "listModelManifestNodes",
        "listModelManifests",
        "listSignalCatalogNodes",
        "listSignalCatalogs",
        "listStateTemplates",
        "listVehicles",
        "listVehiclesInFleet",
        "updateCampaign",
        "updateDecoderManifest",
        "updateFleet",
        "updateModelManifest",
        "updateSignalCatalog",
        "updateStateTemplate",
        "updateVehicle"
      ]
    },
    {
      "service": "iotsecuretunneling",
      "className": "IoTSecureTunneling",
      "operations": [
        "closeTunnel",
        "describeTunnel",
        "listTagsForResource",
        "listTunnels",
        "openTunnel",
        "rotateTunnelAccessToken",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "iotsitewise",
      "className": "IoTSiteWise",
      "operations": [
        "associateAssets",
        "associateTimeSeriesToAssetProperty",
        "batchAssociateProjectAssets",
        "batchDisassociateProjectAssets",
        "batchGetAssetPropertyAggregates",
        "batchGetAssetPropertyValue",
        "batchGetAssetPropertyValueHistory",
        "batchPutAssetPropertyValue",
        "createAccessPolicy",
        "createAsset",
        "createAssetModel",
        "createAssetModelCompositeModel",
        "createBulkImportJob",
        "createComputationModel",
        "createDashboard",
        "createDataset",
        "createGateway",
        "createPortal",
        "createProject",
        "deleteAccessPolicy",
        "deleteAsset",
        "deleteAssetModel",
        "deleteAssetModelCompositeModel",
        "deleteComputationModel",
        "deleteDashboard",
        "deleteDataset",
        "deleteGateway",
        "deletePortal",
        "deleteProject",
        "deleteTimeSeries",
        "describeAccessPolicy",
        "describeAction",
        "describeAsset",
        "describeAssetCompositeModel",
        "describeAssetModel",
        "describeAssetModelCompositeModel",
        "describeAssetProperty",
        "describeBulkImportJob",
        "describeComputationModel",
        "describeComputationModelExecutionSummary",
        "describeDashboard",
        "describeDataset",
        "describeDefaultEncryptionConfiguration",
        "describeExecution",
        "describeGateway",
        "describeGatewayCapabilityConfiguration",
        "describeLoggingOptions",
        "describePortal",
        "describeProject",
        "describeStorageConfiguration",
        "describeTimeSeries",
        "disassociateAssets",
        "disassociateTimeSeriesFromAssetProperty",
        "executeAction",
        "executeQuery",
        "getAssetPropertyAggregates",
        "getAssetPropertyValue",
        "getAssetPropertyValueHistory",
        "getInterpolatedAssetPropertyValues",
        "invokeAssistant",
        "listAccessPolicies",
        "listActions",
        "listAssetModelCompositeModels",
        "listAssetModelProperties",
        "listAssetModels",
        "listAssetProperties",
        "listAssetRelationships",
        "listAssets",
        "listAssociatedAssets",
        "listBulkImportJobs",
        "listCompositionRelationships",
        "listComputationModelDataBindingUsages",
        "listComputationModelResolveToResources",
        "listComputationModels",
        "listDashboards",
        "listDatasets",
        "listExecutions",
        "listGateways",
        "listPortals",
        "listProjectAssets",
        "listProjects",
        "listTagsForResource",
        "listTimeSeries",
        "putDefaultEncryptionConfiguration",
        "putLoggingOptions",
        "putStorageConfiguration",
        "tagResource",
        "untagResource",
        "updateAccessPolicy",
        "updateAsset",
        "updateAssetModel",
        "updateAssetModelCompositeModel",
        "updateAssetProperty",
        "updateComputationModel",
        "updateDashboard",
        "updateDataset",
        "updateGateway",
        "updateGatewayCapabilityConfiguration",
        "updatePortal",
        "updateProject"
      ]
    },
    {
      "service": "iotthingsgraph",
      "className": "IoTThingsGraph",
      "operations": [
        "associateEntityToThing",
        "createFlowTemplate",
        "createSystemInstance",
        "createSystemTemplate",
        "deleteFlowTemplate",
        "deleteNamespace",
        "deleteSystemInstance",
        "deleteSystemTemplate",
        "deploySystemInstance",
        "deprecateFlowTemplate",
        "deprecateSystemTemplate",
        "describeNamespace",
        "dissociateEntityFromThing",
        "getEntities",
        "getFlowTemplate",
        "getFlowTemplateRevisions",
        "getNamespaceDeletionStatus",
        "getSystemInstance",
        "getSystemTemplate",
        "getSystemTemplateRevisions",
        "getUploadStatus",
        "listFlowExecutionMessages",
        "listTagsForResource",
        "searchEntities",
        "searchFlowExecutions",
        "searchFlowTemplates",
        "searchSystemInstances",
        "searchSystemTemplates",
        "searchThings",
        "tagResource",
        "undeploySystemInstance",
        "untagResource",
        "updateFlowTemplate",
        "updateSystemTemplate",
        "uploadEntityDefinitions"
      ]
    },
    {
      "service": "iottwinmaker",
      "className": "IoTTwinMaker",
      "operations": [
        "batchPutPropertyValues",
        "cancelMetadataTransferJob",
        "createComponentType",
        "createEntity",
        "createMetadataTransferJob",
        "createScene",
        "createSyncJob",
        "createWorkspace",
        "deleteComponentType",
        "deleteEntity",
        "deleteScene",
        "deleteSyncJob",
        "deleteWorkspace",
        "executeQuery",
        "getComponentType",
        "getEntity",
        "getMetadataTransferJob",
        "getPricingPlan",
        "getPropertyValue",
        "getPropertyValueHistory",
        "getScene",
        "getSyncJob",
        "getWorkspace",
        "listComponents",
        "listComponentTypes",
        "listEntities",
        "listMetadataTransferJobs",
        "listProperties",
        "listScenes",
        "listSyncJobs",
        "listSyncResources",
        "listTagsForResource",
        "listWorkspaces",
        "tagResource",
        "untagResource",
        "updateComponentType",
        "updateEntity",
        "updatePricingPlan",
        "updateScene",
        "updateWorkspace"
      ]
    },
    {
      "service": "ivs",
      "className": "ivs",
      "operations": [
        "batchGetChannel",
        "batchGetStreamKey",
        "batchStartViewerSessionRevocation",
        "createChannel",
        "createPlaybackRestrictionPolicy",
        "createRecordingConfiguration",
        "createStreamKey",
        "deleteChannel",
        "deletePlaybackKeyPair",
        "deletePlaybackRestrictionPolicy",
        "deleteRecordingConfiguration",
        "deleteStreamKey",
        "getChannel",
        "getPlaybackKeyPair",
        "getPlaybackRestrictionPolicy",
        "getRecordingConfiguration",
        "getStream",
        "getStreamKey",
        "getStreamSession",
        "importPlaybackKeyPair",
        "listChannels",
        "listPlaybackKeyPairs",
        "listPlaybackRestrictionPolicies",
        "listRecordingConfigurations",
        "listStreamKeys",
        "listStreams",
        "listStreamSessions",
        "listTagsForResource",
        "putMetadata",
        "startViewerSessionRevocation",
        "stopStream",
        "tagResource",
        "untagResource",
        "updateChannel",
        "updatePlaybackRestrictionPolicy"
      ]
    },
    {
      "service": "ivs-realtime",
      "className": "IVSRealTime",
      "operations": [
        "createEncoderConfiguration",
        "createIngestConfiguration",
        "createParticipantToken",
        "createStage",
        "createStorageConfiguration",
        "deleteEncoderConfiguration",
        "deleteIngestConfiguration",
        "deletePublicKey",
        "deleteStage",
        "deleteStorageConfiguration",
        "disconnectParticipant",
        "getComposition",
        "getEncoderConfiguration",
        "getIngestConfiguration",
        "getParticipant",
        "getPublicKey",
        "getStage",
        "getStageSession",
        "getStorageConfiguration",
        "importPublicKey",
        "listCompositions",
        "listEncoderConfigurations",
        "listIngestConfigurations",
        "listParticipantEvents",
        "listParticipantReplicas",
        "listParticipants",
        "listPublicKeys",
        "listStages",
        "listStageSessions",
        "listStorageConfigurations",
        "listTagsForResource",
        "startComposition",
        "startParticipantReplication",
        "stopComposition",
        "stopParticipantReplication",
        "tagResource",
        "untagResource",
        "updateIngestConfiguration",
        "updateStage"
      ]
    },
    {
      "service": "ivschat",
      "className": "ivschat",
      "operations": [
        "createChatToken",
        "createLoggingConfiguration",
        "createRoom",
        "deleteLoggingConfiguration",
        "deleteMessage",
        "deleteRoom",
        "disconnectUser",
        "getLoggingConfiguration",
        "getRoom",
        "listLoggingConfigurations",
        "listRooms",
        "listTagsForResource",
        "sendEvent",
        "tagResource",
        "untagResource",
        "updateLoggingConfiguration",
        "updateRoom"
      ]
    },
    {
      "service": "kafka",
      "className": "Kafka",
      "operations": [
        "batchAssociateScramSecret",
        "batchDisassociateScramSecret",
        "createCluster",
        "createClusterV2",
        "createConfiguration",
        "createReplicator",
        "createVpcConnection",
        "deleteCluster",
        "deleteClusterPolicy",
        "deleteConfiguration",
        "deleteReplicator",
        "deleteVpcConnection",
        "describeCluster",
        "describeClusterOperation",
        "describeClusterOperationV2",
        "describeClusterV2",
        "describeConfiguration",
        "describeConfigurationRevision",
        "describeReplicator",
        "describeVpcConnection",
        "getBootstrapBrokers",
        "getClusterPolicy",
        "getCompatibleKafkaVersions",
        "listClientVpcConnections",
        "listClusterOperations",
        "listClusterOperationsV2",
        "listClusters",
        "listClustersV2",
        "listConfigurationRevisions",
        "listConfigurations",
        "listKafkaVersions",
        "listNodes",
        "listReplicators",
        "listScramSecrets",
        "listTagsForResource",
        "listVpcConnections",
        "putClusterPolicy",
        "rebootBroker",
        "rejectClientVpcConnection",
        "tagResource",
        "untagResource",
        "updateBrokerCount",
        "updateBrokerStorage",
        "updateBrokerType",
        "updateClusterConfiguration",
        "updateClusterKafkaVersion",
        "updateConfiguration",
        "updateConnectivity",
        "updateMonitoring",
        "updateReplicationInfo",
        "updateSecurity",
        "updateStorage"
      ]
    },
    {
      "service": "kafkaconnect",
      "className": "KafkaConnect",
      "operations": [
        "createConnector",
        "createCustomPlugin",
        "createWorkerConfiguration",
        "deleteConnector",
        "deleteCustomPlugin",
        "deleteWorkerConfiguration",
        "describeConnector",
        "describeConnectorOperation",
        "describeCustomPlugin",
        "describeWorkerConfiguration",
        "listConnectorOperations",
        "listConnectors",
        "listCustomPlugins",
        "listTagsForResource",
        "listWorkerConfigurations",
        "tagResource",
        "untagResource",
        "updateConnector"
      ]
    },
    {
      "service": "kendra",
      "className": "kendra",
      "operations": [
        "associateEntitiesToExperience",
        "associatePersonasToEntities",
        "batchDeleteDocument",
        "batchDeleteFeaturedResultsSet",
        "batchGetDocumentStatus",
        "batchPutDocument",
        "clearQuerySuggestions",
        "createAccessControlConfiguration",
        "createDataSource",
        "createExperience",
        "createFaq",
        "createFeaturedResultsSet",
        "createIndex",
        "createQuerySuggestionsBlockList",
        "createThesaurus",
        "deleteAccessControlConfiguration",
        "deleteDataSource",
        "deleteExperience",
        "deleteFaq",
        "deleteIndex",
        "deletePrincipalMapping",
        "deleteQuerySuggestionsBlockList",
        "deleteThesaurus",
        "describeAccessControlConfiguration",
        "describeDataSource",
        "describeExperience",
        "describeFaq",
        "describeFeaturedResultsSet",
        "describeIndex",
        "describePrincipalMapping",
        "describeQuerySuggestionsBlockList",
        "describeQuerySuggestionsConfig",
        "describeThesaurus",
        "disassociateEntitiesFromExperience",
        "disassociatePersonasFromEntities",
        "getQuerySuggestions",
        "getSnapshots",
        "listAccessControlConfigurations",
        "listDataSources",
        "listDataSourceSyncJobs",
        "listEntityPersonas",
        "listExperienceEntities",
        "listExperiences",
        "listFaqs",
        "listFeaturedResultsSets",
        "listGroupsOlderThanOrderingId",
        "listIndices",
        "listQuerySuggestionsBlockLists",
        "listTagsForResource",
        "listThesauri",
        "putPrincipalMapping",
        "query",
        "retrieve",
        "startDataSourceSyncJob",
        "stopDataSourceSyncJob",
        "submitFeedback",
        "tagResource",
        "untagResource",
        "updateAccessControlConfiguration",
        "updateDataSource",
        "updateExperience",
        "updateFeaturedResultsSet",
        "updateIndex",
        "updateQuerySuggestionsBlockList",
        "updateQuerySuggestionsConfig",
        "updateThesaurus"
      ]
    },
    {
      "service": "kendra-ranking",
      "className": "KendraRanking",
      "operations": [
        "createRescoreExecutionPlan",
        "deleteRescoreExecutionPlan",
        "describeRescoreExecutionPlan",
        "listRescoreExecutionPlans",
        "listTagsForResource",
        "rescore",
        "tagResource",
        "untagResource",
        "updateRescoreExecutionPlan"
      ]
    },
    {
      "service": "keyspaces",
      "className": "Keyspaces",
      "operations": [
        "createKeyspace",
        "createTable",
        "createType",
        "deleteKeyspace",
        "deleteTable",
        "deleteType",
        "getKeyspace",
        "getTable",
        "getTableAutoScalingSettings",
        "getType",
        "listKeyspaces",
        "listTables",
        "listTagsForResource",
        "listTypes",
        "restoreTable",
        "tagResource",
        "untagResource",
        "updateKeyspace",
        "updateTable"
      ]
    },
    {
      "service": "keyspacesstreams",
      "className": "KeyspacesStreams",
      "operations": [
        "getRecords",
        "getShardIterator",
        "getStream",
        "listStreams"
      ]
    },
    {
      "service": "kinesis",
      "className": "Kinesis",
      "operations": [
        "addTagsToStream",
        "createStream",
        "decreaseStreamRetentionPeriod",
        "deleteResourcePolicy",
        "deleteStream",
        "deregisterStreamConsumer",
        "describeLimits",
        "describeStream",
        "describeStreamConsumer",
        "describeStreamSummary",
        "disableEnhancedMonitoring",
        "enableEnhancedMonitoring",
        "getRecords",
        "getResourcePolicy",
        "getShardIterator",
        "increaseStreamRetentionPeriod",
        "listShards",
        "listStreamConsumers",
        "listStreams",
        "listTagsForResource",
        "listTagsForStream",
        "mergeShards",
        "putRecord",
        "putRecords",
        "putResourcePolicy",
        "registerStreamConsumer",
        "removeTagsFromStream",
        "splitShard",
        "startStreamEncryption",
        "stopStreamEncryption",
        "subscribeToShard",
        "tagResource",
        "untagResource",
        "updateShardCount",
        "updateStreamMode"
      ]
    },
    {
      "service": "kinesis-analytics",
      "className": "KinesisAnalytics",
      "operations": [
        "addApplicationCloudWatchLoggingOption",
        "addApplicationInput",
        "addApplicationInputProcessingConfiguration",
        "addApplicationOutput",
        "addApplicationReferenceDataSource",
        "createApplication",
        "deleteApplication",
        "deleteApplicationCloudWatchLoggingOption",
        "deleteApplicationInputProcessingConfiguration",
        "deleteApplicationOutput",
        "deleteApplicationReferenceDataSource",
        "describeApplication",
        "discoverInputSchema",
        "listApplications",
        "listTagsForResource",
        "startApplication",
        "stopApplication",
        "tagResource",
        "untagResource",
        "updateApplication"
      ]
    },
    {
      "service": "kinesis-analytics-v2",
      "className": "KinesisAnalyticsV2",
      "operations": [
        "addApplicationCloudWatchLoggingOption",
        "addApplicationInput",
        "addApplicationInputProcessingConfiguration",
        "addApplicationOutput",
        "addApplicationReferenceDataSource",
        "addApplicationVpcConfiguration",
        "createApplication",
        "createApplicationPresignedUrl",
        "createApplicationSnapshot",
        "deleteApplication",
        "deleteApplicationCloudWatchLoggingOption",
        "deleteApplicationInputProcessingConfiguration",
        "deleteApplicationOutput",
        "deleteApplicationReferenceDataSource",
        "deleteApplicationSnapshot",
        "deleteApplicationVpcConfiguration",
        "describeApplication",
        "describeApplicationOperation",
        "describeApplicationSnapshot",
        "describeApplicationVersion",
        "discoverInputSchema",
        "listApplicationOperations",
        "listApplications",
        "listApplicationSnapshots",
        "listApplicationVersions",
        "listTagsForResource",
        "rollbackApplication",
        "startApplication",
        "stopApplication",
        "tagResource",
        "untagResource",
        "updateApplication",
        "updateApplicationMaintenanceConfiguration"
      ]
    },
    {
      "service": "kinesis-video",
      "className": "KinesisVideo",
      "operations": [
        "createSignalingChannel",
        "createStream",
        "deleteEdgeConfiguration",
        "deleteSignalingChannel",
        "deleteStream",
        "describeEdgeConfiguration",
        "describeImageGenerationConfiguration",
        "describeMappedResourceConfiguration",
        "describeMediaStorageConfiguration",
        "describeNotificationConfiguration",
        "describeSignalingChannel",
        "describeStream",
        "getDataEndpoint",
        "getSignalingChannelEndpoint",
        "listEdgeAgentConfigurations",
        "listSignalingChannels",
        "listStreams",
        "listTagsForResource",
        "listTagsForStream",
        "startEdgeConfigurationUpdate",
        "tagResource",
        "tagStream",
        "untagResource",
        "untagStream",
        "updateDataRetention",
        "updateImageGenerationConfiguration",
        "updateMediaStorageConfiguration",
        "updateNotificationConfiguration",
        "updateSignalingChannel",
        "updateStream"
      ]
    },
    {
      "service": "kinesis-video-archived-media",
      "className": "KinesisVideoArchivedMedia",
      "operations": [
        "getClip",
        "getDASHStreamingSessionURL",
        "getHLSStreamingSessionURL",
        "getImages",
        "getMediaForFragmentList",
        "listFragments"
      ]
    },
    {
      "service": "kinesis-video-media",
      "className": "KinesisVideoMedia",
      "operations": [
        "getMedia"
      ]
    },
    {
      "service": "kinesis-video-signaling",
      "className": "KinesisVideoSignaling",
      "operations": [
        "getIceServerConfig",
        "sendAlexaOfferToMaster"
      ]
    },
    {
      "service": "kinesis-video-webrtc-storage",
      "className": "KinesisVideoWebRTCStorage",
      "operations": [
        "joinStorageSession",
        "joinStorageSessionAsViewer"
      ]
    },
    {
      "service": "kms",
      "className": "KMS",
      "operations": [
        "cancelKeyDeletion",
        "connectCustomKeyStore",
        "createAlias",
        "createCustomKeyStore",
        "createGrant",
        "createKey",
        "decrypt",
        "deleteAlias",
        "deleteCustomKeyStore",
        "deleteImportedKeyMaterial",
        "deriveSharedSecret",
        "describeCustomKeyStores",
        "describeKey",
        "disableKey",
        "disableKeyRotation",
        "disconnectCustomKeyStore",
        "enableKey",
        "enableKeyRotation",
        "encrypt",
        "generateDataKey",
        "generateDataKeyPair",
        "generateDataKeyPairWithoutPlaintext",
        "generateDataKeyWithoutPlaintext",
        "generateMac",
        "generateRandom",
        "getKeyPolicy",
        "getKeyRotationStatus",
        "getParametersForImport",
        "getPublicKey",
        "importKeyMaterial",
        "listAliases",
        "listGrants",
        "listKeyPolicies",
        "listKeyRotations",
        "listKeys",
        "listResourceTags",
        "listRetirableGrants",
        "putKeyPolicy",
        "reEncrypt",
        "replicateKey",
        "retireGrant",
        "revokeGrant",
        "rotateKeyOnDemand",
        "scheduleKeyDeletion",
        "sign",
        "tagResource",
        "untagResource",
        "updateAlias",
        "updateCustomKeyStore",
        "updateKeyDescription",
        "updatePrimaryRegion",
        "verify",
        "verifyMac"
      ]
    },
    {
      "service": "lakeformation",
      "className": "LakeFormation",
      "operations": [
        "addLFTagsToResource",
        "assumeDecoratedRoleWithSAML",
        "batchGrantPermissions",
        "batchRevokePermissions",
        "cancelTransaction",
        "commitTransaction",
        "createDataCellsFilter",
        "createLakeFormationIdentityCenterConfiguration",
        "createLakeFormationOptIn",
        "createLFTag",
        "createLFTagExpression",
        "deleteDataCellsFilter",
        "deleteLakeFormationIdentityCenterConfiguration",
        "deleteLakeFormationOptIn",
        "deleteLFTag",
        "deleteLFTagExpression",
        "deleteObjectsOnCancel",
        "deregisterResource",
        "describeLakeFormationIdentityCenterConfiguration",
        "describeResource",
        "describeTransaction",
        "extendTransaction",
        "getDataCellsFilter",
        "getDataLakePrincipal",
        "getDataLakeSettings",
        "getEffectivePermissionsForPath",
        "getLFTag",
        "getLFTagExpression",
        "getQueryState",
        "getQueryStatistics",
        "getResourceLFTags",
        "getTableObjects",
        "getTemporaryGluePartitionCredentials",
        "getTemporaryGlueTableCredentials",
        "getWorkUnitResults",
        "getWorkUnits",
        "grantPermissions",
        "listDataCellsFilter",
        "listLakeFormationOptIns",
        "listLFTagExpressions",
        "listLFTags",
        "listPermissions",
        "listResources",
        "listTableStorageOptimizers",
        "listTransactions",
        "putDataLakeSettings",
        "registerResource",
        "removeLFTagsFromResource",
        "revokePermissions",
        "searchDatabasesByLFTags",
        "searchTablesByLFTags",
        "startQueryPlanning",
        "startTransaction",
        "updateDataCellsFilter",
        "updateLakeFormationIdentityCenterConfiguration",
        "updateLFTag",
        "updateLFTagExpression",
        "updateResource",
        "updateTableObjects",
        "updateTableStorageOptimizer"
      ]
    },
    {
      "service": "lambda",
      "className": "Lambda",
      "operations": [
        "getAccountSettings",
        "listTags",
        "tagResource",
        "untagResource",
        "addLayerVersionPermission",
        "addPermission",
        "createAlias",
        "createCodeSigningConfig",
        "createEventSourceMapping",
        "createFunction",
        "createFunctionUrlConfig",
        "deleteAlias",
        "deleteCodeSigningConfig",
        "deleteEventSourceMapping",
        "deleteFunction",
        "deleteFunctionCodeSigningConfig",
        "deleteFunctionConcurrency",
        "deleteFunctionEventInvokeConfig",
        "deleteFunctionUrlConfig",
        "deleteLayerVersion",
        "deleteProvisionedConcurrencyConfig",
        "getAlias",
        "getCodeSigningConfig",
        "getEventSourceMapping",
        "getFunction",
        "getFunctionCodeSigningConfig",
        "getFunctionConcurrency",
        "getFunctionConfiguration",
        "getFunctionEventInvokeConfig",
        "getFunctionRecursionConfig",
        "getFunctionUrlConfig",
        "getLayerVersion",
        "getLayerVersionByArn",
        "getLayerVersionPolicy",
        "getPolicy",
        "getProvisionedConcurrencyConfig",
        "getRuntimeManagementConfig",
        "invoke",
        "invokeAsync",
        "invokeWithResponseStream",
        "listAliases",
        "listCodeSigningConfigs",
        "listEventSourceMappings",
        "listFunctionEventInvokeConfigs",
        "listFunctionUrlConfigs",
        "listFunctions",
        "listFunctionsByCodeSigningConfig",
        "listLayerVersions",
        "listLayers",
        "listProvisionedConcurrencyConfigs",
        "listVersionsByFunction",
        "publishLayerVersion",
        "publishVersion",
        "putFunctionCodeSigningConfig",
        "putFunctionConcurrency",
        "putFunctionEventInvokeConfig",
        "putFunctionRecursionConfig",
        "putProvisionedConcurrencyConfig",
        "putRuntimeManagementConfig",
        "removeLayerVersionPermission",
        "removePermission",
        "updateAlias",
        "updateCodeSigningConfig",
        "updateEventSourceMapping",
        "updateFunctionCode",
        "updateFunctionConfiguration",
        "updateFunctionEventInvokeConfig",
        "updateFunctionUrlConfig"
      ]
    },
    {
      "service": "launch-wizard",
      "className": "LaunchWizard",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "createDeployment",
        "deleteDeployment",
        "getDeployment",
        "getWorkload",
        "getWorkloadDeploymentPattern",
        "listDeploymentEvents",
        "listDeployments",
        "listWorkloadDeploymentPatterns",
        "listWorkloads"
      ]
    },
    {
      "service": "lex-model-building-service",
      "className": "LexModelBuildingService",
      "operations": [
        "createBotVersion",
        "createIntentVersion",
        "createSlotTypeVersion",
        "deleteBot",
        "deleteBotAlias",
        "deleteBotChannelAssociation",
        "deleteBotVersion",
        "deleteIntent",
        "deleteIntentVersion",
        "deleteSlotType",
        "deleteSlotTypeVersion",
        "deleteUtterances",
        "getBot",
        "getBotAlias",
        "getBotAliases",
        "getBotChannelAssociation",
        "getBotChannelAssociations",
        "getBots",
        "getBotVersions",
        "getBuiltinIntent",
        "getBuiltinIntents",
        "getBuiltinSlotTypes",
        "getExport",
        "getImport",
        "getIntent",
        "getIntents",
        "getIntentVersions",
        "getMigration",
        "getMigrations",
        "getSlotType",
        "getSlotTypes",
        "getSlotTypeVersions",
        "getUtterancesView",
        "listTagsForResource",
        "putBot",
        "putBotAlias",
        "putIntent",
        "putSlotType",
        "startImport",
        "startMigration",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "lex-models-v2",
      "className": "LexModelsV2",
      "operations": [
        "batchCreateCustomVocabularyItem",
        "batchDeleteCustomVocabularyItem",
        "batchUpdateCustomVocabularyItem",
        "buildBotLocale",
        "createBot",
        "createBotAlias",
        "createBotLocale",
        "createBotReplica",
        "createBotVersion",
        "createExport",
        "createIntent",
        "createResourcePolicy",
        "createResourcePolicyStatement",
        "createSlot",
        "createSlotType",
        "createTestSetDiscrepancyReport",
        "createUploadUrl",
        "deleteBot",
        "deleteBotAlias",
        "deleteBotLocale",
        "deleteBotReplica",
        "deleteBotVersion",
        "deleteCustomVocabulary",
        "deleteExport",
        "deleteImport",
        "deleteIntent",
        "deleteResourcePolicy",
        "deleteResourcePolicyStatement",
        "deleteSlot",
        "deleteSlotType",
        "deleteTestSet",
        "deleteUtterances",
        "describeBot",
        "describeBotAlias",
        "describeBotLocale",
        "describeBotRecommendation",
        "describeBotReplica",
        "describeBotResourceGeneration",
        "describeBotVersion",
        "describeCustomVocabularyMetadata",
        "describeExport",
        "describeImport",
        "describeIntent",
        "describeResourcePolicy",
        "describeSlot",
        "describeSlotType",
        "describeTestExecution",
        "describeTestSet",
        "describeTestSetDiscrepancyReport",
        "describeTestSetGeneration",
        "generateBotElement",
        "getTestExecutionArtifactsUrl",
        "listAggregatedUtterances",
        "listBotAliases",
        "listBotAliasReplicas",
        "listBotLocales",
        "listBotRecommendations",
        "listBotReplicas",
        "listBotResourceGenerations",
        "listBots",
        "listBotVersionReplicas",
        "listBotVersions",
        "listBuiltInIntents",
        "listBuiltInSlotTypes",
        "listCustomVocabularyItems",
        "listExports",
        "listImports",
        "listIntentMetrics",
        "listIntentPaths",
        "listIntents",
        "listIntentStageMetrics",
        "listRecommendedIntents",
        "listSessionAnalyticsData",
        "listSessionMetrics",
        "listSlots",
        "listSlotTypes",
        "listTagsForResource",
        "listTestExecutionResultItems",
        "listTestExecutions",
        "listTestSetRecords",
        "listTestSets",
        "listUtteranceAnalyticsData",
        "listUtteranceMetrics",
        "searchAssociatedTranscripts",
        "startBotRecommendation",
        "startBotResourceGeneration",
        "startImport",
        "startTestExecution",
        "startTestSetGeneration",
        "stopBotRecommendation",
        "tagResource",
        "untagResource",
        "updateBot",
        "updateBotAlias",
        "updateBotLocale",
        "updateBotRecommendation",
        "updateExport",
        "updateIntent",
        "updateResourcePolicy",
        "updateSlot",
        "updateSlotType",
        "updateTestSet"
      ]
    },
    {
      "service": "lex-runtime-service",
      "className": "LexRuntimeService",
      "operations": [
        "deleteSession",
        "getSession",
        "postContent",
        "postText",
        "putSession"
      ]
    },
    {
      "service": "lex-runtime-v2",
      "className": "LexRuntimeV2",
      "operations": [
        "deleteSession",
        "getSession",
        "putSession",
        "recognizeText",
        "recognizeUtterance",
        "startConversation"
      ]
    },
    {
      "service": "license-manager",
      "className": "LicenseManager",
      "operations": [
        "acceptGrant",
        "checkInLicense",
        "checkoutBorrowLicense",
        "checkoutLicense",
        "createGrant",
        "createGrantVersion",
        "createLicense",
        "createLicenseConfiguration",
        "createLicenseConversionTaskForResource",
        "createLicenseManagerReportGenerator",
        "createLicenseVersion",
        "createToken",
        "deleteGrant",
        "deleteLicense",
        "deleteLicenseConfiguration",
        "deleteLicenseManagerReportGenerator",
        "deleteToken",
        "extendLicenseConsumption",
        "getAccessToken",
        "getGrant",
        "getLicense",
        "getLicenseConfiguration",
        "getLicenseConversionTask",
        "getLicenseManagerReportGenerator",
        "getLicenseUsage",
        "getServiceSettings",
        "listAssociationsForLicenseConfiguration",
        "listDistributedGrants",
        "listFailuresForLicenseConfigurationOperations",
        "listLicenseConfigurations",
        "listLicenseConversionTasks",
        "listLicenseManagerReportGenerators",
        "listLicenses",
        "listLicenseSpecificationsForResource",
        "listLicenseVersions",
        "listReceivedGrants",
        "listReceivedGrantsForOrganization",
        "listReceivedLicenses",
        "listReceivedLicensesForOrganization",
        "listResourceInventory",
        "listTagsForResource",
        "listTokens",
        "listUsageForLicenseConfiguration",
        "rejectGrant",
        "tagResource",
        "untagResource",
        "updateLicenseConfiguration",
        "updateLicenseManagerReportGenerator",
        "updateLicenseSpecificationsForResource",
        "updateServiceSettings"
      ]
    },
    {
      "service": "license-manager-linux-subscriptions",
      "className": "LicenseManagerLinuxSubscriptions",
      "operations": [
        "deregisterSubscriptionProvider",
        "getRegisteredSubscriptionProvider",
        "getServiceSettings",
        "listLinuxSubscriptionInstances",
        "listLinuxSubscriptions",
        "listRegisteredSubscriptionProviders",
        "listTagsForResource",
        "registerSubscriptionProvider",
        "tagResource",
        "untagResource",
        "updateServiceSettings"
      ]
    },
    {
      "service": "license-manager-user-subscriptions",
      "className": "LicenseManagerUserSubscriptions",
      "operations": [
        "associateUser",
        "createLicenseServerEndpoint",
        "deleteLicenseServerEndpoint",
        "deregisterIdentityProvider",
        "disassociateUser",
        "listIdentityProviders",
        "listInstances",
        "listLicenseServerEndpoints",
        "listProductSubscriptions",
        "listTagsForResource",
        "listUserAssociations",
        "registerIdentityProvider",
        "startProductSubscription",
        "stopProductSubscription",
        "tagResource",
        "untagResource",
        "updateIdentityProviderSettings"
      ]
    },
    {
      "service": "lightsail",
      "className": "Lightsail",
      "operations": [
        "allocateStaticIp",
        "attachCertificateToDistribution",
        "attachDisk",
        "attachInstancesToLoadBalancer",
        "attachLoadBalancerTlsCertificate",
        "attachStaticIp",
        "closeInstancePublicPorts",
        "copySnapshot",
        "createBucket",
        "createBucketAccessKey",
        "createCertificate",
        "createCloudFormationStack",
        "createContactMethod",
        "createContainerService",
        "createContainerServiceDeployment",
        "createContainerServiceRegistryLogin",
        "createDisk",
        "createDiskFromSnapshot",
        "createDiskSnapshot",
        "createDistribution",
        "createDomain",
        "createDomainEntry",
        "createGUISessionAccessDetails",
        "createInstances",
        "createInstancesFromSnapshot",
        "createInstanceSnapshot",
        "createKeyPair",
        "createLoadBalancer",
        "createLoadBalancerTlsCertificate",
        "createRelationalDatabase",
        "createRelationalDatabaseFromSnapshot",
        "createRelationalDatabaseSnapshot",
        "deleteAlarm",
        "deleteAutoSnapshot",
        "deleteBucket",
        "deleteBucketAccessKey",
        "deleteCertificate",
        "deleteContactMethod",
        "deleteContainerImage",
        "deleteContainerService",
        "deleteDisk",
        "deleteDiskSnapshot",
        "deleteDistribution",
        "deleteDomain",
        "deleteDomainEntry",
        "deleteInstance",
        "deleteInstanceSnapshot",
        "deleteKeyPair",
        "deleteKnownHostKeys",
        "deleteLoadBalancer",
        "deleteLoadBalancerTlsCertificate",
        "deleteRelationalDatabase",
        "deleteRelationalDatabaseSnapshot",
        "detachCertificateFromDistribution",
        "detachDisk",
        "detachInstancesFromLoadBalancer",
        "detachStaticIp",
        "disableAddOn",
        "downloadDefaultKeyPair",
        "enableAddOn",
        "exportSnapshot",
        "getActiveNames",
        "getAlarms",
        "getAutoSnapshots",
        "getBlueprints",
        "getBucketAccessKeys",
        "getBucketBundles",
        "getBucketMetricData",
        "getBuckets",
        "getBundles",
        "getCertificates",
        "getCloudFormationStackRecords",
        "getContactMethods",
        "getContainerAPIMetadata",
        "getContainerImages",
        "getContainerLog",
        "getContainerServiceDeployments",
        "getContainerServiceMetricData",
        "getContainerServicePowers",
        "getContainerServices",
        "getCostEstimate",
        "getDisk",
        "getDisks",
        "getDiskSnapshot",
        "getDiskSnapshots",
        "getDistributionBundles",
        "getDistributionLatestCacheReset",
        "getDistributionMetricData",
        "getDistributions",
        "getDomain",
        "getDomains",
        "getExportSnapshotRecords",
        "getInstance",
        "getInstanceAccessDetails",
        "getInstanceMetricData",
        "getInstancePortStates",
        "getInstances",
        "getInstanceSnapshot",
        "getInstanceSnapshots",
        "getInstanceState",
        "getKeyPair",
        "getKeyPairs",
        "getLoadBalancer",
        "getLoadBalancerMetricData",
        "getLoadBalancers",
        "getLoadBalancerTlsCertificates",
        "getLoadBalancerTlsPolicies",
        "getOperation",
        "getOperations",
        "getOperationsForResource",
        "getRegions",
        "getRelationalDatabase",
        "getRelationalDatabaseBlueprints",
        "getRelationalDatabaseBundles",
        "getRelationalDatabaseEvents",
        "getRelationalDatabaseLogEvents",
        "getRelationalDatabaseLogStreams",
        "getRelationalDatabaseMasterUserPassword",
        "getRelationalDatabaseMetricData",
        "getRelationalDatabaseParameters",
        "getRelationalDatabases",
        "getRelationalDatabaseSnapshot",
        "getRelationalDatabaseSnapshots",
        "getSetupHistory",
        "getStaticIp",
        "getStaticIps",
        "importKeyPair",
        "isVpcPeered",
        "openInstancePublicPorts",
        "peerVpc",
        "putAlarm",
        "putInstancePublicPorts",
        "rebootInstance",
        "rebootRelationalDatabase",
        "registerContainerImage",
        "releaseStaticIp",
        "resetDistributionCache",
        "sendContactMethodVerification",
        "setIpAddressType",
        "setResourceAccessForBucket",
        "setupInstanceHttps",
        "startGUISession",
        "startInstance",
        "startRelationalDatabase",
        "stopGUISession",
        "stopInstance",
        "stopRelationalDatabase",
        "tagResource",
        "testAlarm",
        "unpeerVpc",
        "untagResource",
        "updateBucket",
        "updateBucketBundle",
        "updateContainerService",
        "updateDistribution",
        "updateDistributionBundle",
        "updateDomainEntry",
        "updateInstanceMetadataOptions",
        "updateLoadBalancerAttribute",
        "updateRelationalDatabase",
        "updateRelationalDatabaseParameters"
      ]
    },
    {
      "service": "location",
      "className": "Location",
      "operations": [
        "associateTrackerConsumer",
        "batchDeleteDevicePositionHistory",
        "batchDeleteGeofence",
        "batchEvaluateGeofences",
        "batchGetDevicePosition",
        "batchPutGeofence",
        "batchUpdateDevicePosition",
        "calculateRoute",
        "calculateRouteMatrix",
        "createGeofenceCollection",
        "createKey",
        "createMap",
        "createPlaceIndex",
        "createRouteCalculator",
        "createTracker",
        "deleteGeofenceCollection",
        "deleteKey",
        "deleteMap",
        "deletePlaceIndex",
        "deleteRouteCalculator",
        "deleteTracker",
        "describeGeofenceCollection",
        "describeKey",
        "describeMap",
        "describePlaceIndex",
        "describeRouteCalculator",
        "describeTracker",
        "disassociateTrackerConsumer",
        "forecastGeofenceEvents",
        "getDevicePosition",
        "getDevicePositionHistory",
        "getGeofence",
        "getMapGlyphs",
        "getMapSprites",
        "getMapStyleDescriptor",
        "getMapTile",
        "getPlace",
        "listDevicePositions",
        "listGeofenceCollections",
        "listGeofences",
        "listKeys",
        "listMaps",
        "listPlaceIndexes",
        "listRouteCalculators",
        "listTagsForResource",
        "listTrackerConsumers",
        "listTrackers",
        "putGeofence",
        "searchPlaceIndexForPosition",
        "searchPlaceIndexForSuggestions",
        "searchPlaceIndexForText",
        "tagResource",
        "untagResource",
        "updateGeofenceCollection",
        "updateKey",
        "updateMap",
        "updatePlaceIndex",
        "updateRouteCalculator",
        "updateTracker",
        "verifyDevicePosition"
      ]
    },
    {
      "service": "lookoutequipment",
      "className": "LookoutEquipment",
      "operations": [
        "createDataset",
        "createInferenceScheduler",
        "createLabel",
        "createLabelGroup",
        "createModel",
        "createRetrainingScheduler",
        "deleteDataset",
        "deleteInferenceScheduler",
        "deleteLabel",
        "deleteLabelGroup",
        "deleteModel",
        "deleteResourcePolicy",
        "deleteRetrainingScheduler",
        "describeDataIngestionJob",
        "describeDataset",
        "describeInferenceScheduler",
        "describeLabel",
        "describeLabelGroup",
        "describeModel",
        "describeModelVersion",
        "describeResourcePolicy",
        "describeRetrainingScheduler",
        "importDataset",
        "importModelVersion",
        "listDataIngestionJobs",
        "listDatasets",
        "listInferenceEvents",
        "listInferenceExecutions",
        "listInferenceSchedulers",
        "listLabelGroups",
        "listLabels",
        "listModels",
        "listModelVersions",
        "listRetrainingSchedulers",
        "listSensorStatistics",
        "listTagsForResource",
        "putResourcePolicy",
        "startDataIngestionJob",
        "startInferenceScheduler",
        "startRetrainingScheduler",
        "stopInferenceScheduler",
        "stopRetrainingScheduler",
        "tagResource",
        "untagResource",
        "updateActiveModelVersion",
        "updateInferenceScheduler",
        "updateLabelGroup",
        "updateModel",
        "updateRetrainingScheduler"
      ]
    },
    {
      "service": "lookoutmetrics",
      "className": "LookoutMetrics",
      "operations": [
        "activateAnomalyDetector",
        "backTestAnomalyDetector",
        "createAlert",
        "createAnomalyDetector",
        "createMetricSet",
        "deactivateAnomalyDetector",
        "deleteAlert",
        "deleteAnomalyDetector",
        "describeAlert",
        "describeAnomalyDetectionExecutions",
        "describeAnomalyDetector",
        "describeMetricSet",
        "detectMetricSetConfig",
        "getAnomalyGroup",
        "getDataQualityMetrics",
        "getFeedback",
        "getSampleData",
        "listAlerts",
        "listAnomalyDetectors",
        "listAnomalyGroupRelatedMetrics",
        "listAnomalyGroupSummaries",
        "listAnomalyGroupTimeSeries",
        "listMetricSets",
        "listTagsForResource",
        "putFeedback",
        "tagResource",
        "untagResource",
        "updateAlert",
        "updateAnomalyDetector",
        "updateMetricSet"
      ]
    },
    {
      "service": "lookoutvision",
      "className": "LookoutVision",
      "operations": [
        "createDataset",
        "createModel",
        "createProject",
        "deleteDataset",
        "deleteModel",
        "deleteProject",
        "describeDataset",
        "describeModel",
        "describeModelPackagingJob",
        "describeProject",
        "detectAnomalies",
        "listDatasetEntries",
        "listModelPackagingJobs",
        "listModels",
        "listProjects",
        "listTagsForResource",
        "startModel",
        "startModelPackagingJob",
        "stopModel",
        "tagResource",
        "untagResource",
        "updateDatasetEntries"
      ]
    },
    {
      "service": "m2",
      "className": "m2",
      "operations": [
        "getSignedBluinsightsUrl",
        "listEngineVersions",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "cancelBatchJobExecution",
        "createApplication",
        "createDataSetExportTask",
        "createDataSetImportTask",
        "createDeployment",
        "createEnvironment",
        "deleteApplication",
        "deleteApplicationFromEnvironment",
        "deleteEnvironment",
        "getApplication",
        "getApplicationVersion",
        "getBatchJobExecution",
        "getDataSetDetails",
        "getDataSetExportTask",
        "getDataSetImportTask",
        "getDeployment",
        "getEnvironment",
        "listApplicationVersions",
        "listApplications",
        "listBatchJobDefinitions",
        "listBatchJobExecutions",
        "listBatchJobRestartPoints",
        "listDataSetExportHistory",
        "listDataSetImportHistory",
        "listDataSets",
        "listDeployments",
        "listEnvironments",
        "startApplication",
        "startBatchJob",
        "stopApplication",
        "updateApplication",
        "updateEnvironment"
      ]
    },
    {
      "service": "machine-learning",
      "className": "MachineLearning",
      "operations": [
        "addTags",
        "createBatchPrediction",
        "createDataSourceFromRDS",
        "createDataSourceFromRedshift",
        "createDataSourceFromS3",
        "createEvaluation",
        "createMLModel",
        "createRealtimeEndpoint",
        "deleteBatchPrediction",
        "deleteDataSource",
        "deleteEvaluation",
        "deleteMLModel",
        "deleteRealtimeEndpoint",
        "deleteTags",
        "describeBatchPredictions",
        "describeDataSources",
        "describeEvaluations",
        "describeMLModels",
        "describeTags",
        "getBatchPrediction",
        "getDataSource",
        "getEvaluation",
        "getMLModel",
        "predict",
        "updateBatchPrediction",
        "updateDataSource",
        "updateEvaluation",
        "updateMLModel"
      ]
    },
    {
      "service": "macie2",
      "className": "Macie2",
      "operations": [
        "acceptInvitation",
        "batchGetCustomDataIdentifiers",
        "batchUpdateAutomatedDiscoveryAccounts",
        "createAllowList",
        "createClassificationJob",
        "createCustomDataIdentifier",
        "createFindingsFilter",
        "createInvitations",
        "createMember",
        "createSampleFindings",
        "declineInvitations",
        "deleteAllowList",
        "deleteCustomDataIdentifier",
        "deleteFindingsFilter",
        "deleteInvitations",
        "deleteMember",
        "describeBuckets",
        "describeClassificationJob",
        "describeOrganizationConfiguration",
        "disableMacie",
        "disableOrganizationAdminAccount",
        "disassociateFromAdministratorAccount",
        "disassociateFromMasterAccount",
        "disassociateMember",
        "enableMacie",
        "enableOrganizationAdminAccount",
        "getAdministratorAccount",
        "getAllowList",
        "getAutomatedDiscoveryConfiguration",
        "getBucketStatistics",
        "getClassificationExportConfiguration",
        "getClassificationScope",
        "getCustomDataIdentifier",
        "getFindings",
        "getFindingsFilter",
        "getFindingsPublicationConfiguration",
        "getFindingStatistics",
        "getInvitationsCount",
        "getMacieSession",
        "getMasterAccount",
        "getMember",
        "getResourceProfile",
        "getRevealConfiguration",
        "getSensitiveDataOccurrences",
        "getSensitiveDataOccurrencesAvailability",
        "getSensitivityInspectionTemplate",
        "getUsageStatistics",
        "getUsageTotals",
        "listAllowLists",
        "listAutomatedDiscoveryAccounts",
        "listClassificationJobs",
        "listClassificationScopes",
        "listCustomDataIdentifiers",
        "listFindings",
        "listFindingsFilters",
        "listInvitations",
        "listManagedDataIdentifiers",
        "listMembers",
        "listOrganizationAdminAccounts",
        "listResourceProfileArtifacts",
        "listResourceProfileDetections",
        "listSensitivityInspectionTemplates",
        "listTagsForResource",
        "putClassificationExportConfiguration",
        "putFindingsPublicationConfiguration",
        "searchResources",
        "tagResource",
        "testCustomDataIdentifier",
        "untagResource",
        "updateAllowList",
        "updateAutomatedDiscoveryConfiguration",
        "updateClassificationJob",
        "updateClassificationScope",
        "updateFindingsFilter",
        "updateMacieSession",
        "updateMemberSession",
        "updateOrganizationConfiguration",
        "updateResourceProfile",
        "updateResourceProfileDetections",
        "updateRevealConfiguration",
        "updateSensitivityInspectionTemplate"
      ]
    },
    {
      "service": "mailmanager",
      "className": "MailManager",
      "operations": [
        "createAddressListImportJob",
        "deregisterMemberFromAddressList",
        "getAddressListImportJob",
        "getArchiveExport",
        "getArchiveMessage",
        "getArchiveMessageContent",
        "getArchiveSearch",
        "getArchiveSearchResults",
        "getMemberOfAddressList",
        "listAddressListImportJobs",
        "listArchiveExports",
        "listArchiveSearches",
        "listMembersOfAddressList",
        "listTagsForResource",
        "registerMemberToAddressList",
        "startAddressListImportJob",
        "startArchiveExport",
        "startArchiveSearch",
        "stopAddressListImportJob",
        "stopArchiveExport",
        "stopArchiveSearch",
        "tagResource",
        "untagResource",
        "createAddonInstance",
        "createAddonSubscription",
        "createAddressList",
        "createArchive",
        "createIngressPoint",
        "createRelay",
        "createRuleSet",
        "createTrafficPolicy",
        "deleteAddonInstance",
        "deleteAddonSubscription",
        "deleteAddressList",
        "deleteArchive",
        "deleteIngressPoint",
        "deleteRelay",
        "deleteRuleSet",
        "deleteTrafficPolicy",
        "getAddonInstance",
        "getAddonSubscription",
        "getAddressList",
        "getArchive",
        "getIngressPoint",
        "getRelay",
        "getRuleSet",
        "getTrafficPolicy",
        "listAddonInstances",
        "listAddonSubscriptions",
        "listAddressLists",
        "listArchives",
        "listIngressPoints",
        "listRelays",
        "listRuleSets",
        "listTrafficPolicies",
        "updateArchive",
        "updateIngressPoint",
        "updateRelay",
        "updateRuleSet",
        "updateTrafficPolicy"
      ]
    },
    {
      "service": "managedblockchain",
      "className": "ManagedBlockchain",
      "operations": [
        "createAccessor",
        "createMember",
        "createNetwork",
        "createNode",
        "createProposal",
        "deleteAccessor",
        "deleteMember",
        "deleteNode",
        "getAccessor",
        "getMember",
        "getNetwork",
        "getNode",
        "getProposal",
        "listAccessors",
        "listInvitations",
        "listMembers",
        "listNetworks",
        "listNodes",
        "listProposals",
        "listProposalVotes",
        "listTagsForResource",
        "rejectInvitation",
        "tagResource",
        "untagResource",
        "updateMember",
        "updateNode",
        "voteOnProposal"
      ]
    },
    {
      "service": "managedblockchain-query",
      "className": "ManagedBlockchainQuery",
      "operations": [
        "batchGetTokenBalance",
        "getAssetContract",
        "getTokenBalance",
        "getTransaction",
        "listAssetContracts",
        "listFilteredTransactionEvents",
        "listTokenBalances",
        "listTransactionEvents",
        "listTransactions"
      ]
    },
    {
      "service": "marketplace-agreement",
      "className": "MarketplaceAgreement",
      "operations": [
        "describeAgreement",
        "getAgreementTerms",
        "searchAgreements"
      ]
    },
    {
      "service": "marketplace-catalog",
      "className": "MarketplaceCatalog",
      "operations": [
        "batchDescribeEntities",
        "cancelChangeSet",
        "deleteResourcePolicy",
        "describeChangeSet",
        "describeEntity",
        "getResourcePolicy",
        "listChangeSets",
        "listEntities",
        "listTagsForResource",
        "putResourcePolicy",
        "startChangeSet",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "marketplace-commerce-analytics",
      "className": "MarketplaceCommerceAnalytics",
      "operations": [
        "generateDataSet",
        "startSupportDataExport"
      ]
    },
    {
      "service": "marketplace-deployment",
      "className": "MarketplaceDeployment",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "putDeploymentParameter"
      ]
    },
    {
      "service": "marketplace-entitlement-service",
      "className": "MarketplaceEntitlementService",
      "operations": [
        "getEntitlements"
      ]
    },
    {
      "service": "marketplace-metering",
      "className": "MarketplaceMetering",
      "operations": [
        "batchMeterUsage",
        "meterUsage",
        "registerUsage",
        "resolveCustomer"
      ]
    },
    {
      "service": "marketplace-reporting",
      "className": "MarketplaceReporting",
      "operations": [
        "getBuyerDashboard"
      ]
    },
    {
      "service": "mediaconnect",
      "className": "MediaConnect",
      "operations": [
        "listEntitlements",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "addBridgeOutputs",
        "addBridgeSources",
        "addFlowMediaStreams",
        "addFlowOutputs",
        "addFlowSources",
        "addFlowVpcInterfaces",
        "createBridge",
        "createFlow",
        "createGateway",
        "deleteBridge",
        "deleteFlow",
        "deleteGateway",
        "deregisterGatewayInstance",
        "describeBridge",
        "describeFlow",
        "describeFlowSourceMetadata",
        "describeFlowSourceThumbnail",
        "describeGateway",
        "describeGatewayInstance",
        "describeOffering",
        "describeReservation",
        "grantFlowEntitlements",
        "listBridges",
        "listFlows",
        "listGatewayInstances",
        "listGateways",
        "listOfferings",
        "listReservations",
        "purchaseOffering",
        "removeBridgeOutput",
        "removeBridgeSource",
        "removeFlowMediaStream",
        "removeFlowOutput",
        "removeFlowSource",
        "removeFlowVpcInterface",
        "revokeFlowEntitlement",
        "startFlow",
        "stopFlow",
        "updateBridge",
        "updateBridgeOutput",
        "updateBridgeSource",
        "updateBridgeState",
        "updateFlow",
        "updateFlowEntitlement",
        "updateFlowMediaStream",
        "updateFlowOutput",
        "updateFlowSource",
        "updateGatewayInstance"
      ]
    },
    {
      "service": "mediaconvert",
      "className": "MediaConvert",
      "operations": [
        "associateCertificate",
        "cancelJob",
        "createJob",
        "createJobTemplate",
        "createPreset",
        "createQueue",
        "deleteJobTemplate",
        "deletePolicy",
        "deletePreset",
        "deleteQueue",
        "describeEndpoints",
        "disassociateCertificate",
        "getJob",
        "getJobTemplate",
        "getPolicy",
        "getPreset",
        "getQueue",
        "listJobs",
        "listJobTemplates",
        "listPresets",
        "listQueues",
        "listTagsForResource",
        "listVersions",
        "probe",
        "putPolicy",
        "searchJobs",
        "tagResource",
        "untagResource",
        "updateJobTemplate",
        "updatePreset",
        "updateQueue"
      ]
    },
    {
      "service": "medialive",
      "className": "MediaLive",
      "operations": [
        "acceptInputDeviceTransfer",
        "batchDelete",
        "batchStart",
        "batchStop",
        "batchUpdateSchedule",
        "cancelInputDeviceTransfer",
        "claimDevice",
        "createChannel",
        "createChannelPlacementGroup",
        "createCloudWatchAlarmTemplate",
        "createCloudWatchAlarmTemplateGroup",
        "createCluster",
        "createEventBridgeRuleTemplate",
        "createEventBridgeRuleTemplateGroup",
        "createInput",
        "createInputSecurityGroup",
        "createMultiplex",
        "createMultiplexProgram",
        "createNetwork",
        "createNode",
        "createNodeRegistrationScript",
        "createPartnerInput",
        "createSdiSource",
        "createSignalMap",
        "createTags",
        "deleteChannel",
        "deleteChannelPlacementGroup",
        "deleteCloudWatchAlarmTemplate",
        "deleteCloudWatchAlarmTemplateGroup",
        "deleteCluster",
        "deleteEventBridgeRuleTemplate",
        "deleteEventBridgeRuleTemplateGroup",
        "deleteInput",
        "deleteInputSecurityGroup",
        "deleteMultiplex",
        "deleteMultiplexProgram",
        "deleteNetwork",
        "deleteNode",
        "deleteReservation",
        "deleteSchedule",
        "deleteSdiSource",
        "deleteSignalMap",
        "deleteTags",
        "describeAccountConfiguration",
        "describeChannel",
        "describeChannelPlacementGroup",
        "describeCluster",
        "describeInput",
        "describeInputDevice",
        "describeInputDeviceThumbnail",
        "describeInputSecurityGroup",
        "describeMultiplex",
        "describeMultiplexProgram",
        "describeNetwork",
        "describeNode",
        "describeOffering",
        "describeReservation",
        "describeSchedule",
        "describeSdiSource",
        "describeThumbnails",
        "getCloudWatchAlarmTemplate",
        "getCloudWatchAlarmTemplateGroup",
        "getEventBridgeRuleTemplate",
        "getEventBridgeRuleTemplateGroup",
        "getSignalMap",
        "listChannelPlacementGroups",
        "listChannels",
        "listCloudWatchAlarmTemplateGroups",
        "listCloudWatchAlarmTemplates",
        "listClusters",
        "listEventBridgeRuleTemplateGroups",
        "listEventBridgeRuleTemplates",
        "listInputDevices",
        "listInputDeviceTransfers",
        "listInputs",
        "listInputSecurityGroups",
        "listMultiplexes",
        "listMultiplexPrograms",
        "listNetworks",
        "listNodes",
        "listOfferings",
        "listReservations",
        "listSdiSources",
        "listSignalMaps",
        "listTagsForResource",
        "listVersions",
        "purchaseOffering",
        "rebootInputDevice",
        "rejectInputDeviceTransfer",
        "restartChannelPipelines",
        "startChannel",
        "startDeleteMonitorDeployment",
        "startInputDevice",
        "startInputDeviceMaintenanceWindow",
        "startMonitorDeployment",
        "startMultiplex",
        "startUpdateSignalMap",
        "stopChannel",
        "stopInputDevice",
        "stopMultiplex",
        "transferInputDevice",
        "updateAccountConfiguration",
        "updateChannel",
        "updateChannelClass",
        "updateChannelPlacementGroup",
        "updateCloudWatchAlarmTemplate",
        "updateCloudWatchAlarmTemplateGroup",
        "updateCluster",
        "updateEventBridgeRuleTemplate",
        "updateEventBridgeRuleTemplateGroup",
        "updateInput",
        "updateInputDevice",
        "updateInputSecurityGroup",
        "updateMultiplex",
        "updateMultiplexProgram",
        "updateNetwork",
        "updateNode",
        "updateNodeState",
        "updateReservation",
        "updateSdiSource"
      ]
    },
    {
      "service": "mediapackage",
      "className": "MediaPackage",
      "operations": [
        "configureLogs",
        "createChannel",
        "createHarvestJob",
        "createOriginEndpoint",
        "deleteChannel",
        "deleteOriginEndpoint",
        "describeChannel",
        "describeHarvestJob",
        "describeOriginEndpoint",
        "listChannels",
        "listHarvestJobs",
        "listOriginEndpoints",
        "listTagsForResource",
        "rotateChannelCredentials",
        "rotateIngestEndpointCredentials",
        "tagResource",
        "untagResource",
        "updateChannel",
        "updateOriginEndpoint"
      ]
    },
    {
      "service": "mediapackage-vod",
      "className": "MediaPackageVod",
      "operations": [
        "configureLogs",
        "createAsset",
        "createPackagingConfiguration",
        "createPackagingGroup",
        "deleteAsset",
        "deletePackagingConfiguration",
        "deletePackagingGroup",
        "describeAsset",
        "describePackagingConfiguration",
        "describePackagingGroup",
        "listAssets",
        "listPackagingConfigurations",
        "listPackagingGroups",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "updatePackagingGroup"
      ]
    },
    {
      "service": "mediapackagev2",
      "className": "MediaPackageV2",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "cancelHarvestJob",
        "createChannel",
        "createChannelGroup",
        "createHarvestJob",
        "createOriginEndpoint",
        "deleteChannel",
        "deleteChannelGroup",
        "deleteChannelPolicy",
        "deleteOriginEndpoint",
        "deleteOriginEndpointPolicy",
        "getChannel",
        "getChannelGroup",
        "getChannelPolicy",
        "getHarvestJob",
        "getOriginEndpoint",
        "getOriginEndpointPolicy",
        "listChannelGroups",
        "listChannels",
        "listHarvestJobs",
        "listOriginEndpoints",
        "putChannelPolicy",
        "putOriginEndpointPolicy",
        "resetChannelState",
        "resetOriginEndpointState",
        "updateChannel",
        "updateChannelGroup",
        "updateOriginEndpoint"
      ]
    },
    {
      "service": "mediastore",
      "className": "MediaStore",
      "operations": [
        "createContainer",
        "deleteContainer",
        "deleteContainerPolicy",
        "deleteCorsPolicy",
        "deleteLifecyclePolicy",
        "deleteMetricPolicy",
        "describeContainer",
        "getContainerPolicy",
        "getCorsPolicy",
        "getLifecyclePolicy",
        "getMetricPolicy",
        "listContainers",
        "listTagsForResource",
        "putContainerPolicy",
        "putCorsPolicy",
        "putLifecyclePolicy",
        "putMetricPolicy",
        "startAccessLogging",
        "stopAccessLogging",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "mediastore-data",
      "className": "MediaStoreData",
      "operations": [
        "deleteObject",
        "describeObject",
        "getObject",
        "listItems",
        "putObject"
      ]
    },
    {
      "service": "mediatailor",
      "className": "MediaTailor",
      "operations": [
        "configureLogsForPlaybackConfiguration",
        "listAlerts",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "configureLogsForChannel",
        "createChannel",
        "createLiveSource",
        "createPrefetchSchedule",
        "createProgram",
        "createSourceLocation",
        "createVodSource",
        "deleteChannel",
        "deleteChannelPolicy",
        "deleteLiveSource",
        "deletePlaybackConfiguration",
        "deletePrefetchSchedule",
        "deleteProgram",
        "deleteSourceLocation",
        "deleteVodSource",
        "describeChannel",
        "describeLiveSource",
        "describeProgram",
        "describeSourceLocation",
        "describeVodSource",
        "getChannelPolicy",
        "getChannelSchedule",
        "getPlaybackConfiguration",
        "getPrefetchSchedule",
        "listChannels",
        "listLiveSources",
        "listPlaybackConfigurations",
        "listPrefetchSchedules",
        "listSourceLocations",
        "listVodSources",
        "putChannelPolicy",
        "putPlaybackConfiguration",
        "startChannel",
        "stopChannel",
        "updateChannel",
        "updateLiveSource",
        "updateProgram",
        "updateSourceLocation",
        "updateVodSource"
      ]
    },
    {
      "service": "medical-imaging",
      "className": "MedicalImaging",
      "operations": [
        "copyImageSet",
        "deleteImageSet",
        "getDICOMImportJob",
        "getImageFrame",
        "getImageSet",
        "getImageSetMetadata",
        "listDICOMImportJobs",
        "listImageSetVersions",
        "listTagsForResource",
        "searchImageSets",
        "startDICOMImportJob",
        "tagResource",
        "untagResource",
        "updateImageSetMetadata",
        "createDatastore",
        "deleteDatastore",
        "getDatastore",
        "listDatastores"
      ]
    },
    {
      "service": "memorydb",
      "className": "MemoryDB",
      "operations": [
        "batchUpdateCluster",
        "copySnapshot",
        "createACL",
        "createCluster",
        "createMultiRegionCluster",
        "createParameterGroup",
        "createSnapshot",
        "createSubnetGroup",
        "createUser",
        "deleteACL",
        "deleteCluster",
        "deleteMultiRegionCluster",
        "deleteParameterGroup",
        "deleteSnapshot",
        "deleteSubnetGroup",
        "deleteUser",
        "describeACLs",
        "describeClusters",
        "describeEngineVersions",
        "describeEvents",
        "describeMultiRegionClusters",
        "describeParameterGroups",
        "describeParameters",
        "describeReservedNodes",
        "describeReservedNodesOfferings",
        "describeServiceUpdates",
        "describeSnapshots",
        "describeSubnetGroups",
        "describeUsers",
        "failoverShard",
        "listAllowedMultiRegionClusterUpdates",
        "listAllowedNodeTypeUpdates",
        "listTags",
        "purchaseReservedNodesOffering",
        "resetParameterGroup",
        "tagResource",
        "untagResource",
        "updateACL",
        "updateCluster",
        "updateMultiRegionCluster",
        "updateParameterGroup",
        "updateSubnetGroup",
        "updateUser"
      ]
    },
    {
      "service": "mgn",
      "className": "mgn",
      "operations": [
        "initializeService",
        "listManagedAccounts",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "archiveApplication",
        "archiveWave",
        "associateApplications",
        "associateSourceServers",
        "changeServerLifeCycleState",
        "createApplication",
        "createConnector",
        "createLaunchConfigurationTemplate",
        "createReplicationConfigurationTemplate",
        "createWave",
        "deleteApplication",
        "deleteConnector",
        "deleteJob",
        "deleteLaunchConfigurationTemplate",
        "deleteReplicationConfigurationTemplate",
        "deleteSourceServer",
        "deleteVcenterClient",
        "deleteWave",
        "describeJobLogItems",
        "describeJobs",
        "describeLaunchConfigurationTemplates",
        "describeReplicationConfigurationTemplates",
        "describeSourceServers",
        "describeVcenterClients",
        "disassociateApplications",
        "disassociateSourceServers",
        "disconnectFromService",
        "finalizeCutover",
        "getLaunchConfiguration",
        "getReplicationConfiguration",
        "listApplications",
        "listConnectors",
        "listExportErrors",
        "listExports",
        "listImportErrors",
        "listImports",
        "listSourceServerActions",
        "listTemplateActions",
        "listWaves",
        "markAsArchived",
        "pauseReplication",
        "putSourceServerAction",
        "putTemplateAction",
        "removeSourceServerAction",
        "removeTemplateAction",
        "resumeReplication",
        "retryDataReplication",
        "startCutover",
        "startExport",
        "startImport",
        "startReplication",
        "startTest",
        "stopReplication",
        "terminateTargetInstances",
        "unarchiveApplication",
        "unarchiveWave",
        "updateApplication",
        "updateConnector",
        "updateLaunchConfiguration",
        "updateLaunchConfigurationTemplate",
        "updateReplicationConfiguration",
        "updateReplicationConfigurationTemplate",
        "updateSourceServer",
        "updateSourceServerReplicationType",
        "updateWave"
      ]
    },
    {
      "service": "migration-hub",
      "className": "MigrationHub",
      "operations": [
        "associateCreatedArtifact",
        "associateDiscoveredResource",
        "associateSourceResource",
        "createProgressUpdateStream",
        "deleteProgressUpdateStream",
        "describeApplicationState",
        "describeMigrationTask",
        "disassociateCreatedArtifact",
        "disassociateDiscoveredResource",
        "disassociateSourceResource",
        "importMigrationTask",
        "listApplicationStates",
        "listCreatedArtifacts",
        "listDiscoveredResources",
        "listMigrationTasks",
        "listMigrationTaskUpdates",
        "listProgressUpdateStreams",
        "listSourceResources",
        "notifyApplicationState",
        "notifyMigrationTaskState",
        "putResourceAttributes"
      ]
    },
    {
      "service": "migration-hub-refactor-spaces",
      "className": "MigrationHubRefactorSpaces",
      "operations": [
        "createApplication",
        "createEnvironment",
        "createRoute",
        "createService",
        "deleteApplication",
        "deleteEnvironment",
        "deleteResourcePolicy",
        "deleteRoute",
        "deleteService",
        "getApplication",
        "getEnvironment",
        "getResourcePolicy",
        "getRoute",
        "getService",
        "listApplications",
        "listEnvironments",
        "listEnvironmentVpcs",
        "listRoutes",
        "listServices",
        "listTagsForResource",
        "putResourcePolicy",
        "tagResource",
        "untagResource",
        "updateRoute"
      ]
    },
    {
      "service": "migrationhub-config",
      "className": "MigrationHubConfig",
      "operations": [
        "createHomeRegionControl",
        "deleteHomeRegionControl",
        "describeHomeRegionControls",
        "getHomeRegion"
      ]
    },
    {
      "service": "migrationhuborchestrator",
      "className": "MigrationHubOrchestrator",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "createTemplate",
        "createWorkflow",
        "createWorkflowStep",
        "createWorkflowStepGroup",
        "deleteTemplate",
        "deleteWorkflow",
        "deleteWorkflowStep",
        "deleteWorkflowStepGroup",
        "getTemplate",
        "getTemplateStep",
        "getTemplateStepGroup",
        "getWorkflow",
        "getWorkflowStep",
        "getWorkflowStepGroup",
        "listPlugins",
        "listTemplateStepGroups",
        "listTemplateSteps",
        "listTemplates",
        "listWorkflowStepGroups",
        "listWorkflowSteps",
        "listWorkflows",
        "retryWorkflowStep",
        "startWorkflow",
        "stopWorkflow",
        "updateTemplate",
        "updateWorkflow",
        "updateWorkflowStep",
        "updateWorkflowStepGroup"
      ]
    },
    {
      "service": "migrationhubstrategy",
      "className": "MigrationHubStrategy",
      "operations": [
        "getApplicationComponentDetails",
        "getApplicationComponentStrategies",
        "getAssessment",
        "getImportFileTask",
        "getLatestAssessmentId",
        "getPortfolioPreferences",
        "getPortfolioSummary",
        "getRecommendationReportDetails",
        "getServerDetails",
        "getServerStrategies",
        "listAnalyzableServers",
        "listApplicationComponents",
        "listCollectors",
        "listImportFileTask",
        "listServers",
        "putPortfolioPreferences",
        "startAssessment",
        "startImportFileTask",
        "startRecommendationReportGeneration",
        "stopAssessment",
        "updateApplicationComponentConfig",
        "updateServerConfig"
      ]
    },
    {
      "service": "mpa",
      "className": "MPA",
      "operations": [
        "getPolicyVersion",
        "getResourcePolicy",
        "listPolicies",
        "listPolicyVersions",
        "listResourcePolicies",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "cancelSession",
        "createApprovalTeam",
        "createIdentitySource",
        "deleteIdentitySource",
        "deleteInactiveApprovalTeamVersion",
        "getApprovalTeam",
        "getIdentitySource",
        "getSession",
        "listApprovalTeams",
        "listIdentitySources",
        "listSessions",
        "startActiveApprovalTeamDeletion",
        "updateApprovalTeam"
      ]
    },
    {
      "service": "mq",
      "className": "mq",
      "operations": [
        "createBroker",
        "createConfiguration",
        "createTags",
        "createUser",
        "deleteBroker",
        "deleteConfiguration",
        "deleteTags",
        "deleteUser",
        "describeBroker",
        "describeBrokerEngineTypes",
        "describeBrokerInstanceOptions",
        "describeConfiguration",
        "describeConfigurationRevision",
        "describeUser",
        "listBrokers",
        "listConfigurationRevisions",
        "listConfigurations",
        "listTags",
        "listUsers",
        "promote",
        "rebootBroker",
        "updateBroker",
        "updateConfiguration",
        "updateUser"
      ]
    },
    {
      "service": "mturk",
      "className": "MTurk",
      "operations": [
        "acceptQualificationRequest",
        "approveAssignment",
        "associateQualificationWithWorker",
        "createAdditionalAssignmentsForHIT",
        "createHIT",
        "createHITType",
        "createHITWithHITType",
        "createQualificationType",
        "createWorkerBlock",
        "deleteHIT",
        "deleteQualificationType",
        "deleteWorkerBlock",
        "disassociateQualificationFromWorker",
        "getAccountBalance",
        "getAssignment",
        "getFileUploadURL",
        "getHIT",
        "getQualificationScore",
        "getQualificationType",
        "listAssignmentsForHIT",
        "listBonusPayments",
        "listHITs",
        "listHITsForQualificationType",
        "listQualificationRequests",
        "listQualificationTypes",
        "listReviewableHITs",
        "listReviewPolicyResultsForHIT",
        "listWorkerBlocks",
        "listWorkersWithQualificationType",
        "notifyWorkers",
        "rejectAssignment",
        "rejectQualificationRequest",
        "sendBonus",
        "sendTestEventNotification",
        "updateExpirationForHIT",
        "updateHITReviewStatus",
        "updateHITTypeOfHIT",
        "updateNotificationSettings",
        "updateQualificationType"
      ]
    },
    {
      "service": "mwaa",
      "className": "MWAA",
      "operations": [
        "createCliToken",
        "createEnvironment",
        "createWebLoginToken",
        "deleteEnvironment",
        "getEnvironment",
        "invokeRestApi",
        "listEnvironments",
        "listTagsForResource",
        "publishMetrics",
        "tagResource",
        "untagResource",
        "updateEnvironment"
      ]
    },
    {
      "service": "neptune",
      "className": "Neptune",
      "operations": [
        "addRoleToDBCluster",
        "addSourceIdentifierToSubscription",
        "addTagsToResource",
        "applyPendingMaintenanceAction",
        "copyDBClusterParameterGroup",
        "copyDBClusterSnapshot",
        "copyDBParameterGroup",
        "createDBCluster",
        "createDBClusterEndpoint",
        "createDBClusterParameterGroup",
        "createDBClusterSnapshot",
        "createDBInstance",
        "createDBParameterGroup",
        "createDBSubnetGroup",
        "createEventSubscription",
        "createGlobalCluster",
        "deleteDBCluster",
        "deleteDBClusterEndpoint",
        "deleteDBClusterParameterGroup",
        "deleteDBClusterSnapshot",
        "deleteDBInstance",
        "deleteDBParameterGroup",
        "deleteDBSubnetGroup",
        "deleteEventSubscription",
        "deleteGlobalCluster",
        "describeDBClusterEndpoints",
        "describeDBClusterParameterGroups",
        "describeDBClusterParameters",
        "describeDBClusters",
        "describeDBClusterSnapshotAttributes",
        "describeDBClusterSnapshots",
        "describeDBEngineVersions",
        "describeDBInstances",
        "describeDBParameterGroups",
        "describeDBParameters",
        "describeDBSubnetGroups",
        "describeEngineDefaultClusterParameters",
        "describeEngineDefaultParameters",
        "describeEventCategories",
        "describeEvents",
        "describeEventSubscriptions",
        "describeGlobalClusters",
        "describeOrderableDBInstanceOptions",
        "describePendingMaintenanceActions",
        "describeValidDBInstanceModifications",
        "failoverDBCluster",
        "failoverGlobalCluster",
        "listTagsForResource",
        "modifyDBCluster",
        "modifyDBClusterEndpoint",
        "modifyDBClusterParameterGroup",
        "modifyDBClusterSnapshotAttribute",
        "modifyDBInstance",
        "modifyDBParameterGroup",
        "modifyDBSubnetGroup",
        "modifyEventSubscription",
        "modifyGlobalCluster",
        "promoteReadReplicaDBCluster",
        "rebootDBInstance",
        "removeFromGlobalCluster",
        "removeRoleFromDBCluster",
        "removeSourceIdentifierFromSubscription",
        "removeTagsFromResource",
        "resetDBClusterParameterGroup",
        "resetDBParameterGroup",
        "restoreDBClusterFromSnapshot",
        "restoreDBClusterToPointInTime",
        "startDBCluster",
        "stopDBCluster",
        "switchoverGlobalCluster"
      ]
    },
    {
      "service": "neptune-graph",
      "className": "NeptuneGraph",
      "operations": [
        "cancelQuery",
        "executeQuery",
        "getGraphSummary",
        "getQuery",
        "listQueries",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "cancelExportTask",
        "cancelImportTask",
        "createGraph",
        "createGraphSnapshot",
        "createGraphUsingImportTask",
        "createPrivateGraphEndpoint",
        "deleteGraph",
        "deleteGraphSnapshot",
        "deletePrivateGraphEndpoint",
        "getExportTask",
        "getGraph",
        "getGraphSnapshot",
        "getImportTask",
        "getPrivateGraphEndpoint",
        "listExportTasks",
        "listGraphSnapshots",
        "listGraphs",
        "listImportTasks",
        "listPrivateGraphEndpoints",
        "resetGraph",
        "restoreGraphFromSnapshot",
        "startExportTask",
        "startImportTask",
        "updateGraph"
      ]
    },
    {
      "service": "neptunedata",
      "className": "neptunedata",
      "operations": [
        "cancelGremlinQuery",
        "cancelLoaderJob",
        "cancelMLDataProcessingJob",
        "cancelMLModelTrainingJob",
        "cancelMLModelTransformJob",
        "cancelOpenCypherQuery",
        "createMLEndpoint",
        "deleteMLEndpoint",
        "deletePropertygraphStatistics",
        "deleteSparqlStatistics",
        "executeFastReset",
        "executeGremlinExplainQuery",
        "executeGremlinProfileQuery",
        "executeGremlinQuery",
        "executeOpenCypherExplainQuery",
        "executeOpenCypherQuery",
        "getEngineStatus",
        "getGremlinQueryStatus",
        "getLoaderJobStatus",
        "getMLDataProcessingJob",
        "getMLEndpoint",
        "getMLModelTrainingJob",
        "getMLModelTransformJob",
        "getOpenCypherQueryStatus",
        "getPropertygraphStatistics",
        "getPropertygraphStream",
        "getPropertygraphSummary",
        "getRDFGraphSummary",
        "getSparqlStatistics",
        "getSparqlStream",
        "listGremlinQueries",
        "listLoaderJobs",
        "listMLDataProcessingJobs",
        "listMLEndpoints",
        "listMLModelTrainingJobs",
        "listMLModelTransformJobs",
        "listOpenCypherQueries",
        "managePropertygraphStatistics",
        "manageSparqlStatistics",
        "startLoaderJob",
        "startMLDataProcessingJob",
        "startMLModelTrainingJob",
        "startMLModelTransformJob"
      ]
    },
    {
      "service": "network-firewall",
      "className": "NetworkFirewall",
      "operations": [
        "acceptNetworkFirewallTransitGatewayAttachment",
        "associateAvailabilityZones",
        "associateFirewallPolicy",
        "associateSubnets",
        "createFirewall",
        "createFirewallPolicy",
        "createRuleGroup",
        "createTLSInspectionConfiguration",
        "createVpcEndpointAssociation",
        "deleteFirewall",
        "deleteFirewallPolicy",
        "deleteNetworkFirewallTransitGatewayAttachment",
        "deleteResourcePolicy",
        "deleteRuleGroup",
        "deleteTLSInspectionConfiguration",
        "deleteVpcEndpointAssociation",
        "describeFirewall",
        "describeFirewallMetadata",
        "describeFirewallPolicy",
        "describeFlowOperation",
        "describeLoggingConfiguration",
        "describeResourcePolicy",
        "describeRuleGroup",
        "describeRuleGroupMetadata",
        "describeRuleGroupSummary",
        "describeTLSInspectionConfiguration",
        "describeVpcEndpointAssociation",
        "disassociateAvailabilityZones",
        "disassociateSubnets",
        "getAnalysisReportResults",
        "listAnalysisReports",
        "listFirewallPolicies",
        "listFirewalls",
        "listFlowOperationResults",
        "listFlowOperations",
        "listRuleGroups",
        "listTagsForResource",
        "listTLSInspectionConfigurations",
        "listVpcEndpointAssociations",
        "putResourcePolicy",
        "rejectNetworkFirewallTransitGatewayAttachment",
        "startAnalysisReport",
        "startFlowCapture",
        "startFlowFlush",
        "tagResource",
        "untagResource",
        "updateAvailabilityZoneChangeProtection",
        "updateFirewallAnalysisSettings",
        "updateFirewallDeleteProtection",
        "updateFirewallDescription",
        "updateFirewallEncryptionConfiguration",
        "updateFirewallPolicy",
        "updateFirewallPolicyChangeProtection",
        "updateLoggingConfiguration",
        "updateRuleGroup",
        "updateSubnetChangeProtection",
        "updateTLSInspectionConfiguration"
      ]
    },
    {
      "service": "networkflowmonitor",
      "className": "NetworkFlowMonitor",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "createMonitor",
        "createScope",
        "deleteMonitor",
        "deleteScope",
        "getMonitor",
        "getQueryResultsMonitorTopContributors",
        "getQueryResultsWorkloadInsightsTopContributors",
        "getQueryResultsWorkloadInsightsTopContributorsData",
        "getQueryStatusMonitorTopContributors",
        "getQueryStatusWorkloadInsightsTopContributors",
        "getQueryStatusWorkloadInsightsTopContributorsData",
        "getScope",
        "listMonitors",
        "listScopes",
        "startQueryMonitorTopContributors",
        "startQueryWorkloadInsightsTopContributors",
        "startQueryWorkloadInsightsTopContributorsData",
        "stopQueryMonitorTopContributors",
        "stopQueryWorkloadInsightsTopContributors",
        "stopQueryWorkloadInsightsTopContributorsData",
        "updateMonitor",
        "updateScope"
      ]
    },
    {
      "service": "networkmanager",
      "className": "NetworkManager",
      "operations": [
        "acceptAttachment",
        "associateConnectPeer",
        "associateCustomerGateway",
        "associateLink",
        "associateTransitGatewayConnectPeer",
        "createConnectAttachment",
        "createConnection",
        "createConnectPeer",
        "createCoreNetwork",
        "createDevice",
        "createDirectConnectGatewayAttachment",
        "createGlobalNetwork",
        "createLink",
        "createSite",
        "createSiteToSiteVpnAttachment",
        "createTransitGatewayPeering",
        "createTransitGatewayRouteTableAttachment",
        "createVpcAttachment",
        "deleteAttachment",
        "deleteConnection",
        "deleteConnectPeer",
        "deleteCoreNetwork",
        "deleteCoreNetworkPolicyVersion",
        "deleteDevice",
        "deleteGlobalNetwork",
        "deleteLink",
        "deletePeering",
        "deleteResourcePolicy",
        "deleteSite",
        "deregisterTransitGateway",
        "describeGlobalNetworks",
        "disassociateConnectPeer",
        "disassociateCustomerGateway",
        "disassociateLink",
        "disassociateTransitGatewayConnectPeer",
        "executeCoreNetworkChangeSet",
        "getConnectAttachment",
        "getConnections",
        "getConnectPeer",
        "getConnectPeerAssociations",
        "getCoreNetwork",
        "getCoreNetworkChangeEvents",
        "getCoreNetworkChangeSet",
        "getCoreNetworkPolicy",
        "getCustomerGatewayAssociations",
        "getDevices",
        "getDirectConnectGatewayAttachment",
        "getLinkAssociations",
        "getLinks",
        "getNetworkResourceCounts",
        "getNetworkResourceRelationships",
        "getNetworkResources",
        "getNetworkRoutes",
        "getNetworkTelemetry",
        "getResourcePolicy",
        "getRouteAnalysis",
        "getSites",
        "getSiteToSiteVpnAttachment",
        "getTransitGatewayConnectPeerAssociations",
        "getTransitGatewayPeering",
        "getTransitGatewayRegistrations",
        "getTransitGatewayRouteTableAttachment",
        "getVpcAttachment",
        "listAttachments",
        "listConnectPeers",
        "listCoreNetworkPolicyVersions",
        "listCoreNetworks",
        "listOrganizationServiceAccessStatus",
        "listPeerings",
        "listTagsForResource",
        "putCoreNetworkPolicy",
        "putResourcePolicy",
        "registerTransitGateway",
        "rejectAttachment",
        "restoreCoreNetworkPolicyVersion",
        "startOrganizationServiceAccessUpdate",
        "startRouteAnalysis",
        "tagResource",
        "untagResource",
        "updateConnection",
        "updateCoreNetwork",
        "updateDevice",
        "updateDirectConnectGatewayAttachment",
        "updateGlobalNetwork",
        "updateLink",
        "updateNetworkResourceMetadata",
        "updateSite",
        "updateVpcAttachment"
      ]
    },
    {
      "service": "networkmonitor",
      "className": "NetworkMonitor",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "createMonitor",
        "createProbe",
        "deleteMonitor",
        "deleteProbe",
        "getMonitor",
        "getProbe",
        "listMonitors",
        "updateMonitor",
        "updateProbe"
      ]
    },
    {
      "service": "notifications",
      "className": "Notifications",
      "operations": [
        "listManagedNotificationChannelAssociations",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "associateChannel",
        "associateManagedNotificationAccountContact",
        "associateManagedNotificationAdditionalChannel",
        "createEventRule",
        "createNotificationConfiguration",
        "deleteEventRule",
        "deleteNotificationConfiguration",
        "deregisterNotificationHub",
        "disableNotificationsAccessForOrganization",
        "disassociateChannel",
        "disassociateManagedNotificationAccountContact",
        "disassociateManagedNotificationAdditionalChannel",
        "enableNotificationsAccessForOrganization",
        "getEventRule",
        "getManagedNotificationChildEvent",
        "getManagedNotificationConfiguration",
        "getManagedNotificationEvent",
        "getNotificationConfiguration",
        "getNotificationEvent",
        "getNotificationsAccessForOrganization",
        "listChannels",
        "listEventRules",
        "listManagedNotificationChildEvents",
        "listManagedNotificationConfigurations",
        "listManagedNotificationEvents",
        "listNotificationConfigurations",
        "listNotificationEvents",
        "listNotificationHubs",
        "registerNotificationHub",
        "updateEventRule",
        "updateNotificationConfiguration"
      ]
    },
    {
      "service": "notificationscontacts",
      "className": "NotificationsContacts",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "activateEmailContact",
        "createEmailContact",
        "deleteEmailContact",
        "getEmailContact",
        "listEmailContacts",
        "sendActivationCode"
      ]
    },
    {
      "service": "oam",
      "className": "OAM",
      "operations": [
        "createLink",
        "createSink",
        "deleteLink",
        "deleteSink",
        "getLink",
        "getSink",
        "getSinkPolicy",
        "listAttachedLinks",
        "listLinks",
        "listSinks",
        "listTagsForResource",
        "putSinkPolicy",
        "tagResource",
        "untagResource",
        "updateLink"
      ]
    },
    {
      "service": "observabilityadmin",
      "className": "ObservabilityAdmin",
      "operations": [
        "createTelemetryRule",
        "createTelemetryRuleForOrganization",
        "deleteTelemetryRule",
        "deleteTelemetryRuleForOrganization",
        "getTelemetryEvaluationStatus",
        "getTelemetryEvaluationStatusForOrganization",
        "getTelemetryRule",
        "getTelemetryRuleForOrganization",
        "listResourceTelemetry",
        "listResourceTelemetryForOrganization",
        "listTagsForResource",
        "listTelemetryRules",
        "listTelemetryRulesForOrganization",
        "startTelemetryEvaluation",
        "startTelemetryEvaluationForOrganization",
        "stopTelemetryEvaluation",
        "stopTelemetryEvaluationForOrganization",
        "tagResource",
        "untagResource",
        "updateTelemetryRule",
        "updateTelemetryRuleForOrganization"
      ]
    },
    {
      "service": "odb",
      "className": "odb",
      "operations": [
        "acceptMarketplaceRegistration",
        "getOciOnboardingStatus",
        "initializeService",
        "listDbSystemShapes",
        "listGiVersions",
        "listSystemVersions",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "createCloudAutonomousVmCluster",
        "createCloudExadataInfrastructure",
        "createCloudVmCluster",
        "createOdbNetwork",
        "createOdbPeeringConnection",
        "deleteCloudAutonomousVmCluster",
        "deleteCloudExadataInfrastructure",
        "deleteCloudVmCluster",
        "deleteOdbNetwork",
        "deleteOdbPeeringConnection",
        "getCloudAutonomousVmCluster",
        "getCloudExadataInfrastructure",
        "getCloudExadataInfrastructureUnallocatedResources",
        "getCloudVmCluster",
        "getDbNode",
        "getDbServer",
        "getOdbNetwork",
        "getOdbPeeringConnection",
        "listAutonomousVirtualMachines",
        "listCloudAutonomousVmClusters",
        "listCloudExadataInfrastructures",
        "listCloudVmClusters",
        "listDbNodes",
        "listDbServers",
        "listOdbNetworks",
        "listOdbPeeringConnections",
        "rebootDbNode",
        "startDbNode",
        "stopDbNode",
        "updateCloudExadataInfrastructure",
        "updateOdbNetwork"
      ]
    },
    {
      "service": "omics",
      "className": "Omics",
      "operations": [
        "deleteS3AccessPolicy",
        "getS3AccessPolicy",
        "putS3AccessPolicy",
        "abortMultipartReadSetUpload",
        "acceptShare",
        "batchDeleteReadSet",
        "cancelAnnotationImportJob",
        "cancelRun",
        "cancelVariantImportJob",
        "completeMultipartReadSetUpload",
        "createAnnotationStore",
        "createAnnotationStoreVersion",
        "createMultipartReadSetUpload",
        "createReferenceStore",
        "createRunCache",
        "createRunGroup",
        "createSequenceStore",
        "createShare",
        "createVariantStore",
        "createWorkflow",
        "createWorkflowVersion",
        "deleteAnnotationStore",
        "deleteAnnotationStoreVersions",
        "deleteReference",
        "deleteReferenceStore",
        "deleteRun",
        "deleteRunCache",
        "deleteRunGroup",
        "deleteSequenceStore",
        "deleteShare",
        "deleteVariantStore",
        "deleteWorkflow",
        "deleteWorkflowVersion",
        "getAnnotationImportJob",
        "getAnnotationStore",
        "getAnnotationStoreVersion",
        "getReadSet",
        "getReadSetActivationJob",
        "getReadSetExportJob",
        "getReadSetImportJob",
        "getReadSetMetadata",
        "getReference",
        "getReferenceImportJob",
        "getReferenceMetadata",
        "getReferenceStore",
        "getRun",
        "getRunCache",
        "getRunGroup",
        "getRunTask",
        "getSequenceStore",
        "getShare",
        "getVariantImportJob",
        "getVariantStore",
        "getWorkflow",
        "getWorkflowVersion",
        "listAnnotationImportJobs",
        "listAnnotationStoreVersions",
        "listAnnotationStores",
        "listMultipartReadSetUploads",
        "listReadSetActivationJobs",
        "listReadSetExportJobs",
        "listReadSetImportJobs",
        "listReadSetUploadParts",
        "listReadSets",
        "listReferenceImportJobs",
        "listReferenceStores",
        "listReferences",
        "listRunCaches",
        "listRunGroups",
        "listRunTasks",
        "listRuns",
        "listSequenceStores",
        "listShares",
        "listTagsForResource",
        "listVariantImportJobs",
        "listVariantStores",
        "listWorkflowVersions",
        "listWorkflows",
        "startAnnotationImportJob",
        "startReadSetActivationJob",
        "startReadSetExportJob",
        "startReadSetImportJob",
        "startReferenceImportJob",
        "startRun",
        "startVariantImportJob",
        "tagResource",
        "untagResource",
        "updateAnnotationStore",
        "updateAnnotationStoreVersion",
        "updateRunCache",
        "updateRunGroup",
        "updateSequenceStore",
        "updateVariantStore",
        "updateWorkflow",
        "updateWorkflowVersion",
        "uploadReadSetPart"
      ]
    },
    {
      "service": "opensearch",
      "className": "OpenSearch",
      "operations": [
        "acceptInboundConnection",
        "addDataSource",
        "addDirectQueryDataSource",
        "addTags",
        "associatePackage",
        "associatePackages",
        "authorizeVpcEndpointAccess",
        "cancelDomainConfigChange",
        "cancelServiceSoftwareUpdate",
        "createApplication",
        "createDomain",
        "createOutboundConnection",
        "createPackage",
        "createVpcEndpoint",
        "deleteApplication",
        "deleteDataSource",
        "deleteDirectQueryDataSource",
        "deleteDomain",
        "deleteInboundConnection",
        "deleteOutboundConnection",
        "deletePackage",
        "deleteVpcEndpoint",
        "describeDomain",
        "describeDomainAutoTunes",
        "describeDomainChangeProgress",
        "describeDomainConfig",
        "describeDomainHealth",
        "describeDomainNodes",
        "describeDomains",
        "describeDryRunProgress",
        "describeInboundConnections",
        "describeInstanceTypeLimits",
        "describeOutboundConnections",
        "describePackages",
        "describeReservedInstanceOfferings",
        "describeReservedInstances",
        "describeVpcEndpoints",
        "dissociatePackage",
        "dissociatePackages",
        "getApplication",
        "getCompatibleVersions",
        "getDataSource",
        "getDirectQueryDataSource",
        "getDomainMaintenanceStatus",
        "getPackageVersionHistory",
        "getUpgradeHistory",
        "getUpgradeStatus",
        "listApplications",
        "listDataSources",
        "listDirectQueryDataSources",
        "listDomainMaintenances",
        "listDomainNames",
        "listDomainsForPackage",
        "listInstanceTypeDetails",
        "listPackagesForDomain",
        "listScheduledActions",
        "listTags",
        "listVersions",
        "listVpcEndpointAccess",
        "listVpcEndpoints",
        "listVpcEndpointsForDomain",
        "purchaseReservedInstanceOffering",
        "rejectInboundConnection",
        "removeTags",
        "revokeVpcEndpointAccess",
        "startDomainMaintenance",
        "startServiceSoftwareUpdate",
        "updateApplication",
        "updateDataSource",
        "updateDirectQueryDataSource",
        "updateDomainConfig",
        "updatePackage",
        "updatePackageScope",
        "updateScheduledAction",
        "updateVpcEndpoint",
        "upgradeDomain"
      ]
    },
    {
      "service": "opensearchserverless",
      "className": "OpenSearchServerless",
      "operations": [
        "batchGetCollection",
        "batchGetEffectiveLifecyclePolicy",
        "batchGetLifecyclePolicy",
        "batchGetVpcEndpoint",
        "createLifecyclePolicy",
        "createSecurityPolicy",
        "getAccountSettings",
        "getPoliciesStats",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "updateAccountSettings",
        "updateVpcEndpoint",
        "createAccessPolicy",
        "createCollection",
        "createSecurityConfig",
        "createVpcEndpoint",
        "deleteAccessPolicy",
        "deleteCollection",
        "deleteLifecyclePolicy",
        "deleteSecurityConfig",
        "deleteSecurityPolicy",
        "deleteVpcEndpoint",
        "getAccessPolicy",
        "getSecurityConfig",
        "getSecurityPolicy",
        "listAccessPolicies",
        "listCollections",
        "listLifecyclePolicies",
        "listSecurityConfigs",
        "listSecurityPolicies",
        "listVpcEndpoints",
        "updateAccessPolicy",
        "updateCollection",
        "updateLifecyclePolicy",
        "updateSecurityConfig",
        "updateSecurityPolicy"
      ]
    },
    {
      "service": "opsworks",
      "className": "OpsWorks",
      "operations": [
        "assignInstance",
        "assignVolume",
        "associateElasticIp",
        "attachElasticLoadBalancer",
        "cloneStack",
        "createApp",
        "createDeployment",
        "createInstance",
        "createLayer",
        "createStack",
        "createUserProfile",
        "deleteApp",
        "deleteInstance",
        "deleteLayer",
        "deleteStack",
        "deleteUserProfile",
        "deregisterEcsCluster",
        "deregisterElasticIp",
        "deregisterInstance",
        "deregisterRdsDbInstance",
        "deregisterVolume",
        "describeAgentVersions",
        "describeApps",
        "describeCommands",
        "describeDeployments",
        "describeEcsClusters",
        "describeElasticIps",
        "describeElasticLoadBalancers",
        "describeInstances",
        "describeLayers",
        "describeLoadBasedAutoScaling",
        "describeMyUserProfile",
        "describeOperatingSystems",
        "describePermissions",
        "describeRaidArrays",
        "describeRdsDbInstances",
        "describeServiceErrors",
        "describeStackProvisioningParameters",
        "describeStacks",
        "describeStackSummary",
        "describeTimeBasedAutoScaling",
        "describeUserProfiles",
        "describeVolumes",
        "detachElasticLoadBalancer",
        "disassociateElasticIp",
        "getHostnameSuggestion",
        "grantAccess",
        "listTags",
        "rebootInstance",
        "registerEcsCluster",
        "registerElasticIp",
        "registerInstance",
        "registerRdsDbInstance",
        "registerVolume",
        "setLoadBasedAutoScaling",
        "setPermission",
        "setTimeBasedAutoScaling",
        "startInstance",
        "startStack",
        "stopInstance",
        "stopStack",
        "tagResource",
        "unassignInstance",
        "unassignVolume",
        "untagResource",
        "updateApp",
        "updateElasticIp",
        "updateInstance",
        "updateLayer",
        "updateMyUserProfile",
        "updateRdsDbInstance",
        "updateStack",
        "updateUserProfile",
        "updateVolume"
      ]
    },
    {
      "service": "opsworkscm",
      "className": "OpsWorksCM",
      "operations": [
        "associateNode",
        "createBackup",
        "createServer",
        "deleteBackup",
        "deleteServer",
        "describeAccountAttributes",
        "describeBackups",
        "describeEvents",
        "describeNodeAssociationStatus",
        "describeServers",
        "disassociateNode",
        "exportServerEngineAttribute",
        "listTagsForResource",
        "restoreServer",
        "startMaintenance",
        "tagResource",
        "untagResource",
        "updateServer",
        "updateServerEngineAttributes"
      ]
    },
    {
      "service": "organizations",
      "className": "Organizations",
      "operations": [
        "acceptHandshake",
        "attachPolicy",
        "cancelHandshake",
        "closeAccount",
        "createAccount",
        "createGovCloudAccount",
        "createOrganization",
        "createOrganizationalUnit",
        "createPolicy",
        "declineHandshake",
        "deleteOrganization",
        "deleteOrganizationalUnit",
        "deletePolicy",
        "deleteResourcePolicy",
        "deregisterDelegatedAdministrator",
        "describeAccount",
        "describeCreateAccountStatus",
        "describeEffectivePolicy",
        "describeHandshake",
        "describeOrganization",
        "describeOrganizationalUnit",
        "describePolicy",
        "describeResourcePolicy",
        "detachPolicy",
        "disableAWSServiceAccess",
        "disablePolicyType",
        "enableAllFeatures",
        "enableAWSServiceAccess",
        "enablePolicyType",
        "inviteAccountToOrganization",
        "leaveOrganization",
        "listAccounts",
        "listAccountsForParent",
        "listAWSServiceAccessForOrganization",
        "listChildren",
        "listCreateAccountStatus",
        "listDelegatedAdministrators",
        "listDelegatedServicesForAccount",
        "listHandshakesForAccount",
        "listHandshakesForOrganization",
        "listOrganizationalUnitsForParent",
        "listParents",
        "listPolicies",
        "listPoliciesForTarget",
        "listRoots",
        "listTagsForResource",
        "listTargetsForPolicy",
        "moveAccount",
        "putResourcePolicy",
        "registerDelegatedAdministrator",
        "removeAccountFromOrganization",
        "tagResource",
        "untagResource",
        "updateOrganizationalUnit",
        "updatePolicy"
      ]
    },
    {
      "service": "osis",
      "className": "OSIS",
      "operations": [
        "createPipeline",
        "deletePipeline",
        "getPipeline",
        "getPipelineBlueprint",
        "getPipelineChangeProgress",
        "listPipelineBlueprints",
        "listPipelines",
        "listTagsForResource",
        "startPipeline",
        "stopPipeline",
        "tagResource",
        "untagResource",
        "updatePipeline",
        "validatePipeline"
      ]
    },
    {
      "service": "outposts",
      "className": "Outposts",
      "operations": [
        "cancelCapacityTask",
        "cancelOrder",
        "createOrder",
        "createOutpost",
        "createSite",
        "deleteOutpost",
        "deleteSite",
        "getCapacityTask",
        "getCatalogItem",
        "getConnection",
        "getOrder",
        "getOutpost",
        "getOutpostBillingInformation",
        "getOutpostInstanceTypes",
        "getOutpostSupportedInstanceTypes",
        "getSite",
        "getSiteAddress",
        "listAssetInstances",
        "listAssets",
        "listBlockingInstancesForCapacityTask",
        "listCapacityTasks",
        "listCatalogItems",
        "listOrders",
        "listOutposts",
        "listSites",
        "listTagsForResource",
        "startCapacityTask",
        "startConnection",
        "tagResource",
        "untagResource",
        "updateOutpost",
        "updateSite",
        "updateSiteAddress",
        "updateSiteRackPhysicalProperties"
      ]
    },
    {
      "service": "panorama",
      "className": "Panorama",
      "operations": [
        "createApplicationInstance",
        "createJobForDevices",
        "createNodeFromTemplateJob",
        "createPackage",
        "createPackageImportJob",
        "deleteDevice",
        "deletePackage",
        "deregisterPackageVersion",
        "describeApplicationInstance",
        "describeApplicationInstanceDetails",
        "describeDevice",
        "describeDeviceJob",
        "describeNode",
        "describeNodeFromTemplateJob",
        "describePackage",
        "describePackageImportJob",
        "describePackageVersion",
        "listApplicationInstanceDependencies",
        "listApplicationInstanceNodeInstances",
        "listApplicationInstances",
        "listDevices",
        "listDevicesJobs",
        "listNodeFromTemplateJobs",
        "listNodes",
        "listPackageImportJobs",
        "listPackages",
        "listTagsForResource",
        "provisionDevice",
        "registerPackageVersion",
        "removeApplicationInstance",
        "signalApplicationInstanceNodeInstances",
        "tagResource",
        "untagResource",
        "updateDeviceMetadata"
      ]
    },
    {
      "service": "partnercentral-selling",
      "className": "PartnerCentralSelling",
      "operations": [
        "getSellingSystemSettings",
        "listTagsForResource",
        "putSellingSystemSettings",
        "tagResource",
        "untagResource",
        "acceptEngagementInvitation",
        "assignOpportunity",
        "associateOpportunity",
        "createEngagement",
        "createEngagementInvitation",
        "createOpportunity",
        "createResourceSnapshot",
        "createResourceSnapshotJob",
        "deleteResourceSnapshotJob",
        "disassociateOpportunity",
        "getAwsOpportunitySummary",
        "getEngagement",
        "getEngagementInvitation",
        "getOpportunity",
        "getResourceSnapshot",
        "getResourceSnapshotJob",
        "listEngagementByAcceptingInvitationTasks",
        "listEngagementFromOpportunityTasks",
        "listEngagementInvitations",
        "listEngagementMembers",
        "listEngagementResourceAssociations",
        "listEngagements",
        "listOpportunities",
        "listResourceSnapshotJobs",
        "listResourceSnapshots",
        "listSolutions",
        "rejectEngagementInvitation",
        "startEngagementByAcceptingInvitationTask",
        "startEngagementFromOpportunityTask",
        "startResourceSnapshotJob",
        "stopResourceSnapshotJob",
        "submitOpportunity",
        "updateOpportunity"
      ]
    },
    {
      "service": "payment-cryptography",
      "className": "PaymentCryptography",
      "operations": [
        "exportKey",
        "getParametersForExport",
        "getParametersForImport",
        "getPublicKeyCertificate",
        "importKey",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "createAlias",
        "createKey",
        "deleteAlias",
        "deleteKey",
        "getAlias",
        "getKey",
        "listAliases",
        "listKeys",
        "restoreKey",
        "startKeyUsage",
        "stopKeyUsage",
        "updateAlias"
      ]
    },
    {
      "service": "payment-cryptography-data",
      "className": "PaymentCryptographyData",
      "operations": [
        "decryptData",
        "encryptData",
        "generateCardValidationData",
        "generateMac",
        "generateMacEmvPinChange",
        "generatePinData",
        "reEncryptData",
        "translatePinData",
        "verifyAuthRequestCryptogram",
        "verifyCardValidationData",
        "verifyMac",
        "verifyPinData"
      ]
    },
    {
      "service": "pca-connector-ad",
      "className": "PcaConnectorAd",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "createConnector",
        "createDirectoryRegistration",
        "createServicePrincipalName",
        "createTemplate",
        "createTemplateGroupAccessControlEntry",
        "deleteConnector",
        "deleteDirectoryRegistration",
        "deleteServicePrincipalName",
        "deleteTemplate",
        "deleteTemplateGroupAccessControlEntry",
        "getConnector",
        "getDirectoryRegistration",
        "getServicePrincipalName",
        "getTemplate",
        "getTemplateGroupAccessControlEntry",
        "listConnectors",
        "listDirectoryRegistrations",
        "listServicePrincipalNames",
        "listTemplateGroupAccessControlEntries",
        "listTemplates",
        "updateTemplate",
        "updateTemplateGroupAccessControlEntry"
      ]
    },
    {
      "service": "pca-connector-scep",
      "className": "PcaConnectorScep",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "createChallenge",
        "createConnector",
        "deleteChallenge",
        "deleteConnector",
        "getChallengeMetadata",
        "getChallengePassword",
        "getConnector",
        "listChallengeMetadata",
        "listConnectors"
      ]
    },
    {
      "service": "pcs",
      "className": "PCS",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "createCluster",
        "createComputeNodeGroup",
        "createQueue",
        "deleteCluster",
        "deleteComputeNodeGroup",
        "deleteQueue",
        "getCluster",
        "getComputeNodeGroup",
        "getQueue",
        "listClusters",
        "listComputeNodeGroups",
        "listQueues",
        "registerComputeNodeGroupInstance",
        "updateComputeNodeGroup",
        "updateQueue"
      ]
    },
    {
      "service": "personalize",
      "className": "Personalize",
      "operations": [
        "createBatchInferenceJob",
        "createBatchSegmentJob",
        "createCampaign",
        "createDataDeletionJob",
        "createDataset",
        "createDatasetExportJob",
        "createDatasetGroup",
        "createDatasetImportJob",
        "createEventTracker",
        "createFilter",
        "createMetricAttribution",
        "createRecommender",
        "createSchema",
        "createSolution",
        "createSolutionVersion",
        "deleteCampaign",
        "deleteDataset",
        "deleteDatasetGroup",
        "deleteEventTracker",
        "deleteFilter",
        "deleteMetricAttribution",
        "deleteRecommender",
        "deleteSchema",
        "deleteSolution",
        "describeAlgorithm",
        "describeBatchInferenceJob",
        "describeBatchSegmentJob",
        "describeCampaign",
        "describeDataDeletionJob",
        "describeDataset",
        "describeDatasetExportJob",
        "describeDatasetGroup",
        "describeDatasetImportJob",
        "describeEventTracker",
        "describeFeatureTransformation",
        "describeFilter",
        "describeMetricAttribution",
        "describeRecipe",
        "describeRecommender",
        "describeSchema",
        "describeSolution",
        "describeSolutionVersion",
        "getSolutionMetrics",
        "listBatchInferenceJobs",
        "listBatchSegmentJobs",
        "listCampaigns",
        "listDataDeletionJobs",
        "listDatasetExportJobs",
        "listDatasetGroups",
        "listDatasetImportJobs",
        "listDatasets",
        "listEventTrackers",
        "listFilters",
        "listMetricAttributionMetrics",
        "listMetricAttributions",
        "listRecipes",
        "listRecommenders",
        "listSchemas",
        "listSolutions",
        "listSolutionVersions",
        "listTagsForResource",
        "startRecommender",
        "stopRecommender",
        "stopSolutionVersionCreation",
        "tagResource",
        "untagResource",
        "updateCampaign",
        "updateDataset",
        "updateMetricAttribution",
        "updateRecommender",
        "updateSolution"
      ]
    },
    {
      "service": "personalize-events",
      "className": "PersonalizeEvents",
      "operations": [
        "putActionInteractions",
        "putActions",
        "putEvents",
        "putItems",
        "putUsers"
      ]
    },
    {
      "service": "personalize-runtime",
      "className": "PersonalizeRuntime",
      "operations": [
        "getActionRecommendations",
        "getPersonalizedRanking",
        "getRecommendations"
      ]
    },
    {
      "service": "pi",
      "className": "PI",
      "operations": [
        "createPerformanceAnalysisReport",
        "deletePerformanceAnalysisReport",
        "describeDimensionKeys",
        "getDimensionKeyDetails",
        "getPerformanceAnalysisReport",
        "getResourceMetadata",
        "getResourceMetrics",
        "listAvailableResourceDimensions",
        "listAvailableResourceMetrics",
        "listPerformanceAnalysisReports",
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "pinpoint",
      "className": "Pinpoint",
      "operations": [
        "createApp",
        "createCampaign",
        "createEmailTemplate",
        "createExportJob",
        "createImportJob",
        "createInAppTemplate",
        "createJourney",
        "createPushTemplate",
        "createRecommenderConfiguration",
        "createSegment",
        "createSmsTemplate",
        "createVoiceTemplate",
        "deleteAdmChannel",
        "deleteApnsChannel",
        "deleteApnsSandboxChannel",
        "deleteApnsVoipChannel",
        "deleteApnsVoipSandboxChannel",
        "deleteApp",
        "deleteBaiduChannel",
        "deleteCampaign",
        "deleteEmailChannel",
        "deleteEmailTemplate",
        "deleteEndpoint",
        "deleteEventStream",
        "deleteGcmChannel",
        "deleteInAppTemplate",
        "deleteJourney",
        "deletePushTemplate",
        "deleteRecommenderConfiguration",
        "deleteSegment",
        "deleteSmsChannel",
        "deleteSmsTemplate",
        "deleteUserEndpoints",
        "deleteVoiceChannel",
        "deleteVoiceTemplate",
        "getAdmChannel",
        "getApnsChannel",
        "getApnsSandboxChannel",
        "getApnsVoipChannel",
        "getApnsVoipSandboxChannel",
        "getApp",
        "getApplicationDateRangeKpi",
        "getApplicationSettings",
        "getApps",
        "getBaiduChannel",
        "getCampaign",
        "getCampaignActivities",
        "getCampaignDateRangeKpi",
        "getCampaigns",
        "getCampaignVersion",
        "getCampaignVersions",
        "getChannels",
        "getEmailChannel",
        "getEmailTemplate",
        "getEndpoint",
        "getEventStream",
        "getExportJob",
        "getExportJobs",
        "getGcmChannel",
        "getImportJob",
        "getImportJobs",
        "getInAppMessages",
        "getInAppTemplate",
        "getJourney",
        "getJourneyDateRangeKpi",
        "getJourneyExecutionActivityMetrics",
        "getJourneyExecutionMetrics",
        "getJourneyRunExecutionActivityMetrics",
        "getJourneyRunExecutionMetrics",
        "getJourneyRuns",
        "getPushTemplate",
        "getRecommenderConfiguration",
        "getRecommenderConfigurations",
        "getSegment",
        "getSegmentExportJobs",
        "getSegmentImportJobs",
        "getSegments",
        "getSegmentVersion",
        "getSegmentVersions",
        "getSmsChannel",
        "getSmsTemplate",
        "getUserEndpoints",
        "getVoiceChannel",
        "getVoiceTemplate",
        "listJourneys",
        "listTagsForResource",
        "listTemplates",
        "listTemplateVersions",
        "phoneNumberValidate",
        "putEvents",
        "putEventStream",
        "removeAttributes",
        "sendMessages",
        "sendOTPMessage",
        "sendUsersMessages",
        "tagResource",
        "untagResource",
        "updateAdmChannel",
        "updateApnsChannel",
        "updateApnsSandboxChannel",
        "updateApnsVoipChannel",
        "updateApnsVoipSandboxChannel",
        "updateApplicationSettings",
        "updateBaiduChannel",
        "updateCampaign",
        "updateEmailChannel",
        "updateEmailTemplate",
        "updateEndpoint",
        "updateEndpointsBatch",
        "updateGcmChannel",
        "updateInAppTemplate",
        "updateJourney",
        "updateJourneyState",
        "updatePushTemplate",
        "updateRecommenderConfiguration",
        "updateSegment",
        "updateSmsChannel",
        "updateSmsTemplate",
        "updateTemplateActiveVersion",
        "updateVoiceChannel",
        "updateVoiceTemplate",
        "verifyOTPMessage"
      ]
    },
    {
      "service": "pinpoint-email",
      "className": "PinpointEmail",
      "operations": [
        "createConfigurationSet",
        "createConfigurationSetEventDestination",
        "createDedicatedIpPool",
        "createDeliverabilityTestReport",
        "createEmailIdentity",
        "deleteConfigurationSet",
        "deleteConfigurationSetEventDestination",
        "deleteDedicatedIpPool",
        "deleteEmailIdentity",
        "getAccount",
        "getBlacklistReports",
        "getConfigurationSet",
        "getConfigurationSetEventDestinations",
        "getDedicatedIp",
        "getDedicatedIps",
        "getDeliverabilityDashboardOptions",
        "getDeliverabilityTestReport",
        "getDomainDeliverabilityCampaign",
        "getDomainStatisticsReport",
        "getEmailIdentity",
        "listConfigurationSets",
        "listDedicatedIpPools",
        "listDeliverabilityTestReports",
        "listDomainDeliverabilityCampaigns",
        "listEmailIdentities",
        "listTagsForResource",
        "putAccountDedicatedIpWarmupAttributes",
        "putAccountSendingAttributes",
        "putConfigurationSetDeliveryOptions",
        "putConfigurationSetReputationOptions",
        "putConfigurationSetSendingOptions",
        "putConfigurationSetTrackingOptions",
        "putDedicatedIpInPool",
        "putDedicatedIpWarmupAttributes",
        "putDeliverabilityDashboardOption",
        "putEmailIdentityDkimAttributes",
        "putEmailIdentityFeedbackAttributes",
        "putEmailIdentityMailFromAttributes",
        "sendEmail",
        "tagResource",
        "untagResource",
        "updateConfigurationSetEventDestination"
      ]
    },
    {
      "service": "pinpoint-sms-voice",
      "className": "PinpointSMSVoice",
      "operations": [
        "createConfigurationSet",
        "createConfigurationSetEventDestination",
        "deleteConfigurationSet",
        "deleteConfigurationSetEventDestination",
        "getConfigurationSetEventDestinations",
        "listConfigurationSets",
        "sendVoiceMessage",
        "updateConfigurationSetEventDestination"
      ]
    },
    {
      "service": "pinpoint-sms-voice-v2",
      "className": "PinpointSMSVoiceV2",
      "operations": [
        "associateOriginationIdentity",
        "associateProtectConfiguration",
        "createConfigurationSet",
        "createEventDestination",
        "createOptOutList",
        "createPool",
        "createProtectConfiguration",
        "createRegistration",
        "createRegistrationAssociation",
        "createRegistrationAttachment",
        "createRegistrationVersion",
        "createVerifiedDestinationNumber",
        "deleteAccountDefaultProtectConfiguration",
        "deleteConfigurationSet",
        "deleteDefaultMessageType",
        "deleteDefaultSenderId",
        "deleteEventDestination",
        "deleteKeyword",
        "deleteMediaMessageSpendLimitOverride",
        "deleteOptedOutNumber",
        "deleteOptOutList",
        "deletePool",
        "deleteProtectConfiguration",
        "deleteProtectConfigurationRuleSetNumberOverride",
        "deleteRegistration",
        "deleteRegistrationAttachment",
        "deleteRegistrationFieldValue",
        "deleteResourcePolicy",
        "deleteTextMessageSpendLimitOverride",
        "deleteVerifiedDestinationNumber",
        "deleteVoiceMessageSpendLimitOverride",
        "describeAccountAttributes",
        "describeAccountLimits",
        "describeConfigurationSets",
        "describeKeywords",
        "describeOptedOutNumbers",
        "describeOptOutLists",
        "describePhoneNumbers",
        "describePools",
        "describeProtectConfigurations",
        "describeRegistrationAttachments",
        "describeRegistrationFieldDefinitions",
        "describeRegistrationFieldValues",
        "describeRegistrations",
        "describeRegistrationSectionDefinitions",
        "describeRegistrationTypeDefinitions",
        "describeRegistrationVersions",
        "describeSenderIds",
        "describeSpendLimits",
        "describeVerifiedDestinationNumbers",
        "disassociateOriginationIdentity",
        "disassociateProtectConfiguration",
        "discardRegistrationVersion",
        "getProtectConfigurationCountryRuleSet",
        "getResourcePolicy",
        "listPoolOriginationIdentities",
        "listProtectConfigurationRuleSetNumberOverrides",
        "listRegistrationAssociations",
        "listTagsForResource",
        "putKeyword",
        "putMessageFeedback",
        "putOptedOutNumber",
        "putProtectConfigurationRuleSetNumberOverride",
        "putRegistrationFieldValue",
        "putResourcePolicy",
        "releasePhoneNumber",
        "releaseSenderId",
        "requestPhoneNumber",
        "requestSenderId",
        "sendDestinationNumberVerificationCode",
        "sendMediaMessage",
        "sendTextMessage",
        "sendVoiceMessage",
        "setAccountDefaultProtectConfiguration",
        "setDefaultMessageFeedbackEnabled",
        "setDefaultMessageType",
        "setDefaultSenderId",
        "setMediaMessageSpendLimitOverride",
        "setTextMessageSpendLimitOverride",
        "setVoiceMessageSpendLimitOverride",
        "submitRegistrationVersion",
        "tagResource",
        "untagResource",
        "updateEventDestination",
        "updatePhoneNumber",
        "updatePool",
        "updateProtectConfiguration",
        "updateProtectConfigurationCountryRuleSet",
        "updateSenderId",
        "verifyDestinationNumber"
      ]
    },
    {
      "service": "pipes",
      "className": "Pipes",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "createPipe",
        "deletePipe",
        "describePipe",
        "listPipes",
        "startPipe",
        "stopPipe",
        "updatePipe"
      ]
    },
    {
      "service": "polly",
      "className": "Polly",
      "operations": [
        "deleteLexicon",
        "describeVoices",
        "getLexicon",
        "getSpeechSynthesisTask",
        "listLexicons",
        "listSpeechSynthesisTasks",
        "putLexicon",
        "startSpeechSynthesisTask",
        "synthesizeSpeech"
      ]
    },
    {
      "service": "pricing",
      "className": "Pricing",
      "operations": [
        "describeServices",
        "getAttributeValues",
        "getPriceListFileUrl",
        "getProducts",
        "listPriceLists"
      ]
    },
    {
      "service": "privatenetworks",
      "className": "PrivateNetworks",
      "operations": [
        "acknowledgeOrderReceipt",
        "activateDeviceIdentifier",
        "activateNetworkSite",
        "configureAccessPoint",
        "createNetwork",
        "createNetworkSite",
        "deactivateDeviceIdentifier",
        "deleteNetwork",
        "deleteNetworkSite",
        "getDeviceIdentifier",
        "getNetwork",
        "getNetworkResource",
        "getNetworkSite",
        "getOrder",
        "listDeviceIdentifiers",
        "listNetworkResources",
        "listNetworks",
        "listNetworkSites",
        "listOrders",
        "listTagsForResource",
        "ping",
        "startNetworkResourceUpdate",
        "tagResource",
        "untagResource",
        "updateNetworkSite",
        "updateNetworkSitePlan"
      ]
    },
    {
      "service": "proton",
      "className": "Proton",
      "operations": [
        "cancelComponentDeployment",
        "cancelEnvironmentDeployment",
        "cancelServiceInstanceDeployment",
        "cancelServicePipelineDeployment",
        "getRepositorySyncStatus",
        "getResourcesSummary",
        "getServiceInstanceSyncStatus",
        "getTemplateSyncStatus",
        "listRepositorySyncDefinitions",
        "listTagsForResource",
        "notifyResourceDeploymentStatusChange",
        "tagResource",
        "untagResource",
        "acceptEnvironmentAccountConnection",
        "createComponent",
        "createEnvironment",
        "createEnvironmentAccountConnection",
        "createEnvironmentTemplate",
        "createEnvironmentTemplateVersion",
        "createRepository",
        "createService",
        "createServiceInstance",
        "createServiceSyncConfig",
        "createServiceTemplate",
        "createServiceTemplateVersion",
        "createTemplateSyncConfig",
        "deleteComponent",
        "deleteDeployment",
        "deleteEnvironment",
        "deleteEnvironmentAccountConnection",
        "deleteEnvironmentTemplate",
        "deleteEnvironmentTemplateVersion",
        "deleteRepository",
        "deleteService",
        "deleteServiceSyncConfig",
        "deleteServiceTemplate",
        "deleteServiceTemplateVersion",
        "deleteTemplateSyncConfig",
        "getAccountSettings",
        "getComponent",
        "getDeployment",
        "getEnvironment",
        "getEnvironmentAccountConnection",
        "getEnvironmentTemplate",
        "getEnvironmentTemplateVersion",
        "getRepository",
        "getService",
        "getServiceInstance",
        "getServiceSyncBlockerSummary",
        "getServiceSyncConfig",
        "getServiceTemplate",
        "getServiceTemplateVersion",
        "getTemplateSyncConfig",
        "listComponentOutputs",
        "listComponentProvisionedResources",
        "listComponents",
        "listDeployments",
        "listEnvironmentAccountConnections",
        "listEnvironmentOutputs",
        "listEnvironmentProvisionedResources",
        "listEnvironmentTemplateVersions",
        "listEnvironmentTemplates",
        "listEnvironments",
        "listRepositories",
        "listServiceInstanceOutputs",
        "listServiceInstanceProvisionedResources",
        "listServiceInstances",
        "listServicePipelineOutputs",
        "listServicePipelineProvisionedResources",
        "listServiceTemplateVersions",
        "listServiceTemplates",
        "listServices",
        "rejectEnvironmentAccountConnection",
        "updateAccountSettings",
        "updateComponent",
        "updateEnvironment",
        "updateEnvironmentAccountConnection",
        "updateEnvironmentTemplate",
        "updateEnvironmentTemplateVersion",
        "updateService",
        "updateServiceInstance",
        "updateServicePipeline",
        "updateServiceSyncBlocker",
        "updateServiceSyncConfig",
        "updateServiceTemplate",
        "updateServiceTemplateVersion",
        "updateTemplateSyncConfig"
      ]
    },
    {
      "service": "qapps",
      "className": "QApps",
      "operations": [
        "associateLibraryItemReview",
        "associateQAppWithUser",
        "batchCreateCategory",
        "batchDeleteCategory",
        "batchUpdateCategory",
        "createLibraryItem",
        "createPresignedUrl",
        "createQApp",
        "deleteLibraryItem",
        "deleteQApp",
        "describeQAppPermissions",
        "disassociateLibraryItemReview",
        "disassociateQAppFromUser",
        "exportQAppSessionData",
        "getLibraryItem",
        "getQApp",
        "getQAppSession",
        "getQAppSessionMetadata",
        "importDocument",
        "listCategories",
        "listLibraryItems",
        "listQApps",
        "listQAppSessionData",
        "listTagsForResource",
        "predictQApp",
        "startQAppSession",
        "stopQAppSession",
        "tagResource",
        "untagResource",
        "updateLibraryItem",
        "updateLibraryItemMetadata",
        "updateQApp",
        "updateQAppPermissions",
        "updateQAppSession",
        "updateQAppSessionMetadata"
      ]
    },
    {
      "service": "qbusiness",
      "className": "QBusiness",
      "operations": [
        "associatePermission",
        "batchDeleteDocument",
        "batchPutDocument",
        "cancelSubscription",
        "chat",
        "chatSync",
        "checkDocumentAccess",
        "createAnonymousWebExperienceUrl",
        "createChatResponseConfiguration",
        "createSubscription",
        "createUser",
        "deleteAttachment",
        "deleteChatControlsConfiguration",
        "deleteChatResponseConfiguration",
        "deleteConversation",
        "deleteGroup",
        "deleteUser",
        "disassociatePermission",
        "getChatControlsConfiguration",
        "getChatResponseConfiguration",
        "getGroup",
        "getMedia",
        "getPolicy",
        "getUser",
        "listAttachments",
        "listChatResponseConfigurations",
        "listConversations",
        "listDataSourceSyncJobs",
        "listDocuments",
        "listGroups",
        "listMessages",
        "listPluginActions",
        "listPluginTypeActions",
        "listPluginTypeMetadata",
        "listSubscriptions",
        "listTagsForResource",
        "putFeedback",
        "putGroup",
        "searchRelevantContent",
        "startDataSourceSyncJob",
        "stopDataSourceSyncJob",
        "tagResource",
        "untagResource",
        "updateChatControlsConfiguration",
        "updateChatResponseConfiguration",
        "updateSubscription",
        "updateUser",
        "createApplication",
        "createDataAccessor",
        "createDataSource",
        "createIndex",
        "createPlugin",
        "createRetriever",
        "createWebExperience",
        "deleteApplication",
        "deleteDataAccessor",
        "deleteDataSource",
        "deleteIndex",
        "deletePlugin",
        "deleteRetriever",
        "deleteWebExperience",
        "getApplication",
        "getDataAccessor",
        "getDataSource",
        "getIndex",
        "getPlugin",
        "getRetriever",
        "getWebExperience",
        "listApplications",
        "listDataAccessors",
        "listDataSources",
        "listIndices",
        "listPlugins",
        "listRetrievers",
        "listWebExperiences",
        "updateApplication",
        "updateDataAccessor",
        "updateDataSource",
        "updateIndex",
        "updatePlugin",
        "updateRetriever",
        "updateWebExperience"
      ]
    },
    {
      "service": "qconnect",
      "className": "QConnect",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "activateMessageTemplate",
        "createAIAgent",
        "createAIAgentVersion",
        "createAIGuardrail",
        "createAIGuardrailVersion",
        "createAIPrompt",
        "createAIPromptVersion",
        "createAssistant",
        "createAssistantAssociation",
        "createContent",
        "createContentAssociation",
        "createKnowledgeBase",
        "createMessageTemplate",
        "createMessageTemplateAttachment",
        "createMessageTemplateVersion",
        "createQuickResponse",
        "createSession",
        "deactivateMessageTemplate",
        "deleteAIAgent",
        "deleteAIAgentVersion",
        "deleteAIGuardrail",
        "deleteAIGuardrailVersion",
        "deleteAIPrompt",
        "deleteAIPromptVersion",
        "deleteAssistant",
        "deleteAssistantAssociation",
        "deleteContent",
        "deleteContentAssociation",
        "deleteImportJob",
        "deleteKnowledgeBase",
        "deleteMessageTemplate",
        "deleteMessageTemplateAttachment",
        "deleteQuickResponse",
        "getAIAgent",
        "getAIGuardrail",
        "getAIPrompt",
        "getAssistant",
        "getAssistantAssociation",
        "getContent",
        "getContentAssociation",
        "getContentSummary",
        "getImportJob",
        "getKnowledgeBase",
        "getMessageTemplate",
        "getNextMessage",
        "getQuickResponse",
        "getRecommendations",
        "getSession",
        "listAIAgentVersions",
        "listAIAgents",
        "listAIGuardrailVersions",
        "listAIGuardrails",
        "listAIPromptVersions",
        "listAIPrompts",
        "listAssistantAssociations",
        "listAssistants",
        "listContentAssociations",
        "listContents",
        "listImportJobs",
        "listKnowledgeBases",
        "listMessageTemplateVersions",
        "listMessageTemplates",
        "listMessages",
        "listQuickResponses",
        "notifyRecommendationsReceived",
        "putFeedback",
        "queryAssistant",
        "removeAssistantAIAgent",
        "removeKnowledgeBaseTemplateUri",
        "renderMessageTemplate",
        "searchContent",
        "searchMessageTemplates",
        "searchQuickResponses",
        "searchSessions",
        "sendMessage",
        "startContentUpload",
        "startImportJob",
        "updateAIAgent",
        "updateAIGuardrail",
        "updateAIPrompt",
        "updateAssistantAIAgent",
        "updateContent",
        "updateKnowledgeBaseTemplateUri",
        "updateMessageTemplate",
        "updateMessageTemplateMetadata",
        "updateQuickResponse",
        "updateSession",
        "updateSessionData"
      ]
    },
    {
      "service": "qldb",
      "className": "QLDB",
      "operations": [
        "cancelJournalKinesisStream",
        "createLedger",
        "deleteLedger",
        "describeJournalKinesisStream",
        "describeJournalS3Export",
        "describeLedger",
        "exportJournalToS3",
        "getBlock",
        "getDigest",
        "getRevision",
        "listJournalKinesisStreamsForLedger",
        "listJournalS3Exports",
        "listJournalS3ExportsForLedger",
        "listLedgers",
        "listTagsForResource",
        "streamJournalToKinesis",
        "tagResource",
        "untagResource",
        "updateLedger",
        "updateLedgerPermissionsMode"
      ]
    },
    {
      "service": "qldb-session",
      "className": "QLDBSession",
      "operations": [
        "sendCommand"
      ]
    },
    {
      "service": "quicksight",
      "className": "QuickSight",
      "operations": [
        "batchCreateTopicReviewedAnswer",
        "batchDeleteTopicReviewedAnswer",
        "cancelIngestion",
        "createAccountCustomization",
        "createAccountSubscription",
        "createAnalysis",
        "createBrand",
        "createCustomPermissions",
        "createDashboard",
        "createDataSet",
        "createDataSource",
        "createFolder",
        "createFolderMembership",
        "createGroup",
        "createGroupMembership",
        "createIAMPolicyAssignment",
        "createIngestion",
        "createNamespace",
        "createRefreshSchedule",
        "createRoleMembership",
        "createTemplate",
        "createTemplateAlias",
        "createTheme",
        "createThemeAlias",
        "createTopic",
        "createTopicRefreshSchedule",
        "createVPCConnection",
        "deleteAccountCustomization",
        "deleteAccountSubscription",
        "deleteAnalysis",
        "deleteBrand",
        "deleteBrandAssignment",
        "deleteCustomPermissions",
        "deleteDashboard",
        "deleteDataSet",
        "deleteDataSetRefreshProperties",
        "deleteDataSource",
        "deleteDefaultQBusinessApplication",
        "deleteFolder",
        "deleteFolderMembership",
        "deleteGroup",
        "deleteGroupMembership",
        "deleteIAMPolicyAssignment",
        "deleteIdentityPropagationConfig",
        "deleteNamespace",
        "deleteRefreshSchedule",
        "deleteRoleCustomPermission",
        "deleteRoleMembership",
        "deleteTemplate",
        "deleteTemplateAlias",
        "deleteTheme",
        "deleteThemeAlias",
        "deleteTopic",
        "deleteTopicRefreshSchedule",
        "deleteUser",
        "deleteUserByPrincipalId",
        "deleteUserCustomPermission",
        "deleteVPCConnection",
        "describeAccountCustomization",
        "describeAccountSettings",
        "describeAccountSubscription",
        "describeAnalysis",
        "describeAnalysisDefinition",
        "describeAnalysisPermissions",
        "describeAssetBundleExportJob",
        "describeAssetBundleImportJob",
        "describeBrand",
        "describeBrandAssignment",
        "describeBrandPublishedVersion",
        "describeCustomPermissions",
        "describeDashboard",
        "describeDashboardDefinition",
        "describeDashboardPermissions",
        "describeDashboardSnapshotJob",
        "describeDashboardSnapshotJobResult",
        "describeDashboardsQAConfiguration",
        "describeDataSet",
        "describeDataSetPermissions",
        "describeDataSetRefreshProperties",
        "describeDataSource",
        "describeDataSourcePermissions",
        "describeDefaultQBusinessApplication",
        "describeFolder",
        "describeFolderPermissions",
        "describeFolderResolvedPermissions",
        "describeGroup",
        "describeGroupMembership",
        "describeIAMPolicyAssignment",
        "describeIngestion",
        "describeIpRestriction",
        "describeKeyRegistration",
        "describeNamespace",
        "describeQPersonalizationConfiguration",
        "describeQuickSightQSearchConfiguration",
        "describeRefreshSchedule",
        "describeRoleCustomPermission",
        "describeTemplate",
        "describeTemplateAlias",
        "describeTemplateDefinition",
        "describeTemplatePermissions",
        "describeTheme",
        "describeThemeAlias",
        "describeThemePermissions",
        "describeTopic",
        "describeTopicPermissions",
        "describeTopicRefresh",
        "describeTopicRefreshSchedule",
        "describeUser",
        "describeVPCConnection",
        "generateEmbedUrlForAnonymousUser",
        "generateEmbedUrlForRegisteredUser",
        "generateEmbedUrlForRegisteredUserWithIdentity",
        "getDashboardEmbedUrl",
        "getSessionEmbedUrl",
        "listAnalyses",
        "listAssetBundleExportJobs",
        "listAssetBundleImportJobs",
        "listBrands",
        "listCustomPermissions",
        "listDashboards",
        "listDashboardVersions",
        "listDataSets",
        "listDataSources",
        "listFolderMembers",
        "listFolders",
        "listFoldersForResource",
        "listGroupMemberships",
        "listGroups",
        "listIAMPolicyAssignments",
        "listIAMPolicyAssignmentsForUser",
        "listIdentityPropagationConfigs",
        "listIngestions",
        "listNamespaces",
        "listRefreshSchedules",
        "listRoleMemberships",
        "listTagsForResource",
        "listTemplateAliases",
        "listTemplates",
        "listTemplateVersions",
        "listThemeAliases",
        "listThemes",
        "listThemeVersions",
        "listTopicRefreshSchedules",
        "listTopicReviewedAnswers",
        "listTopics",
        "listUserGroups",
        "listUsers",
        "listVPCConnections",
        "predictQAResults",
        "putDataSetRefreshProperties",
        "registerUser",
        "restoreAnalysis",
        "searchAnalyses",
        "searchDashboards",
        "searchDataSets",
        "searchDataSources",
        "searchFolders",
        "searchGroups",
        "searchTopics",
        "startAssetBundleExportJob",
        "startAssetBundleImportJob",
        "startDashboardSnapshotJob",
        "startDashboardSnapshotJobSchedule",
        "tagResource",
        "untagResource",
        "updateAccountCustomization",
        "updateAccountSettings",
        "updateAnalysis",
        "updateAnalysisPermissions",
        "updateApplicationWithTokenExchangeGrant",
        "updateBrand",
        "updateBrandAssignment",
        "updateBrandPublishedVersion",
        "updateCustomPermissions",
        "updateDashboard",
        "updateDashboardLinks",
        "updateDashboardPermissions",
        "updateDashboardPublishedVersion",
        "updateDashboardsQAConfiguration",
        "updateDataSet",
        "updateDataSetPermissions",
        "updateDataSource",
        "updateDataSourcePermissions",
        "updateDefaultQBusinessApplication",
        "updateFolder",
        "updateFolderPermissions",
        "updateGroup",
        "updateIAMPolicyAssignment",
        "updateIdentityPropagationConfig",
        "updateIpRestriction",
        "updateKeyRegistration",
        "updatePublicSharingSettings",
        "updateQPersonalizationConfiguration",
        "updateQuickSightQSearchConfiguration",
        "updateRefreshSchedule",
        "updateRoleCustomPermission",
        "updateSPICECapacityConfiguration",
        "updateTemplate",
        "updateTemplateAlias",
        "updateTemplatePermissions",
        "updateTheme",
        "updateThemeAlias",
        "updateThemePermissions",
        "updateTopic",
        "updateTopicPermissions",
        "updateTopicRefreshSchedule",
        "updateUser",
        "updateUserCustomPermission",
        "updateVPCConnection"
      ]
    },
    {
      "service": "ram",
      "className": "RAM",
      "operations": [
        "acceptResourceShareInvitation",
        "associateResourceShare",
        "associateResourceSharePermission",
        "createPermission",
        "createPermissionVersion",
        "createResourceShare",
        "deletePermission",
        "deletePermissionVersion",
        "deleteResourceShare",
        "disassociateResourceShare",
        "disassociateResourceSharePermission",
        "enableSharingWithAwsOrganization",
        "getPermission",
        "getResourcePolicies",
        "getResourceShareAssociations",
        "getResourceShareInvitations",
        "getResourceShares",
        "listPendingInvitationResources",
        "listPermissionAssociations",
        "listPermissions",
        "listPermissionVersions",
        "listPrincipals",
        "listReplacePermissionAssociationsWork",
        "listResources",
        "listResourceSharePermissions",
        "listResourceTypes",
        "promotePermissionCreatedFromPolicy",
        "promoteResourceShareCreatedFromPolicy",
        "rejectResourceShareInvitation",
        "replacePermissionAssociations",
        "setDefaultPermissionVersion",
        "tagResource",
        "untagResource",
        "updateResourceShare"
      ]
    },
    {
      "service": "rbin",
      "className": "rbin",
      "operations": [
        "createRule",
        "deleteRule",
        "getRule",
        "listRules",
        "listTagsForResource",
        "lockRule",
        "tagResource",
        "unlockRule",
        "untagResource",
        "updateRule"
      ]
    },
    {
      "service": "rds",
      "className": "RDS",
      "operations": [
        "addRoleToDBCluster",
        "addRoleToDBInstance",
        "addSourceIdentifierToSubscription",
        "addTagsToResource",
        "applyPendingMaintenanceAction",
        "authorizeDBSecurityGroupIngress",
        "backtrackDBCluster",
        "cancelExportTask",
        "copyDBClusterParameterGroup",
        "copyDBClusterSnapshot",
        "copyDBParameterGroup",
        "copyDBSnapshot",
        "copyOptionGroup",
        "createBlueGreenDeployment",
        "createCustomDBEngineVersion",
        "createDBCluster",
        "createDBClusterEndpoint",
        "createDBClusterParameterGroup",
        "createDBClusterSnapshot",
        "createDBInstance",
        "createDBInstanceReadReplica",
        "createDBParameterGroup",
        "createDBProxy",
        "createDBProxyEndpoint",
        "createDBSecurityGroup",
        "createDBShardGroup",
        "createDBSnapshot",
        "createDBSubnetGroup",
        "createEventSubscription",
        "createGlobalCluster",
        "createIntegration",
        "createOptionGroup",
        "createTenantDatabase",
        "deleteBlueGreenDeployment",
        "deleteCustomDBEngineVersion",
        "deleteDBCluster",
        "deleteDBClusterAutomatedBackup",
        "deleteDBClusterEndpoint",
        "deleteDBClusterParameterGroup",
        "deleteDBClusterSnapshot",
        "deleteDBInstance",
        "deleteDBInstanceAutomatedBackup",
        "deleteDBParameterGroup",
        "deleteDBProxy",
        "deleteDBProxyEndpoint",
        "deleteDBSecurityGroup",
        "deleteDBShardGroup",
        "deleteDBSnapshot",
        "deleteDBSubnetGroup",
        "deleteEventSubscription",
        "deleteGlobalCluster",
        "deleteIntegration",
        "deleteOptionGroup",
        "deleteTenantDatabase",
        "deregisterDBProxyTargets",
        "describeAccountAttributes",
        "describeBlueGreenDeployments",
        "describeCertificates",
        "describeDBClusterAutomatedBackups",
        "describeDBClusterBacktracks",
        "describeDBClusterEndpoints",
        "describeDBClusterParameterGroups",
        "describeDBClusterParameters",
        "describeDBClusters",
        "describeDBClusterSnapshotAttributes",
        "describeDBClusterSnapshots",
        "describeDBEngineVersions",
        "describeDBInstanceAutomatedBackups",
        "describeDBInstances",
        "describeDBLogFiles",
        "describeDBMajorEngineVersions",
        "describeDBParameterGroups",
        "describeDBParameters",
        "describeDBProxies",
        "describeDBProxyEndpoints",
        "describeDBProxyTargetGroups",
        "describeDBProxyTargets",
        "describeDBRecommendations",
        "describeDBSecurityGroups",
        "describeDBShardGroups",
        "describeDBSnapshotAttributes",
        "describeDBSnapshots",
        "describeDBSnapshotTenantDatabases",
        "describeDBSubnetGroups",
        "describeEngineDefaultClusterParameters",
        "describeEngineDefaultParameters",
        "describeEventCategories",
        "describeEvents",
        "describeEventSubscriptions",
        "describeExportTasks",
        "describeGlobalClusters",
        "describeIntegrations",
        "describeOptionGroupOptions",
        "describeOptionGroups",
        "describeOrderableDBInstanceOptions",
        "describePendingMaintenanceActions",
        "describeReservedDBInstances",
        "describeReservedDBInstancesOfferings",
        "describeSourceRegions",
        "describeTenantDatabases",
        "describeValidDBInstanceModifications",
        "disableHttpEndpoint",
        "downloadDBLogFilePortion",
        "enableHttpEndpoint",
        "failoverDBCluster",
        "failoverGlobalCluster",
        "listTagsForResource",
        "modifyActivityStream",
        "modifyCertificates",
        "modifyCurrentDBClusterCapacity",
        "modifyCustomDBEngineVersion",
        "modifyDBCluster",
        "modifyDBClusterEndpoint",
        "modifyDBClusterParameterGroup",
        "modifyDBClusterSnapshotAttribute",
        "modifyDBInstance",
        "modifyDBParameterGroup",
        "modifyDBProxy",
        "modifyDBProxyEndpoint",
        "modifyDBProxyTargetGroup",
        "modifyDBRecommendation",
        "modifyDBShardGroup",
        "modifyDBSnapshot",
        "modifyDBSnapshotAttribute",
        "modifyDBSubnetGroup",
        "modifyEventSubscription",
        "modifyGlobalCluster",
        "modifyIntegration",
        "modifyOptionGroup",
        "modifyTenantDatabase",
        "promoteReadReplica",
        "promoteReadReplicaDBCluster",
        "purchaseReservedDBInstancesOffering",
        "rebootDBCluster",
        "rebootDBInstance",
        "rebootDBShardGroup",
        "registerDBProxyTargets",
        "removeFromGlobalCluster",
        "removeRoleFromDBCluster",
        "removeRoleFromDBInstance",
        "removeSourceIdentifierFromSubscription",
        "removeTagsFromResource",
        "resetDBClusterParameterGroup",
        "resetDBParameterGroup",
        "restoreDBClusterFromS3",
        "restoreDBClusterFromSnapshot",
        "restoreDBClusterToPointInTime",
        "restoreDBInstanceFromDBSnapshot",
        "restoreDBInstanceFromS3",
        "restoreDBInstanceToPointInTime",
        "revokeDBSecurityGroupIngress",
        "startActivityStream",
        "startDBCluster",
        "startDBInstance",
        "startDBInstanceAutomatedBackupsReplication",
        "startExportTask",
        "stopActivityStream",
        "stopDBCluster",
        "stopDBInstance",
        "stopDBInstanceAutomatedBackupsReplication",
        "switchoverBlueGreenDeployment",
        "switchoverGlobalCluster",
        "switchoverReadReplica"
      ]
    },
    {
      "service": "rds-data",
      "className": "RDSData",
      "operations": [
        "batchExecuteStatement",
        "beginTransaction",
        "commitTransaction",
        "executeSql",
        "executeStatement",
        "rollbackTransaction"
      ]
    },
    {
      "service": "redshift",
      "className": "Redshift",
      "operations": [
        "acceptReservedNodeExchange",
        "addPartner",
        "associateDataShareConsumer",
        "authorizeClusterSecurityGroupIngress",
        "authorizeDataShare",
        "authorizeEndpointAccess",
        "authorizeSnapshotAccess",
        "batchDeleteClusterSnapshots",
        "batchModifyClusterSnapshots",
        "cancelResize",
        "copyClusterSnapshot",
        "createAuthenticationProfile",
        "createCluster",
        "createClusterParameterGroup",
        "createClusterSecurityGroup",
        "createClusterSnapshot",
        "createClusterSubnetGroup",
        "createCustomDomainAssociation",
        "createEndpointAccess",
        "createEventSubscription",
        "createHsmClientCertificate",
        "createHsmConfiguration",
        "createIntegration",
        "createRedshiftIdcApplication",
        "createScheduledAction",
        "createSnapshotCopyGrant",
        "createSnapshotSchedule",
        "createTags",
        "createUsageLimit",
        "deauthorizeDataShare",
        "deleteAuthenticationProfile",
        "deleteCluster",
        "deleteClusterParameterGroup",
        "deleteClusterSecurityGroup",
        "deleteClusterSnapshot",
        "deleteClusterSubnetGroup",
        "deleteCustomDomainAssociation",
        "deleteEndpointAccess",
        "deleteEventSubscription",
        "deleteHsmClientCertificate",
        "deleteHsmConfiguration",
        "deleteIntegration",
        "deletePartner",
        "deleteRedshiftIdcApplication",
        "deleteResourcePolicy",
        "deleteScheduledAction",
        "deleteSnapshotCopyGrant",
        "deleteSnapshotSchedule",
        "deleteTags",
        "deleteUsageLimit",
        "deregisterNamespace",
        "describeAccountAttributes",
        "describeAuthenticationProfiles",
        "describeClusterDbRevisions",
        "describeClusterParameterGroups",
        "describeClusterParameters",
        "describeClusters",
        "describeClusterSecurityGroups",
        "describeClusterSnapshots",
        "describeClusterSubnetGroups",
        "describeClusterTracks",
        "describeClusterVersions",
        "describeCustomDomainAssociations",
        "describeDataShares",
        "describeDataSharesForConsumer",
        "describeDataSharesForProducer",
        "describeDefaultClusterParameters",
        "describeEndpointAccess",
        "describeEndpointAuthorization",
        "describeEventCategories",
        "describeEvents",
        "describeEventSubscriptions",
        "describeHsmClientCertificates",
        "describeHsmConfigurations",
        "describeInboundIntegrations",
        "describeIntegrations",
        "describeLoggingStatus",
        "describeNodeConfigurationOptions",
        "describeOrderableClusterOptions",
        "describePartners",
        "describeRedshiftIdcApplications",
        "describeReservedNodeExchangeStatus",
        "describeReservedNodeOfferings",
        "describeReservedNodes",
        "describeResize",
        "describeScheduledActions",
        "describeSnapshotCopyGrants",
        "describeSnapshotSchedules",
        "describeStorage",
        "describeTableRestoreStatus",
        "describeTags",
        "describeUsageLimits",
        "disableLogging",
        "disableSnapshotCopy",
        "disassociateDataShareConsumer",
        "enableLogging",
        "enableSnapshotCopy",
        "failoverPrimaryCompute",
        "getClusterCredentials",
        "getClusterCredentialsWithIAM",
        "getReservedNodeExchangeConfigurationOptions",
        "getReservedNodeExchangeOfferings",
        "getResourcePolicy",
        "listRecommendations",
        "modifyAquaConfiguration",
        "modifyAuthenticationProfile",
        "modifyCluster",
        "modifyClusterDbRevision",
        "modifyClusterIamRoles",
        "modifyClusterMaintenance",
        "modifyClusterParameterGroup",
        "modifyClusterSnapshot",
        "modifyClusterSnapshotSchedule",
        "modifyClusterSubnetGroup",
        "modifyCustomDomainAssociation",
        "modifyEndpointAccess",
        "modifyEventSubscription",
        "modifyIntegration",
        "modifyRedshiftIdcApplication",
        "modifyScheduledAction",
        "modifySnapshotCopyRetentionPeriod",
        "modifySnapshotSchedule",
        "modifyUsageLimit",
        "pauseCluster",
        "purchaseReservedNodeOffering",
        "putResourcePolicy",
        "rebootCluster",
        "registerNamespace",
        "rejectDataShare",
        "resetClusterParameterGroup",
        "resizeCluster",
        "restoreFromClusterSnapshot",
        "restoreTableFromClusterSnapshot",
        "resumeCluster",
        "revokeClusterSecurityGroupIngress",
        "revokeEndpointAccess",
        "revokeSnapshotAccess",
        "rotateEncryptionKey",
        "updatePartnerStatus"
      ]
    },
    {
      "service": "redshift-data",
      "className": "RedshiftData",
      "operations": [
        "batchExecuteStatement",
        "cancelStatement",
        "describeStatement",
        "describeTable",
        "executeStatement",
        "getStatementResult",
        "getStatementResultV2",
        "listDatabases",
        "listSchemas",
        "listStatements",
        "listTables"
      ]
    },
    {
      "service": "redshift-serverless",
      "className": "RedshiftServerless",
      "operations": [
        "createCustomDomainAssociation",
        "deleteCustomDomainAssociation",
        "deleteResourcePolicy",
        "getCredentials",
        "getCustomDomainAssociation",
        "getResourcePolicy",
        "getTrack",
        "listCustomDomainAssociations",
        "listTagsForResource",
        "listTracks",
        "putResourcePolicy",
        "tagResource",
        "untagResource",
        "updateCustomDomainAssociation",
        "convertRecoveryPointToSnapshot",
        "createEndpointAccess",
        "createNamespace",
        "createReservation",
        "createScheduledAction",
        "createSnapshot",
        "createSnapshotCopyConfiguration",
        "createUsageLimit",
        "createWorkgroup",
        "deleteEndpointAccess",
        "deleteNamespace",
        "deleteScheduledAction",
        "deleteSnapshot",
        "deleteSnapshotCopyConfiguration",
        "deleteUsageLimit",
        "deleteWorkgroup",
        "getEndpointAccess",
        "getNamespace",
        "getRecoveryPoint",
        "getReservation",
        "getReservationOffering",
        "getScheduledAction",
        "getSnapshot",
        "getTableRestoreStatus",
        "getUsageLimit",
        "getWorkgroup",
        "listEndpointAccess",
        "listManagedWorkgroups",
        "listNamespaces",
        "listRecoveryPoints",
        "listReservationOfferings",
        "listReservations",
        "listScheduledActions",
        "listSnapshotCopyConfigurations",
        "listSnapshots",
        "listTableRestoreStatus",
        "listUsageLimits",
        "listWorkgroups",
        "restoreFromRecoveryPoint",
        "restoreFromSnapshot",
        "restoreTableFromRecoveryPoint",
        "restoreTableFromSnapshot",
        "updateEndpointAccess",
        "updateNamespace",
        "updateScheduledAction",
        "updateSnapshot",
        "updateSnapshotCopyConfiguration",
        "updateUsageLimit",
        "updateWorkgroup"
      ]
    },
    {
      "service": "rekognition",
      "className": "Rekognition",
      "operations": [
        "associateFaces",
        "compareFaces",
        "copyProjectVersion",
        "createCollection",
        "createDataset",
        "createFaceLivenessSession",
        "createProject",
        "createProjectVersion",
        "createStreamProcessor",
        "createUser",
        "deleteCollection",
        "deleteDataset",
        "deleteFaces",
        "deleteProject",
        "deleteProjectPolicy",
        "deleteProjectVersion",
        "deleteStreamProcessor",
        "deleteUser",
        "describeCollection",
        "describeDataset",
        "describeProjects",
        "describeProjectVersions",
        "describeStreamProcessor",
        "detectCustomLabels",
        "detectFaces",
        "detectLabels",
        "detectModerationLabels",
        "detectProtectiveEquipment",
        "detectText",
        "disassociateFaces",
        "distributeDatasetEntries",
        "getCelebrityInfo",
        "getCelebrityRecognition",
        "getContentModeration",
        "getFaceDetection",
        "getFaceLivenessSessionResults",
        "getFaceSearch",
        "getLabelDetection",
        "getMediaAnalysisJob",
        "getPersonTracking",
        "getSegmentDetection",
        "getTextDetection",
        "indexFaces",
        "listCollections",
        "listDatasetEntries",
        "listDatasetLabels",
        "listFaces",
        "listMediaAnalysisJobs",
        "listProjectPolicies",
        "listStreamProcessors",
        "listTagsForResource",
        "listUsers",
        "putProjectPolicy",
        "recognizeCelebrities",
        "searchFaces",
        "searchFacesByImage",
        "searchUsers",
        "searchUsersByImage",
        "startCelebrityRecognition",
        "startContentModeration",
        "startFaceDetection",
        "startFaceSearch",
        "startLabelDetection",
        "startMediaAnalysisJob",
        "startPersonTracking",
        "startProjectVersion",
        "startSegmentDetection",
        "startStreamProcessor",
        "startTextDetection",
        "stopProjectVersion",
        "stopStreamProcessor",
        "tagResource",
        "untagResource",
        "updateDatasetEntries",
        "updateStreamProcessor"
      ]
    },
    {
      "service": "repostspace",
      "className": "repostspace",
      "operations": [
        "batchAddChannelRoleToAccessors",
        "batchAddRole",
        "batchRemoveChannelRoleFromAccessors",
        "batchRemoveRole",
        "createChannel",
        "createSpace",
        "deleteSpace",
        "deregisterAdmin",
        "getChannel",
        "getSpace",
        "listChannels",
        "listSpaces",
        "listTagsForResource",
        "registerAdmin",
        "sendInvites",
        "tagResource",
        "untagResource",
        "updateChannel",
        "updateSpace"
      ]
    },
    {
      "service": "resiliencehub",
      "className": "resiliencehub",
      "operations": [
        "acceptResourceGroupingRecommendations",
        "addDraftAppVersionResourceMappings",
        "batchUpdateRecommendationStatus",
        "createApp",
        "createAppVersionAppComponent",
        "createAppVersionResource",
        "createRecommendationTemplate",
        "createResiliencyPolicy",
        "deleteApp",
        "deleteAppAssessment",
        "deleteAppInputSource",
        "deleteAppVersionAppComponent",
        "deleteAppVersionResource",
        "deleteRecommendationTemplate",
        "deleteResiliencyPolicy",
        "describeApp",
        "describeAppAssessment",
        "describeAppVersion",
        "describeAppVersionAppComponent",
        "describeAppVersionResource",
        "describeAppVersionResourcesResolutionStatus",
        "describeAppVersionTemplate",
        "describeDraftAppVersionResourcesImportStatus",
        "describeMetricsExport",
        "describeResiliencyPolicy",
        "describeResourceGroupingRecommendationTask",
        "importResourcesToDraftAppVersion",
        "listAlarmRecommendations",
        "listAppAssessmentComplianceDrifts",
        "listAppAssessmentResourceDrifts",
        "listAppAssessments",
        "listAppComponentCompliances",
        "listAppComponentRecommendations",
        "listAppInputSources",
        "listApps",
        "listAppVersionAppComponents",
        "listAppVersionResourceMappings",
        "listAppVersionResources",
        "listAppVersions",
        "listMetrics",
        "listRecommendationTemplates",
        "listResiliencyPolicies",
        "listResourceGroupingRecommendations",
        "listSopRecommendations",
        "listSuggestedResiliencyPolicies",
        "listTagsForResource",
        "listTestRecommendations",
        "listUnsupportedAppVersionResources",
        "publishAppVersion",
        "putDraftAppVersionTemplate",
        "rejectResourceGroupingRecommendations",
        "removeDraftAppVersionResourceMappings",
        "resolveAppVersionResources",
        "startAppAssessment",
        "startMetricsExport",
        "startResourceGroupingRecommendationTask",
        "tagResource",
        "untagResource",
        "updateApp",
        "updateAppVersion",
        "updateAppVersionAppComponent",
        "updateAppVersionResource",
        "updateResiliencyPolicy"
      ]
    },
    {
      "service": "resource-explorer-2",
      "className": "ResourceExplorer2",
      "operations": [
        "batchGetView",
        "disassociateDefaultView",
        "getAccountLevelServiceConfiguration",
        "getDefaultView",
        "getIndex",
        "getManagedView",
        "listIndexesForMembers",
        "listManagedViews",
        "listResources",
        "listSupportedResourceTypes",
        "listTagsForResource",
        "search",
        "tagResource",
        "untagResource",
        "associateDefaultView",
        "createIndex",
        "createView",
        "deleteIndex",
        "deleteView",
        "getView",
        "listIndexes",
        "listViews",
        "updateIndexType",
        "updateView"
      ]
    },
    {
      "service": "resource-groups",
      "className": "ResourceGroups",
      "operations": [
        "cancelTagSyncTask",
        "createGroup",
        "deleteGroup",
        "getAccountSettings",
        "getGroup",
        "getGroupConfiguration",
        "getGroupQuery",
        "getTags",
        "getTagSyncTask",
        "groupResources",
        "listGroupingStatuses",
        "listGroupResources",
        "listGroups",
        "listTagSyncTasks",
        "putGroupConfiguration",
        "searchResources",
        "startTagSyncTask",
        "tag",
        "ungroupResources",
        "untag",
        "updateAccountSettings",
        "updateGroup",
        "updateGroupQuery"
      ]
    },
    {
      "service": "resource-groups-tagging-api",
      "className": "ResourceGroupsTaggingAPI",
      "operations": [
        "describeReportCreation",
        "getComplianceSummary",
        "getResources",
        "getTagKeys",
        "getTagValues",
        "startReportCreation",
        "tagResources",
        "untagResources"
      ]
    },
    {
      "service": "robomaker",
      "className": "RoboMaker",
      "operations": [
        "batchDeleteWorlds",
        "batchDescribeSimulationJob",
        "cancelDeploymentJob",
        "cancelSimulationJob",
        "cancelSimulationJobBatch",
        "cancelWorldExportJob",
        "cancelWorldGenerationJob",
        "createDeploymentJob",
        "createFleet",
        "createRobot",
        "createRobotApplication",
        "createRobotApplicationVersion",
        "createSimulationApplication",
        "createSimulationApplicationVersion",
        "createSimulationJob",
        "createWorldExportJob",
        "createWorldGenerationJob",
        "createWorldTemplate",
        "deleteFleet",
        "deleteRobot",
        "deleteRobotApplication",
        "deleteSimulationApplication",
        "deleteWorldTemplate",
        "deregisterRobot",
        "describeDeploymentJob",
        "describeFleet",
        "describeRobot",
        "describeRobotApplication",
        "describeSimulationApplication",
        "describeSimulationJob",
        "describeSimulationJobBatch",
        "describeWorld",
        "describeWorldExportJob",
        "describeWorldGenerationJob",
        "describeWorldTemplate",
        "getWorldTemplateBody",
        "listDeploymentJobs",
        "listFleets",
        "listRobotApplications",
        "listRobots",
        "listSimulationApplications",
        "listSimulationJobBatches",
        "listSimulationJobs",
        "listTagsForResource",
        "listWorldExportJobs",
        "listWorldGenerationJobs",
        "listWorlds",
        "listWorldTemplates",
        "registerRobot",
        "restartSimulationJob",
        "startSimulationJobBatch",
        "syncDeploymentJob",
        "tagResource",
        "untagResource",
        "updateRobotApplication",
        "updateSimulationApplication",
        "updateWorldTemplate"
      ]
    },
    {
      "service": "rolesanywhere",
      "className": "RolesAnywhere",
      "operations": [
        "listTagsForResource",
        "putNotificationSettings",
        "resetNotificationSettings",
        "tagResource",
        "untagResource",
        "createProfile",
        "createTrustAnchor",
        "deleteAttributeMapping",
        "deleteCrl",
        "deleteProfile",
        "deleteTrustAnchor",
        "disableCrl",
        "disableProfile",
        "disableTrustAnchor",
        "enableCrl",
        "enableProfile",
        "enableTrustAnchor",
        "getCrl",
        "getProfile",
        "getSubject",
        "getTrustAnchor",
        "importCrl",
        "listCrls",
        "listProfiles",
        "listSubjects",
        "listTrustAnchors",
        "putAttributeMapping",
        "updateCrl",
        "updateProfile",
        "updateTrustAnchor"
      ]
    },
    {
      "service": "route-53",
      "className": "Route53",
      "operations": [
        "activateKeySigningKey",
        "associateVPCWithHostedZone",
        "changeCidrCollection",
        "changeResourceRecordSets",
        "changeTagsForResource",
        "createCidrCollection",
        "createHealthCheck",
        "createHostedZone",
        "createKeySigningKey",
        "createQueryLoggingConfig",
        "createReusableDelegationSet",
        "createTrafficPolicy",
        "createTrafficPolicyInstance",
        "createTrafficPolicyVersion",
        "createVPCAssociationAuthorization",
        "deactivateKeySigningKey",
        "deleteCidrCollection",
        "deleteHealthCheck",
        "deleteHostedZone",
        "deleteKeySigningKey",
        "deleteQueryLoggingConfig",
        "deleteReusableDelegationSet",
        "deleteTrafficPolicy",
        "deleteTrafficPolicyInstance",
        "deleteVPCAssociationAuthorization",
        "disableHostedZoneDNSSEC",
        "disassociateVPCFromHostedZone",
        "enableHostedZoneDNSSEC",
        "getAccountLimit",
        "getChange",
        "getCheckerIpRanges",
        "getDNSSEC",
        "getGeoLocation",
        "getHealthCheck",
        "getHealthCheckCount",
        "getHealthCheckLastFailureReason",
        "getHealthCheckStatus",
        "getHostedZone",
        "getHostedZoneCount",
        "getHostedZoneLimit",
        "getQueryLoggingConfig",
        "getReusableDelegationSet",
        "getReusableDelegationSetLimit",
        "getTrafficPolicy",
        "getTrafficPolicyInstance",
        "getTrafficPolicyInstanceCount",
        "listCidrBlocks",
        "listCidrCollections",
        "listCidrLocations",
        "listGeoLocations",
        "listHealthChecks",
        "listHostedZones",
        "listHostedZonesByName",
        "listHostedZonesByVPC",
        "listQueryLoggingConfigs",
        "listResourceRecordSets",
        "listReusableDelegationSets",
        "listTagsForResource",
        "listTagsForResources",
        "listTrafficPolicies",
        "listTrafficPolicyInstances",
        "listTrafficPolicyInstancesByHostedZone",
        "listTrafficPolicyInstancesByPolicy",
        "listTrafficPolicyVersions",
        "listVPCAssociationAuthorizations",
        "testDNSAnswer",
        "updateHealthCheck",
        "updateHostedZoneComment",
        "updateTrafficPolicyComment",
        "updateTrafficPolicyInstance"
      ]
    },
    {
      "service": "route-53-domains",
      "className": "Route53Domains",
      "operations": [
        "acceptDomainTransferFromAnotherAwsAccount",
        "associateDelegationSignerToDomain",
        "cancelDomainTransferToAnotherAwsAccount",
        "checkDomainAvailability",
        "checkDomainTransferability",
        "deleteDomain",
        "deleteTagsForDomain",
        "disableDomainAutoRenew",
        "disableDomainTransferLock",
        "disassociateDelegationSignerFromDomain",
        "enableDomainAutoRenew",
        "enableDomainTransferLock",
        "getContactReachabilityStatus",
        "getDomainDetail",
        "getDomainSuggestions",
        "getOperationDetail",
        "listDomains",
        "listOperations",
        "listPrices",
        "listTagsForDomain",
        "pushDomain",
        "registerDomain",
        "rejectDomainTransferFromAnotherAwsAccount",
        "renewDomain",
        "resendContactReachabilityEmail",
        "resendOperationAuthorization",
        "retrieveDomainAuthCode",
        "transferDomain",
        "transferDomainToAnotherAwsAccount",
        "updateDomainContact",
        "updateDomainContactPrivacy",
        "updateDomainNameservers",
        "updateTagsForDomain",
        "viewBilling"
      ]
    },
    {
      "service": "route53-recovery-cluster",
      "className": "Route53RecoveryCluster",
      "operations": [
        "getRoutingControlState",
        "listRoutingControls",
        "updateRoutingControlState",
        "updateRoutingControlStates"
      ]
    },
    {
      "service": "route53-recovery-control-config",
      "className": "Route53RecoveryControlConfig",
      "operations": [
        "createCluster",
        "createControlPanel",
        "createRoutingControl",
        "createSafetyRule",
        "deleteCluster",
        "deleteControlPanel",
        "deleteRoutingControl",
        "deleteSafetyRule",
        "describeCluster",
        "describeControlPanel",
        "describeRoutingControl",
        "describeSafetyRule",
        "getResourcePolicy",
        "listAssociatedRoute53HealthChecks",
        "listClusters",
        "listControlPanels",
        "listRoutingControls",
        "listSafetyRules",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "updateCluster",
        "updateControlPanel",
        "updateRoutingControl",
        "updateSafetyRule"
      ]
    },
    {
      "service": "route53-recovery-readiness",
      "className": "Route53RecoveryReadiness",
      "operations": [
        "createCell",
        "createCrossAccountAuthorization",
        "createReadinessCheck",
        "createRecoveryGroup",
        "createResourceSet",
        "deleteCell",
        "deleteCrossAccountAuthorization",
        "deleteReadinessCheck",
        "deleteRecoveryGroup",
        "deleteResourceSet",
        "getArchitectureRecommendations",
        "getCell",
        "getCellReadinessSummary",
        "getReadinessCheck",
        "getReadinessCheckResourceStatus",
        "getReadinessCheckStatus",
        "getRecoveryGroup",
        "getRecoveryGroupReadinessSummary",
        "getResourceSet",
        "listCells",
        "listCrossAccountAuthorizations",
        "listReadinessChecks",
        "listRecoveryGroups",
        "listResourceSets",
        "listRules",
        "listTagsForResources",
        "tagResource",
        "untagResource",
        "updateCell",
        "updateReadinessCheck",
        "updateRecoveryGroup",
        "updateResourceSet"
      ]
    },
    {
      "service": "route53profiles",
      "className": "Route53Profiles",
      "operations": [
        "associateProfile",
        "associateResourceToProfile",
        "createProfile",
        "deleteProfile",
        "disassociateProfile",
        "disassociateResourceFromProfile",
        "getProfile",
        "getProfileAssociation",
        "getProfileResourceAssociation",
        "listProfileAssociations",
        "listProfileResourceAssociations",
        "listProfiles",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "updateProfileResourceAssociation"
      ]
    },
    {
      "service": "route53resolver",
      "className": "Route53Resolver",
      "operations": [
        "associateFirewallRuleGroup",
        "associateResolverEndpointIpAddress",
        "associateResolverQueryLogConfig",
        "associateResolverRule",
        "createFirewallDomainList",
        "createFirewallRule",
        "createFirewallRuleGroup",
        "createOutpostResolver",
        "createResolverEndpoint",
        "createResolverQueryLogConfig",
        "createResolverRule",
        "deleteFirewallDomainList",
        "deleteFirewallRule",
        "deleteFirewallRuleGroup",
        "deleteOutpostResolver",
        "deleteResolverEndpoint",
        "deleteResolverQueryLogConfig",
        "deleteResolverRule",
        "disassociateFirewallRuleGroup",
        "disassociateResolverEndpointIpAddress",
        "disassociateResolverQueryLogConfig",
        "disassociateResolverRule",
        "getFirewallConfig",
        "getFirewallDomainList",
        "getFirewallRuleGroup",
        "getFirewallRuleGroupAssociation",
        "getFirewallRuleGroupPolicy",
        "getOutpostResolver",
        "getResolverConfig",
        "getResolverDnssecConfig",
        "getResolverEndpoint",
        "getResolverQueryLogConfig",
        "getResolverQueryLogConfigAssociation",
        "getResolverQueryLogConfigPolicy",
        "getResolverRule",
        "getResolverRuleAssociation",
        "getResolverRulePolicy",
        "importFirewallDomains",
        "listFirewallConfigs",
        "listFirewallDomainLists",
        "listFirewallDomains",
        "listFirewallRuleGroupAssociations",
        "listFirewallRuleGroups",
        "listFirewallRules",
        "listOutpostResolvers",
        "listResolverConfigs",
        "listResolverDnssecConfigs",
        "listResolverEndpointIpAddresses",
        "listResolverEndpoints",
        "listResolverQueryLogConfigAssociations",
        "listResolverQueryLogConfigs",
        "listResolverRuleAssociations",
        "listResolverRules",
        "listTagsForResource",
        "putFirewallRuleGroupPolicy",
        "putResolverQueryLogConfigPolicy",
        "putResolverRulePolicy",
        "tagResource",
        "untagResource",
        "updateFirewallConfig",
        "updateFirewallDomains",
        "updateFirewallRule",
        "updateFirewallRuleGroupAssociation",
        "updateOutpostResolver",
        "updateResolverConfig",
        "updateResolverDnssecConfig",
        "updateResolverEndpoint",
        "updateResolverRule"
      ]
    },
    {
      "service": "rum",
      "className": "RUM",
      "operations": [
        "listTagsForResource",
        "putRumEvents",
        "tagResource",
        "untagResource",
        "batchCreateRumMetricDefinitions",
        "batchDeleteRumMetricDefinitions",
        "batchGetRumMetricDefinitions",
        "createAppMonitor",
        "deleteAppMonitor",
        "deleteResourcePolicy",
        "deleteRumMetricsDestination",
        "getAppMonitor",
        "getAppMonitorData",
        "getResourcePolicy",
        "listAppMonitors",
        "listRumMetricsDestinations",
        "putResourcePolicy",
        "putRumMetricsDestination",
        "updateAppMonitor",
        "updateRumMetricDefinition"
      ]
    },
    {
      "service": "s3",
      "className": "S3",
      "operations": [
        "abortMultipartUpload",
        "completeMultipartUpload",
        "copyObject",
        "createBucket",
        "createBucketMetadataConfiguration",
        "createBucketMetadataTableConfiguration",
        "createMultipartUpload",
        "createSession",
        "deleteBucket",
        "deleteBucketAnalyticsConfiguration",
        "deleteBucketCors",
        "deleteBucketEncryption",
        "deleteBucketIntelligentTieringConfiguration",
        "deleteBucketInventoryConfiguration",
        "deleteBucketLifecycle",
        "deleteBucketMetadataConfiguration",
        "deleteBucketMetadataTableConfiguration",
        "deleteBucketMetricsConfiguration",
        "deleteBucketOwnershipControls",
        "deleteBucketPolicy",
        "deleteBucketReplication",
        "deleteBucketTagging",
        "deleteBucketWebsite",
        "deleteObject",
        "deleteObjects",
        "deleteObjectTagging",
        "deletePublicAccessBlock",
        "getBucketAccelerateConfiguration",
        "getBucketAcl",
        "getBucketAnalyticsConfiguration",
        "getBucketCors",
        "getBucketEncryption",
        "getBucketIntelligentTieringConfiguration",
        "getBucketInventoryConfiguration",
        "getBucketLifecycleConfiguration",
        "getBucketLocation",
        "getBucketLogging",
        "getBucketMetadataConfiguration",
        "getBucketMetadataTableConfiguration",
        "getBucketMetricsConfiguration",
        "getBucketNotificationConfiguration",
        "getBucketOwnershipControls",
        "getBucketPolicy",
        "getBucketPolicyStatus",
        "getBucketReplication",
        "getBucketRequestPayment",
        "getBucketTagging",
        "getBucketVersioning",
        "getBucketWebsite",
        "getObject",
        "getObjectAcl",
        "getObjectAttributes",
        "getObjectLegalHold",
        "getObjectLockConfiguration",
        "getObjectRetention",
        "getObjectTagging",
        "getObjectTorrent",
        "getPublicAccessBlock",
        "headBucket",
        "headObject",
        "listBucketAnalyticsConfigurations",
        "listBucketIntelligentTieringConfigurations",
        "listBucketInventoryConfigurations",
        "listBucketMetricsConfigurations",
        "listBuckets",
        "listDirectoryBuckets",
        "listMultipartUploads",
        "listObjects",
        "listObjectsV2",
        "listObjectVersions",
        "listParts",
        "putBucketAccelerateConfiguration",
        "putBucketAcl",
        "putBucketAnalyticsConfiguration",
        "putBucketCors",
        "putBucketEncryption",
        "putBucketIntelligentTieringConfiguration",
        "putBucketInventoryConfiguration",
        "putBucketLifecycleConfiguration",
        "putBucketLogging",
        "putBucketMetricsConfiguration",
        "putBucketNotificationConfiguration",
        "putBucketOwnershipControls",
        "putBucketPolicy",
        "putBucketReplication",
        "putBucketRequestPayment",
        "putBucketTagging",
        "putBucketVersioning",
        "putBucketWebsite",
        "putObject",
        "putObjectAcl",
        "putObjectLegalHold",
        "putObjectLockConfiguration",
        "putObjectRetention",
        "putObjectTagging",
        "putPublicAccessBlock",
        "renameObject",
        "restoreObject",
        "selectObjectContent",
        "updateBucketMetadataInventoryTableConfiguration",
        "updateBucketMetadataJournalTableConfiguration",
        "uploadPart",
        "uploadPartCopy",
        "writeGetObjectResponse"
      ]
    },
    {
      "service": "s3-control",
      "className": "S3Control",
      "operations": [
        "associateAccessGrantsIdentityCenter",
        "createAccessGrant",
        "createAccessGrantsInstance",
        "createAccessGrantsLocation",
        "createAccessPoint",
        "createAccessPointForObjectLambda",
        "createBucket",
        "createJob",
        "createMultiRegionAccessPoint",
        "createStorageLensGroup",
        "deleteAccessGrant",
        "deleteAccessGrantsInstance",
        "deleteAccessGrantsInstanceResourcePolicy",
        "deleteAccessGrantsLocation",
        "deleteAccessPoint",
        "deleteAccessPointForObjectLambda",
        "deleteAccessPointPolicy",
        "deleteAccessPointPolicyForObjectLambda",
        "deleteAccessPointScope",
        "deleteBucket",
        "deleteBucketLifecycleConfiguration",
        "deleteBucketPolicy",
        "deleteBucketReplication",
        "deleteBucketTagging",
        "deleteJobTagging",
        "deleteMultiRegionAccessPoint",
        "deletePublicAccessBlock",
        "deleteStorageLensConfiguration",
        "deleteStorageLensConfigurationTagging",
        "deleteStorageLensGroup",
        "describeJob",
        "describeMultiRegionAccessPointOperation",
        "dissociateAccessGrantsIdentityCenter",
        "getAccessGrant",
        "getAccessGrantsInstance",
        "getAccessGrantsInstanceForPrefix",
        "getAccessGrantsInstanceResourcePolicy",
        "getAccessGrantsLocation",
        "getAccessPoint",
        "getAccessPointConfigurationForObjectLambda",
        "getAccessPointForObjectLambda",
        "getAccessPointPolicy",
        "getAccessPointPolicyForObjectLambda",
        "getAccessPointPolicyStatus",
        "getAccessPointPolicyStatusForObjectLambda",
        "getAccessPointScope",
        "getBucket",
        "getBucketLifecycleConfiguration",
        "getBucketPolicy",
        "getBucketReplication",
        "getBucketTagging",
        "getBucketVersioning",
        "getDataAccess",
        "getJobTagging",
        "getMultiRegionAccessPoint",
        "getMultiRegionAccessPointPolicy",
        "getMultiRegionAccessPointPolicyStatus",
        "getMultiRegionAccessPointRoutes",
        "getPublicAccessBlock",
        "getStorageLensConfiguration",
        "getStorageLensConfigurationTagging",
        "getStorageLensGroup",
        "listAccessGrants",
        "listAccessGrantsInstances",
        "listAccessGrantsLocations",
        "listAccessPoints",
        "listAccessPointsForDirectoryBuckets",
        "listAccessPointsForObjectLambda",
        "listCallerAccessGrants",
        "listJobs",
        "listMultiRegionAccessPoints",
        "listRegionalBuckets",
        "listStorageLensConfigurations",
        "listStorageLensGroups",
        "listTagsForResource",
        "putAccessGrantsInstanceResourcePolicy",
        "putAccessPointConfigurationForObjectLambda",
        "putAccessPointPolicy",
        "putAccessPointPolicyForObjectLambda",
        "putAccessPointScope",
        "putBucketLifecycleConfiguration",
        "putBucketPolicy",
        "putBucketReplication",
        "putBucketTagging",
        "putBucketVersioning",
        "putJobTagging",
        "putMultiRegionAccessPointPolicy",
        "putPublicAccessBlock",
        "putStorageLensConfiguration",
        "putStorageLensConfigurationTagging",
        "submitMultiRegionAccessPointRoutes",
        "tagResource",
        "untagResource",
        "updateAccessGrantsLocation",
        "updateJobPriority",
        "updateJobStatus",
        "updateStorageLensGroup"
      ]
    },
    {
      "service": "s3outposts",
      "className": "S3Outposts",
      "operations": [
        "createEndpoint",
        "deleteEndpoint",
        "listEndpoints",
        "listOutpostsWithS3",
        "listSharedEndpoints"
      ]
    },
    {
      "service": "s3tables",
      "className": "S3Tables",
      "operations": [
        "createNamespace",
        "createTable",
        "createTableBucket",
        "deleteNamespace",
        "deleteTable",
        "deleteTableBucket",
        "deleteTableBucketEncryption",
        "deleteTableBucketPolicy",
        "deleteTablePolicy",
        "getNamespace",
        "getTable",
        "getTableBucket",
        "getTableBucketEncryption",
        "getTableBucketMaintenanceConfiguration",
        "getTableBucketPolicy",
        "getTableEncryption",
        "getTableMaintenanceConfiguration",
        "getTableMaintenanceJobStatus",
        "getTableMetadataLocation",
        "getTablePolicy",
        "listNamespaces",
        "listTableBuckets",
        "listTables",
        "putTableBucketEncryption",
        "putTableBucketMaintenanceConfiguration",
        "putTableBucketPolicy",
        "putTableMaintenanceConfiguration",
        "putTablePolicy",
        "renameTable",
        "updateTableMetadataLocation"
      ]
    },
    {
      "service": "s3vectors",
      "className": "S3Vectors",
      "operations": [
        "createIndex",
        "createVectorBucket",
        "deleteIndex",
        "deleteVectorBucket",
        "deleteVectorBucketPolicy",
        "deleteVectors",
        "getIndex",
        "getVectorBucket",
        "getVectorBucketPolicy",
        "getVectors",
        "listIndexes",
        "listVectorBuckets",
        "listVectors",
        "putVectorBucketPolicy",
        "putVectors",
        "queryVectors"
      ]
    },
    {
      "service": "sagemaker",
      "className": "SageMaker",
      "operations": [
        "addAssociation",
        "addTags",
        "associateTrialComponent",
        "batchDeleteClusterNodes",
        "batchDescribeModelPackage",
        "createAction",
        "createAlgorithm",
        "createApp",
        "createAppImageConfig",
        "createArtifact",
        "createAutoMLJob",
        "createAutoMLJobV2",
        "createCluster",
        "createClusterSchedulerConfig",
        "createCodeRepository",
        "createCompilationJob",
        "createComputeQuota",
        "createContext",
        "createDataQualityJobDefinition",
        "createDeviceFleet",
        "createDomain",
        "createEdgeDeploymentPlan",
        "createEdgeDeploymentStage",
        "createEdgePackagingJob",
        "createEndpoint",
        "createEndpointConfig",
        "createExperiment",
        "createFeatureGroup",
        "createFlowDefinition",
        "createHub",
        "createHubContentPresignedUrls",
        "createHubContentReference",
        "createHumanTaskUi",
        "createHyperParameterTuningJob",
        "createImage",
        "createImageVersion",
        "createInferenceComponent",
        "createInferenceExperiment",
        "createInferenceRecommendationsJob",
        "createLabelingJob",
        "createMlflowTrackingServer",
        "createModel",
        "createModelBiasJobDefinition",
        "createModelCard",
        "createModelCardExportJob",
        "createModelExplainabilityJobDefinition",
        "createModelPackage",
        "createModelPackageGroup",
        "createModelQualityJobDefinition",
        "createMonitoringSchedule",
        "createNotebookInstance",
        "createNotebookInstanceLifecycleConfig",
        "createOptimizationJob",
        "createPartnerApp",
        "createPartnerAppPresignedUrl",
        "createPipeline",
        "createPresignedDomainUrl",
        "createPresignedMlflowTrackingServerUrl",
        "createPresignedNotebookInstanceUrl",
        "createProcessingJob",
        "createProject",
        "createSpace",
        "createStudioLifecycleConfig",
        "createTrainingJob",
        "createTrainingPlan",
        "createTransformJob",
        "createTrial",
        "createTrialComponent",
        "createUserProfile",
        "createWorkforce",
        "createWorkteam",
        "deleteAction",
        "deleteAlgorithm",
        "deleteApp",
        "deleteAppImageConfig",
        "deleteArtifact",
        "deleteAssociation",
        "deleteCluster",
        "deleteClusterSchedulerConfig",
        "deleteCodeRepository",
        "deleteCompilationJob",
        "deleteComputeQuota",
        "deleteContext",
        "deleteDataQualityJobDefinition",
        "deleteDeviceFleet",
        "deleteDomain",
        "deleteEdgeDeploymentPlan",
        "deleteEdgeDeploymentStage",
        "deleteEndpoint",
        "deleteEndpointConfig",
        "deleteExperiment",
        "deleteFeatureGroup",
        "deleteFlowDefinition",
        "deleteHub",
        "deleteHubContent",
        "deleteHubContentReference",
        "deleteHumanTaskUi",
        "deleteHyperParameterTuningJob",
        "deleteImage",
        "deleteImageVersion",
        "deleteInferenceComponent",
        "deleteInferenceExperiment",
        "deleteMlflowTrackingServer",
        "deleteModel",
        "deleteModelBiasJobDefinition",
        "deleteModelCard",
        "deleteModelExplainabilityJobDefinition",
        "deleteModelPackage",
        "deleteModelPackageGroup",
        "deleteModelPackageGroupPolicy",
        "deleteModelQualityJobDefinition",
        "deleteMonitoringSchedule",
        "deleteNotebookInstance",
        "deleteNotebookInstanceLifecycleConfig",
        "deleteOptimizationJob",
        "deletePartnerApp",
        "deletePipeline",
        "deleteProject",
        "deleteSpace",
        "deleteStudioLifecycleConfig",
        "deleteTags",
        "deleteTrial",
        "deleteTrialComponent",
        "deleteUserProfile",
        "deleteWorkforce",
        "deleteWorkteam",
        "deregisterDevices",
        "describeAction",
        "describeAlgorithm",
        "describeApp",
        "describeAppImageConfig",
        "describeArtifact",
        "describeAutoMLJob",
        "describeAutoMLJobV2",
        "describeCluster",
        "describeClusterNode",
        "describeClusterSchedulerConfig",
        "describeCodeRepository",
        "describeCompilationJob",
        "describeComputeQuota",
        "describeContext",
        "describeDataQualityJobDefinition",
        "describeDevice",
        "describeDeviceFleet",
        "describeDomain",
        "describeEdgeDeploymentPlan",
        "describeEdgePackagingJob",
        "describeEndpoint",
        "describeEndpointConfig",
        "describeExperiment",
        "describeFeatureGroup",
        "describeFeatureMetadata",
        "describeFlowDefinition",
        "describeHub",
        "describeHubContent",
        "describeHumanTaskUi",
        "describeHyperParameterTuningJob",
        "describeImage",
        "describeImageVersion",
        "describeInferenceComponent",
        "describeInferenceExperiment",
        "describeInferenceRecommendationsJob",
        "describeLabelingJob",
        "describeLineageGroup",
        "describeMlflowTrackingServer",
        "describeModel",
        "describeModelBiasJobDefinition",
        "describeModelCard",
        "describeModelCardExportJob",
        "describeModelExplainabilityJobDefinition",
        "describeModelPackage",
        "describeModelPackageGroup",
        "describeModelQualityJobDefinition",
        "describeMonitoringSchedule",
        "describeNotebookInstance",
        "describeNotebookInstanceLifecycleConfig",
        "describeOptimizationJob",
        "describePartnerApp",
        "describePipeline",
        "describePipelineDefinitionForExecution",
        "describePipelineExecution",
        "describeProcessingJob",
        "describeProject",
        "describeSpace",
        "describeStudioLifecycleConfig",
        "describeSubscribedWorkteam",
        "describeTrainingJob",
        "describeTrainingPlan",
        "describeTransformJob",
        "describeTrial",
        "describeTrialComponent",
        "describeUserProfile",
        "describeWorkforce",
        "describeWorkteam",
        "disableSagemakerServicecatalogPortfolio",
        "disassociateTrialComponent",
        "enableSagemakerServicecatalogPortfolio",
        "getDeviceFleetReport",
        "getLineageGroupPolicy",
        "getModelPackageGroupPolicy",
        "getSagemakerServicecatalogPortfolioStatus",
        "getScalingConfigurationRecommendation",
        "getSearchSuggestions",
        "importHubContent",
        "listActions",
        "listAlgorithms",
        "listAliases",
        "listAppImageConfigs",
        "listApps",
        "listArtifacts",
        "listAssociations",
        "listAutoMLJobs",
        "listCandidatesForAutoMLJob",
        "listClusterNodes",
        "listClusters",
        "listClusterSchedulerConfigs",
        "listCodeRepositories",
        "listCompilationJobs",
        "listComputeQuotas",
        "listContexts",
        "listDataQualityJobDefinitions",
        "listDeviceFleets",
        "listDevices",
        "listDomains",
        "listEdgeDeploymentPlans",
        "listEdgePackagingJobs",
        "listEndpointConfigs",
        "listEndpoints",
        "listExperiments",
        "listFeatureGroups",
        "listFlowDefinitions",
        "listHubContents",
        "listHubContentVersions",
        "listHubs",
        "listHumanTaskUis",
        "listHyperParameterTuningJobs",
        "listImages",
        "listImageVersions",
        "listInferenceComponents",
        "listInferenceExperiments",
        "listInferenceRecommendationsJobs",
        "listInferenceRecommendationsJobSteps",
        "listLabelingJobs",
        "listLabelingJobsForWorkteam",
        "listLineageGroups",
        "listMlflowTrackingServers",
        "listModelBiasJobDefinitions",
        "listModelCardExportJobs",
        "listModelCards",
        "listModelCardVersions",
        "listModelExplainabilityJobDefinitions",
        "listModelMetadata",
        "listModelPackageGroups",
        "listModelPackages",
        "listModelQualityJobDefinitions",
        "listModels",
        "listMonitoringAlertHistory",
        "listMonitoringAlerts",
        "listMonitoringExecutions",
        "listMonitoringSchedules",
        "listNotebookInstanceLifecycleConfigs",
        "listNotebookInstances",
        "listOptimizationJobs",
        "listPartnerApps",
        "listPipelineExecutions",
        "listPipelineExecutionSteps",
        "listPipelineParametersForExecution",
        "listPipelines",
        "listPipelineVersions",
        "listProcessingJobs",
        "listProjects",
        "listResourceCatalogs",
        "listSpaces",
        "listStageDevices",
        "listStudioLifecycleConfigs",
        "listSubscribedWorkteams",
        "listTags",
        "listTrainingJobs",
        "listTrainingJobsForHyperParameterTuningJob",
        "listTrainingPlans",
        "listTransformJobs",
        "listTrialComponents",
        "listTrials",
        "listUserProfiles",
        "listWorkforces",
        "listWorkteams",
        "putModelPackageGroupPolicy",
        "queryLineage",
        "registerDevices",
        "renderUiTemplate",
        "retryPipelineExecution",
        "search",
        "searchTrainingPlanOfferings",
        "sendPipelineExecutionStepFailure",
        "sendPipelineExecutionStepSuccess",
        "startEdgeDeploymentStage",
        "startInferenceExperiment",
        "startMlflowTrackingServer",
        "startMonitoringSchedule",
        "startNotebookInstance",
        "startPipelineExecution",
        "startSession",
        "stopAutoMLJob",
        "stopCompilationJob",
        "stopEdgeDeploymentStage",
        "stopEdgePackagingJob",
        "stopHyperParameterTuningJob",
        "stopInferenceExperiment",
        "stopInferenceRecommendationsJob",
        "stopLabelingJob",
        "stopMlflowTrackingServer",
        "stopMonitoringSchedule",
        "stopNotebookInstance",
        "stopOptimizationJob",
        "stopPipelineExecution",
        "stopProcessingJob",
        "stopTrainingJob",
        "stopTransformJob",
        "updateAction",
        "updateAppImageConfig",
        "updateArtifact",
        "updateCluster",
        "updateClusterSchedulerConfig",
        "updateClusterSoftware",
        "updateCodeRepository",
        "updateComputeQuota",
        "updateContext",
        "updateDeviceFleet",
        "updateDevices",
        "updateDomain",
        "updateEndpoint",
        "updateEndpointWeightsAndCapacities",
        "updateExperiment",
        "updateFeatureGroup",
        "updateFeatureMetadata",
        "updateHub",
        "updateHubContent",
        "updateHubContentReference",
        "updateImage",
        "updateImageVersion",
        "updateInferenceComponent",
        "updateInferenceComponentRuntimeConfig",
        "updateInferenceExperiment",
        "updateMlflowTrackingServer",
        "updateModelCard",
        "updateModelPackage",
        "updateMonitoringAlert",
        "updateMonitoringSchedule",
        "updateNotebookInstance",
        "updateNotebookInstanceLifecycleConfig",
        "updatePartnerApp",
        "updatePipeline",
        "updatePipelineExecution",
        "updatePipelineVersion",
        "updateProject",
        "updateSpace",
        "updateTrainingJob",
        "updateTrial",
        "updateTrialComponent",
        "updateUserProfile",
        "updateWorkforce",
        "updateWorkteam"
      ]
    },
    {
      "service": "sagemaker-a2i-runtime",
      "className": "SageMakerA2IRuntime",
      "operations": [
        "deleteHumanLoop",
        "describeHumanLoop",
        "listHumanLoops",
        "startHumanLoop",
        "stopHumanLoop"
      ]
    },
    {
      "service": "sagemaker-edge",
      "className": "SagemakerEdge",
      "operations": [
        "getDeployments",
        "getDeviceRegistration",
        "sendHeartbeat"
      ]
    },
    {
      "service": "sagemaker-featurestore-runtime",
      "className": "SageMakerFeatureStoreRuntime",
      "operations": [
        "batchGetRecord",
        "deleteRecord",
        "getRecord",
        "putRecord"
      ]
    },
    {
      "service": "sagemaker-geospatial",
      "className": "SageMakerGeospatial",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "deleteEarthObservationJob",
        "deleteVectorEnrichmentJob",
        "exportEarthObservationJob",
        "exportVectorEnrichmentJob",
        "getEarthObservationJob",
        "getRasterDataCollection",
        "getTile",
        "getVectorEnrichmentJob",
        "listEarthObservationJobs",
        "listRasterDataCollections",
        "listVectorEnrichmentJobs",
        "searchRasterDataCollection",
        "startEarthObservationJob",
        "startVectorEnrichmentJob",
        "stopEarthObservationJob",
        "stopVectorEnrichmentJob"
      ]
    },
    {
      "service": "sagemaker-metrics",
      "className": "SageMakerMetrics",
      "operations": [
        "batchGetMetrics",
        "batchPutMetrics"
      ]
    },
    {
      "service": "sagemaker-runtime",
      "className": "SageMakerRuntime",
      "operations": [
        "invokeEndpoint",
        "invokeEndpointAsync",
        "invokeEndpointWithResponseStream"
      ]
    },
    {
      "service": "savingsplans",
      "className": "savingsplans",
      "operations": [
        "createSavingsPlan",
        "deleteQueuedSavingsPlan",
        "describeSavingsPlanRates",
        "describeSavingsPlans",
        "describeSavingsPlansOfferingRates",
        "describeSavingsPlansOfferings",
        "listTagsForResource",
        "returnSavingsPlan",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "scheduler",
      "className": "Scheduler",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "createSchedule",
        "createScheduleGroup",
        "deleteSchedule",
        "deleteScheduleGroup",
        "getSchedule",
        "getScheduleGroup",
        "listScheduleGroups",
        "listSchedules",
        "updateSchedule"
      ]
    },
    {
      "service": "schemas",
      "className": "schemas",
      "operations": [
        "createDiscoverer",
        "createRegistry",
        "createSchema",
        "deleteDiscoverer",
        "deleteRegistry",
        "deleteResourcePolicy",
        "deleteSchema",
        "deleteSchemaVersion",
        "describeCodeBinding",
        "describeDiscoverer",
        "describeRegistry",
        "describeSchema",
        "exportSchema",
        "getCodeBindingSource",
        "getDiscoveredSchema",
        "getResourcePolicy",
        "listDiscoverers",
        "listRegistries",
        "listSchemas",
        "listSchemaVersions",
        "listTagsForResource",
        "putCodeBinding",
        "putResourcePolicy",
        "searchSchemas",
        "startDiscoverer",
        "stopDiscoverer",
        "tagResource",
        "untagResource",
        "updateDiscoverer",
        "updateRegistry",
        "updateSchema"
      ]
    },
    {
      "service": "secrets-manager",
      "className": "SecretsManager",
      "operations": [
        "batchGetSecretValue",
        "cancelRotateSecret",
        "createSecret",
        "deleteResourcePolicy",
        "deleteSecret",
        "describeSecret",
        "getRandomPassword",
        "getResourcePolicy",
        "getSecretValue",
        "listSecrets",
        "listSecretVersionIds",
        "putResourcePolicy",
        "putSecretValue",
        "removeRegionsFromReplication",
        "replicateSecretToRegions",
        "restoreSecret",
        "rotateSecret",
        "stopReplicationToReplica",
        "tagResource",
        "untagResource",
        "updateSecret",
        "updateSecretVersionStage",
        "validateResourcePolicy"
      ]
    },
    {
      "service": "security-ir",
      "className": "SecurityIR",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "batchGetMemberAccountDetails",
        "cancelMembership",
        "closeCase",
        "createCase",
        "createCaseComment",
        "createMembership",
        "getCase",
        "getCaseAttachmentDownloadUrl",
        "getCaseAttachmentUploadUrl",
        "getMembership",
        "listCaseEdits",
        "listCases",
        "listComments",
        "listMemberships",
        "updateCase",
        "updateCaseComment",
        "updateCaseStatus",
        "updateMembership",
        "updateResolverType"
      ]
    },
    {
      "service": "securityhub",
      "className": "SecurityHub",
      "operations": [
        "acceptAdministratorInvitation",
        "acceptInvitation",
        "batchDeleteAutomationRules",
        "batchDisableStandards",
        "batchEnableStandards",
        "batchGetAutomationRules",
        "batchGetConfigurationPolicyAssociations",
        "batchGetSecurityControls",
        "batchGetStandardsControlAssociations",
        "batchImportFindings",
        "batchUpdateAutomationRules",
        "batchUpdateFindings",
        "batchUpdateFindingsV2",
        "batchUpdateStandardsControlAssociations",
        "connectorRegistrationsV2",
        "createActionTarget",
        "createAggregatorV2",
        "createAutomationRule",
        "createAutomationRuleV2",
        "createConfigurationPolicy",
        "createConnectorV2",
        "createFindingAggregator",
        "createInsight",
        "createMembers",
        "createTicketV2",
        "declineInvitations",
        "deleteActionTarget",
        "deleteAggregatorV2",
        "deleteAutomationRuleV2",
        "deleteConfigurationPolicy",
        "deleteConnectorV2",
        "deleteFindingAggregator",
        "deleteInsight",
        "deleteInvitations",
        "deleteMembers",
        "describeActionTargets",
        "describeHub",
        "describeOrganizationConfiguration",
        "describeProducts",
        "describeProductsV2",
        "describeSecurityHubV2",
        "describeStandards",
        "describeStandardsControls",
        "disableImportFindingsForProduct",
        "disableOrganizationAdminAccount",
        "disableSecurityHub",
        "disableSecurityHubV2",
        "disassociateFromAdministratorAccount",
        "disassociateFromMasterAccount",
        "disassociateMembers",
        "enableImportFindingsForProduct",
        "enableOrganizationAdminAccount",
        "enableSecurityHub",
        "enableSecurityHubV2",
        "getAdministratorAccount",
        "getAggregatorV2",
        "getAutomationRuleV2",
        "getConfigurationPolicy",
        "getConfigurationPolicyAssociation",
        "getConnectorV2",
        "getEnabledStandards",
        "getFindingAggregator",
        "getFindingHistory",
        "getFindings",
        "getFindingStatisticsV2",
        "getFindingsV2",
        "getInsightResults",
        "getInsights",
        "getInvitationsCount",
        "getMasterAccount",
        "getMembers",
        "getResourcesStatisticsV2",
        "getResourcesV2",
        "getSecurityControlDefinition",
        "inviteMembers",
        "listAggregatorsV2",
        "listAutomationRules",
        "listAutomationRulesV2",
        "listConfigurationPolicies",
        "listConfigurationPolicyAssociations",
        "listConnectorsV2",
        "listEnabledProductsForImport",
        "listFindingAggregators",
        "listInvitations",
        "listMembers",
        "listOrganizationAdminAccounts",
        "listSecurityControlDefinitions",
        "listStandardsControlAssociations",
        "listTagsForResource",
        "startConfigurationPolicyAssociation",
        "startConfigurationPolicyDisassociation",
        "tagResource",
        "untagResource",
        "updateActionTarget",
        "updateAggregatorV2",
        "updateAutomationRuleV2",
        "updateConfigurationPolicy",
        "updateConnectorV2",
        "updateFindingAggregator",
        "updateFindings",
        "updateInsight",
        "updateOrganizationConfiguration",
        "updateSecurityControl",
        "updateSecurityHubConfiguration",
        "updateStandardsControl"
      ]
    },
    {
      "service": "securitylake",
      "className": "SecurityLake",
      "operations": [
        "createDataLakeExceptionSubscription",
        "deleteDataLakeExceptionSubscription",
        "deregisterDataLakeDelegatedAdministrator",
        "getDataLakeExceptionSubscription",
        "listDataLakeExceptions",
        "listTagsForResource",
        "registerDataLakeDelegatedAdministrator",
        "tagResource",
        "untagResource",
        "updateDataLakeExceptionSubscription",
        "createAwsLogSource",
        "createCustomLogSource",
        "createDataLake",
        "createDataLakeOrganizationConfiguration",
        "createSubscriber",
        "createSubscriberNotification",
        "deleteAwsLogSource",
        "deleteCustomLogSource",
        "deleteDataLake",
        "deleteDataLakeOrganizationConfiguration",
        "deleteSubscriber",
        "deleteSubscriberNotification",
        "getDataLakeOrganizationConfiguration",
        "getDataLakeSources",
        "getSubscriber",
        "listDataLakes",
        "listLogSources",
        "listSubscribers",
        "updateDataLake",
        "updateSubscriber",
        "updateSubscriberNotification"
      ]
    },
    {
      "service": "serverlessapplicationrepository",
      "className": "ServerlessApplicationRepository",
      "operations": [
        "createApplication",
        "createApplicationVersion",
        "createCloudFormationChangeSet",
        "createCloudFormationTemplate",
        "deleteApplication",
        "getApplication",
        "getApplicationPolicy",
        "getCloudFormationTemplate",
        "listApplicationDependencies",
        "listApplications",
        "listApplicationVersions",
        "putApplicationPolicy",
        "unshareApplication",
        "updateApplication"
      ]
    },
    {
      "service": "service-catalog",
      "className": "ServiceCatalog",
      "operations": [
        "acceptPortfolioShare",
        "associateBudgetWithResource",
        "associatePrincipalWithPortfolio",
        "associateProductWithPortfolio",
        "associateServiceActionWithProvisioningArtifact",
        "associateTagOptionWithResource",
        "batchAssociateServiceActionWithProvisioningArtifact",
        "batchDisassociateServiceActionFromProvisioningArtifact",
        "copyProduct",
        "createConstraint",
        "createPortfolio",
        "createPortfolioShare",
        "createProduct",
        "createProvisionedProductPlan",
        "createProvisioningArtifact",
        "createServiceAction",
        "createTagOption",
        "deleteConstraint",
        "deletePortfolio",
        "deletePortfolioShare",
        "deleteProduct",
        "deleteProvisionedProductPlan",
        "deleteProvisioningArtifact",
        "deleteServiceAction",
        "deleteTagOption",
        "describeConstraint",
        "describeCopyProductStatus",
        "describePortfolio",
        "describePortfolioShares",
        "describePortfolioShareStatus",
        "describeProduct",
        "describeProductAsAdmin",
        "describeProductView",
        "describeProvisionedProduct",
        "describeProvisionedProductPlan",
        "describeProvisioningArtifact",
        "describeProvisioningParameters",
        "describeRecord",
        "describeServiceAction",
        "describeServiceActionExecutionParameters",
        "describeTagOption",
        "disableAWSOrganizationsAccess",
        "disassociateBudgetFromResource",
        "disassociatePrincipalFromPortfolio",
        "disassociateProductFromPortfolio",
        "disassociateServiceActionFromProvisioningArtifact",
        "disassociateTagOptionFromResource",
        "enableAWSOrganizationsAccess",
        "executeProvisionedProductPlan",
        "executeProvisionedProductServiceAction",
        "getAWSOrganizationsAccessStatus",
        "getProvisionedProductOutputs",
        "importAsProvisionedProduct",
        "listAcceptedPortfolioShares",
        "listBudgetsForResource",
        "listConstraintsForPortfolio",
        "listLaunchPaths",
        "listOrganizationPortfolioAccess",
        "listPortfolioAccess",
        "listPortfolios",
        "listPortfoliosForProduct",
        "listPrincipalsForPortfolio",
        "listProvisionedProductPlans",
        "listProvisioningArtifacts",
        "listProvisioningArtifactsForServiceAction",
        "listRecordHistory",
        "listResourcesForTagOption",
        "listServiceActions",
        "listServiceActionsForProvisioningArtifact",
        "listStackInstancesForProvisionedProduct",
        "listTagOptions",
        "notifyProvisionProductEngineWorkflowResult",
        "notifyTerminateProvisionedProductEngineWorkflowResult",
        "notifyUpdateProvisionedProductEngineWorkflowResult",
        "provisionProduct",
        "rejectPortfolioShare",
        "scanProvisionedProducts",
        "searchProducts",
        "searchProductsAsAdmin",
        "searchProvisionedProducts",
        "terminateProvisionedProduct",
        "updateConstraint",
        "updatePortfolio",
        "updatePortfolioShare",
        "updateProduct",
        "updateProvisionedProduct",
        "updateProvisionedProductProperties",
        "updateProvisioningArtifact",
        "updateServiceAction",
        "updateTagOption"
      ]
    },
    {
      "service": "service-catalog-appregistry",
      "className": "ServiceCatalogAppRegistry",
      "operations": [
        "associateAttributeGroup",
        "associateResource",
        "createApplication",
        "createAttributeGroup",
        "deleteApplication",
        "deleteAttributeGroup",
        "disassociateAttributeGroup",
        "disassociateResource",
        "getApplication",
        "getAssociatedResource",
        "getAttributeGroup",
        "getConfiguration",
        "listApplications",
        "listAssociatedAttributeGroups",
        "listAssociatedResources",
        "listAttributeGroups",
        "listAttributeGroupsForApplication",
        "listTagsForResource",
        "putConfiguration",
        "syncResource",
        "tagResource",
        "untagResource",
        "updateApplication",
        "updateAttributeGroup"
      ]
    },
    {
      "service": "service-quotas",
      "className": "ServiceQuotas",
      "operations": [
        "associateServiceQuotaTemplate",
        "createSupportCase",
        "deleteServiceQuotaIncreaseRequestFromTemplate",
        "disassociateServiceQuotaTemplate",
        "getAssociationForServiceQuotaTemplate",
        "getAWSDefaultServiceQuota",
        "getRequestedServiceQuotaChange",
        "getServiceQuota",
        "getServiceQuotaIncreaseRequestFromTemplate",
        "listAWSDefaultServiceQuotas",
        "listRequestedServiceQuotaChangeHistory",
        "listRequestedServiceQuotaChangeHistoryByQuota",
        "listServiceQuotaIncreaseRequestsInTemplate",
        "listServiceQuotas",
        "listServices",
        "listTagsForResource",
        "putServiceQuotaIncreaseRequestIntoTemplate",
        "requestServiceQuotaIncrease",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "servicediscovery",
      "className": "ServiceDiscovery",
      "operations": [
        "createHttpNamespace",
        "createPrivateDnsNamespace",
        "createPublicDnsNamespace",
        "createService",
        "deleteNamespace",
        "deleteService",
        "deleteServiceAttributes",
        "deregisterInstance",
        "discoverInstances",
        "discoverInstancesRevision",
        "getInstance",
        "getInstancesHealthStatus",
        "getNamespace",
        "getOperation",
        "getService",
        "getServiceAttributes",
        "listInstances",
        "listNamespaces",
        "listOperations",
        "listServices",
        "listTagsForResource",
        "registerInstance",
        "tagResource",
        "untagResource",
        "updateHttpNamespace",
        "updateInstanceCustomHealthStatus",
        "updatePrivateDnsNamespace",
        "updatePublicDnsNamespace",
        "updateService",
        "updateServiceAttributes"
      ]
    },
    {
      "service": "ses",
      "className": "SES",
      "operations": [
        "cloneReceiptRuleSet",
        "createConfigurationSet",
        "createConfigurationSetEventDestination",
        "createConfigurationSetTrackingOptions",
        "createCustomVerificationEmailTemplate",
        "createReceiptFilter",
        "createReceiptRule",
        "createReceiptRuleSet",
        "createTemplate",
        "deleteConfigurationSet",
        "deleteConfigurationSetEventDestination",
        "deleteConfigurationSetTrackingOptions",
        "deleteCustomVerificationEmailTemplate",
        "deleteIdentity",
        "deleteIdentityPolicy",
        "deleteReceiptFilter",
        "deleteReceiptRule",
        "deleteReceiptRuleSet",
        "deleteTemplate",
        "deleteVerifiedEmailAddress",
        "describeActiveReceiptRuleSet",
        "describeConfigurationSet",
        "describeReceiptRule",
        "describeReceiptRuleSet",
        "getAccountSendingEnabled",
        "getCustomVerificationEmailTemplate",
        "getIdentityDkimAttributes",
        "getIdentityMailFromDomainAttributes",
        "getIdentityNotificationAttributes",
        "getIdentityPolicies",
        "getIdentityVerificationAttributes",
        "getSendQuota",
        "getSendStatistics",
        "getTemplate",
        "listConfigurationSets",
        "listCustomVerificationEmailTemplates",
        "listIdentities",
        "listIdentityPolicies",
        "listReceiptFilters",
        "listReceiptRuleSets",
        "listTemplates",
        "listVerifiedEmailAddresses",
        "putConfigurationSetDeliveryOptions",
        "putIdentityPolicy",
        "reorderReceiptRuleSet",
        "sendBounce",
        "sendBulkTemplatedEmail",
        "sendCustomVerificationEmail",
        "sendEmail",
        "sendRawEmail",
        "sendTemplatedEmail",
        "setActiveReceiptRuleSet",
        "setIdentityDkimEnabled",
        "setIdentityFeedbackForwardingEnabled",
        "setIdentityHeadersInNotificationsEnabled",
        "setIdentityMailFromDomain",
        "setIdentityNotificationTopic",
        "setReceiptRulePosition",
        "testRenderTemplate",
        "updateAccountSendingEnabled",
        "updateConfigurationSetEventDestination",
        "updateConfigurationSetReputationMetricsEnabled",
        "updateConfigurationSetSendingEnabled",
        "updateConfigurationSetTrackingOptions",
        "updateCustomVerificationEmailTemplate",
        "updateReceiptRule",
        "updateTemplate",
        "verifyDomainDkim",
        "verifyDomainIdentity",
        "verifyEmailAddress",
        "verifyEmailIdentity"
      ]
    },
    {
      "service": "sesv2",
      "className": "SESv2",
      "operations": [
        "batchGetMetricData",
        "cancelExportJob",
        "createConfigurationSet",
        "createConfigurationSetEventDestination",
        "createContact",
        "createContactList",
        "createCustomVerificationEmailTemplate",
        "createDedicatedIpPool",
        "createDeliverabilityTestReport",
        "createEmailIdentity",
        "createEmailIdentityPolicy",
        "createEmailTemplate",
        "createExportJob",
        "createImportJob",
        "createMultiRegionEndpoint",
        "createTenant",
        "createTenantResourceAssociation",
        "deleteConfigurationSet",
        "deleteConfigurationSetEventDestination",
        "deleteContact",
        "deleteContactList",
        "deleteCustomVerificationEmailTemplate",
        "deleteDedicatedIpPool",
        "deleteEmailIdentity",
        "deleteEmailIdentityPolicy",
        "deleteEmailTemplate",
        "deleteMultiRegionEndpoint",
        "deleteSuppressedDestination",
        "deleteTenant",
        "deleteTenantResourceAssociation",
        "getAccount",
        "getBlacklistReports",
        "getConfigurationSet",
        "getConfigurationSetEventDestinations",
        "getContact",
        "getContactList",
        "getCustomVerificationEmailTemplate",
        "getDedicatedIp",
        "getDedicatedIpPool",
        "getDedicatedIps",
        "getDeliverabilityDashboardOptions",
        "getDeliverabilityTestReport",
        "getDomainDeliverabilityCampaign",
        "getDomainStatisticsReport",
        "getEmailIdentity",
        "getEmailIdentityPolicies",
        "getEmailTemplate",
        "getExportJob",
        "getImportJob",
        "getMessageInsights",
        "getMultiRegionEndpoint",
        "getReputationEntity",
        "getSuppressedDestination",
        "getTenant",
        "listConfigurationSets",
        "listContactLists",
        "listContacts",
        "listCustomVerificationEmailTemplates",
        "listDedicatedIpPools",
        "listDeliverabilityTestReports",
        "listDomainDeliverabilityCampaigns",
        "listEmailIdentities",
        "listEmailTemplates",
        "listExportJobs",
        "listImportJobs",
        "listMultiRegionEndpoints",
        "listRecommendations",
        "listReputationEntities",
        "listResourceTenants",
        "listSuppressedDestinations",
        "listTagsForResource",
        "listTenantResources",
        "listTenants",
        "putAccountDedicatedIpWarmupAttributes",
        "putAccountDetails",
        "putAccountSendingAttributes",
        "putAccountSuppressionAttributes",
        "putAccountVdmAttributes",
        "putConfigurationSetArchivingOptions",
        "putConfigurationSetDeliveryOptions",
        "putConfigurationSetReputationOptions",
        "putConfigurationSetSendingOptions",
        "putConfigurationSetSuppressionOptions",
        "putConfigurationSetTrackingOptions",
        "putConfigurationSetVdmOptions",
        "putDedicatedIpInPool",
        "putDedicatedIpPoolScalingAttributes",
        "putDedicatedIpWarmupAttributes",
        "putDeliverabilityDashboardOption",
        "putEmailIdentityConfigurationSetAttributes",
        "putEmailIdentityDkimAttributes",
        "putEmailIdentityDkimSigningAttributes",
        "putEmailIdentityFeedbackAttributes",
        "putEmailIdentityMailFromAttributes",
        "putSuppressedDestination",
        "sendBulkEmail",
        "sendCustomVerificationEmail",
        "sendEmail",
        "tagResource",
        "testRenderEmailTemplate",
        "untagResource",
        "updateConfigurationSetEventDestination",
        "updateContact",
        "updateContactList",
        "updateCustomVerificationEmailTemplate",
        "updateEmailIdentityPolicy",
        "updateEmailTemplate",
        "updateReputationEntityCustomerManagedStatus",
        "updateReputationEntityPolicy"
      ]
    },
    {
      "service": "sfn",
      "className": "SFN",
      "operations": [
        "createActivity",
        "createStateMachine",
        "createStateMachineAlias",
        "deleteActivity",
        "deleteStateMachine",
        "deleteStateMachineAlias",
        "deleteStateMachineVersion",
        "describeActivity",
        "describeExecution",
        "describeMapRun",
        "describeStateMachine",
        "describeStateMachineAlias",
        "describeStateMachineForExecution",
        "getActivityTask",
        "getExecutionHistory",
        "listActivities",
        "listExecutions",
        "listMapRuns",
        "listStateMachineAliases",
        "listStateMachines",
        "listStateMachineVersions",
        "listTagsForResource",
        "publishStateMachineVersion",
        "redriveExecution",
        "sendTaskFailure",
        "sendTaskHeartbeat",
        "sendTaskSuccess",
        "startExecution",
        "startSyncExecution",
        "stopExecution",
        "tagResource",
        "testState",
        "untagResource",
        "updateMapRun",
        "updateStateMachine",
        "updateStateMachineAlias",
        "validateStateMachineDefinition"
      ]
    },
    {
      "service": "shield",
      "className": "Shield",
      "operations": [
        "associateDRTLogBucket",
        "associateDRTRole",
        "associateHealthCheck",
        "associateProactiveEngagementDetails",
        "createProtection",
        "createProtectionGroup",
        "createSubscription",
        "deleteProtection",
        "deleteProtectionGroup",
        "deleteSubscription",
        "describeAttack",
        "describeAttackStatistics",
        "describeDRTAccess",
        "describeEmergencyContactSettings",
        "describeProtection",
        "describeProtectionGroup",
        "describeSubscription",
        "disableApplicationLayerAutomaticResponse",
        "disableProactiveEngagement",
        "disassociateDRTLogBucket",
        "disassociateDRTRole",
        "disassociateHealthCheck",
        "enableApplicationLayerAutomaticResponse",
        "enableProactiveEngagement",
        "getSubscriptionState",
        "listAttacks",
        "listProtectionGroups",
        "listProtections",
        "listResourcesInProtectionGroup",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "updateApplicationLayerAutomaticResponse",
        "updateEmergencyContactSettings",
        "updateProtectionGroup",
        "updateSubscription"
      ]
    },
    {
      "service": "signer",
      "className": "signer",
      "operations": [
        "addProfilePermission",
        "cancelSigningProfile",
        "describeSigningJob",
        "getRevocationStatus",
        "getSigningPlatform",
        "getSigningProfile",
        "listProfilePermissions",
        "listSigningJobs",
        "listSigningPlatforms",
        "listSigningProfiles",
        "listTagsForResource",
        "putSigningProfile",
        "removeProfilePermission",
        "revokeSignature",
        "revokeSigningProfile",
        "signPayload",
        "startSigningJob",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "simspaceweaver",
      "className": "SimSpaceWeaver",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "createSnapshot",
        "deleteApp",
        "deleteSimulation",
        "describeApp",
        "describeSimulation",
        "listApps",
        "listSimulations",
        "startApp",
        "startClock",
        "startSimulation",
        "stopApp",
        "stopClock",
        "stopSimulation"
      ]
    },
    {
      "service": "sms",
      "className": "SMS",
      "operations": [
        "createApp",
        "createReplicationJob",
        "deleteApp",
        "deleteAppLaunchConfiguration",
        "deleteAppReplicationConfiguration",
        "deleteAppValidationConfiguration",
        "deleteReplicationJob",
        "deleteServerCatalog",
        "disassociateConnector",
        "generateChangeSet",
        "generateTemplate",
        "getApp",
        "getAppLaunchConfiguration",
        "getAppReplicationConfiguration",
        "getAppValidationConfiguration",
        "getAppValidationOutput",
        "getConnectors",
        "getReplicationJobs",
        "getReplicationRuns",
        "getServers",
        "importAppCatalog",
        "importServerCatalog",
        "launchApp",
        "listApps",
        "notifyAppValidationOutput",
        "putAppLaunchConfiguration",
        "putAppReplicationConfiguration",
        "putAppValidationConfiguration",
        "startAppReplication",
        "startOnDemandAppReplication",
        "startOnDemandReplicationRun",
        "stopAppReplication",
        "terminateApp",
        "updateApp",
        "updateReplicationJob"
      ]
    },
    {
      "service": "snow-device-management",
      "className": "SnowDeviceManagement",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "cancelTask",
        "createTask",
        "describeDevice",
        "describeDeviceEc2Instances",
        "describeExecution",
        "describeTask",
        "listDeviceResources",
        "listDevices",
        "listExecutions",
        "listTasks"
      ]
    },
    {
      "service": "snowball",
      "className": "Snowball",
      "operations": [
        "cancelCluster",
        "cancelJob",
        "createAddress",
        "createCluster",
        "createJob",
        "createLongTermPricing",
        "createReturnShippingLabel",
        "describeAddress",
        "describeAddresses",
        "describeCluster",
        "describeJob",
        "describeReturnShippingLabel",
        "getJobManifest",
        "getJobUnlockCode",
        "getSnowballUsage",
        "getSoftwareUpdates",
        "listClusterJobs",
        "listClusters",
        "listCompatibleImages",
        "listJobs",
        "listLongTermPricing",
        "listPickupLocations",
        "listServiceVersions",
        "updateCluster",
        "updateJob",
        "updateJobShipmentState",
        "updateLongTermPricing"
      ]
    },
    {
      "service": "sns",
      "className": "SNS",
      "operations": [
        "addPermission",
        "checkIfPhoneNumberIsOptedOut",
        "confirmSubscription",
        "createPlatformApplication",
        "createPlatformEndpoint",
        "createSMSSandboxPhoneNumber",
        "createTopic",
        "deleteEndpoint",
        "deletePlatformApplication",
        "deleteSMSSandboxPhoneNumber",
        "deleteTopic",
        "getDataProtectionPolicy",
        "getEndpointAttributes",
        "getPlatformApplicationAttributes",
        "getSMSAttributes",
        "getSMSSandboxAccountStatus",
        "getSubscriptionAttributes",
        "getTopicAttributes",
        "listEndpointsByPlatformApplication",
        "listOriginationNumbers",
        "listPhoneNumbersOptedOut",
        "listPlatformApplications",
        "listSMSSandboxPhoneNumbers",
        "listSubscriptions",
        "listSubscriptionsByTopic",
        "listTagsForResource",
        "listTopics",
        "optInPhoneNumber",
        "publish",
        "publishBatch",
        "putDataProtectionPolicy",
        "removePermission",
        "setEndpointAttributes",
        "setPlatformApplicationAttributes",
        "setSMSAttributes",
        "setSubscriptionAttributes",
        "setTopicAttributes",
        "subscribe",
        "tagResource",
        "unsubscribe",
        "untagResource",
        "verifySMSSandboxPhoneNumber"
      ]
    },
    {
      "service": "socialmessaging",
      "className": "SocialMessaging",
      "operations": [
        "createWhatsAppMessageTemplate",
        "createWhatsAppMessageTemplateFromLibrary",
        "createWhatsAppMessageTemplateMedia",
        "deleteWhatsAppMessageTemplate",
        "getWhatsAppMessageTemplate",
        "listTagsForResource",
        "listWhatsAppMessageTemplates",
        "listWhatsAppTemplateLibrary",
        "tagResource",
        "untagResource",
        "updateWhatsAppMessageTemplate",
        "associateWhatsAppBusinessAccount",
        "deleteWhatsAppMessageMedia",
        "disassociateWhatsAppBusinessAccount",
        "getLinkedWhatsAppBusinessAccount",
        "getLinkedWhatsAppBusinessAccountPhoneNumber",
        "getWhatsAppMessageMedia",
        "listLinkedWhatsAppBusinessAccounts",
        "postWhatsAppMessageMedia",
        "putWhatsAppBusinessAccountEventDestinations",
        "sendWhatsAppMessage"
      ]
    },
    {
      "service": "sqs",
      "className": "SQS",
      "operations": [
        "addPermission",
        "cancelMessageMoveTask",
        "changeMessageVisibility",
        "changeMessageVisibilityBatch",
        "createQueue",
        "deleteMessage",
        "deleteMessageBatch",
        "deleteQueue",
        "getQueueAttributes",
        "getQueueUrl",
        "listDeadLetterSourceQueues",
        "listMessageMoveTasks",
        "listQueues",
        "listQueueTags",
        "purgeQueue",
        "receiveMessage",
        "removePermission",
        "sendMessage",
        "sendMessageBatch",
        "setQueueAttributes",
        "startMessageMoveTask",
        "tagQueue",
        "untagQueue"
      ]
    },
    {
      "service": "ssm",
      "className": "SSM",
      "operations": [
        "addTagsToResource",
        "associateOpsItemRelatedItem",
        "cancelCommand",
        "cancelMaintenanceWindowExecution",
        "createActivation",
        "createAssociation",
        "createAssociationBatch",
        "createDocument",
        "createMaintenanceWindow",
        "createOpsItem",
        "createOpsMetadata",
        "createPatchBaseline",
        "createResourceDataSync",
        "deleteActivation",
        "deleteAssociation",
        "deleteDocument",
        "deleteInventory",
        "deleteMaintenanceWindow",
        "deleteOpsItem",
        "deleteOpsMetadata",
        "deleteParameter",
        "deleteParameters",
        "deletePatchBaseline",
        "deleteResourceDataSync",
        "deleteResourcePolicy",
        "deregisterManagedInstance",
        "deregisterPatchBaselineForPatchGroup",
        "deregisterTargetFromMaintenanceWindow",
        "deregisterTaskFromMaintenanceWindow",
        "describeActivations",
        "describeAssociation",
        "describeAssociationExecutions",
        "describeAssociationExecutionTargets",
        "describeAutomationExecutions",
        "describeAutomationStepExecutions",
        "describeAvailablePatches",
        "describeDocument",
        "describeDocumentPermission",
        "describeEffectiveInstanceAssociations",
        "describeEffectivePatchesForPatchBaseline",
        "describeInstanceAssociationsStatus",
        "describeInstanceInformation",
        "describeInstancePatches",
        "describeInstancePatchStates",
        "describeInstancePatchStatesForPatchGroup",
        "describeInstanceProperties",
        "describeInventoryDeletions",
        "describeMaintenanceWindowExecutions",
        "describeMaintenanceWindowExecutionTaskInvocations",
        "describeMaintenanceWindowExecutionTasks",
        "describeMaintenanceWindows",
        "describeMaintenanceWindowSchedule",
        "describeMaintenanceWindowsForTarget",
        "describeMaintenanceWindowTargets",
        "describeMaintenanceWindowTasks",
        "describeOpsItems",
        "describeParameters",
        "describePatchBaselines",
        "describePatchGroups",
        "describePatchGroupState",
        "describePatchProperties",
        "describeSessions",
        "disassociateOpsItemRelatedItem",
        "getAccessToken",
        "getAutomationExecution",
        "getCalendarState",
        "getCommandInvocation",
        "getConnectionStatus",
        "getDefaultPatchBaseline",
        "getDeployablePatchSnapshotForInstance",
        "getDocument",
        "getExecutionPreview",
        "getInventory",
        "getInventorySchema",
        "getMaintenanceWindow",
        "getMaintenanceWindowExecution",
        "getMaintenanceWindowExecutionTask",
        "getMaintenanceWindowExecutionTaskInvocation",
        "getMaintenanceWindowTask",
        "getOpsItem",
        "getOpsMetadata",
        "getOpsSummary",
        "getParameter",
        "getParameterHistory",
        "getParameters",
        "getParametersByPath",
        "getPatchBaseline",
        "getPatchBaselineForPatchGroup",
        "getResourcePolicies",
        "getServiceSetting",
        "labelParameterVersion",
        "listAssociations",
        "listAssociationVersions",
        "listCommandInvocations",
        "listCommands",
        "listComplianceItems",
        "listComplianceSummaries",
        "listDocumentMetadataHistory",
        "listDocuments",
        "listDocumentVersions",
        "listInventoryEntries",
        "listNodes",
        "listNodesSummary",
        "listOpsItemEvents",
        "listOpsItemRelatedItems",
        "listOpsMetadata",
        "listResourceComplianceSummaries",
        "listResourceDataSync",
        "listTagsForResource",
        "modifyDocumentPermission",
        "putComplianceItems",
        "putInventory",
        "putParameter",
        "putResourcePolicy",
        "registerDefaultPatchBaseline",
        "registerPatchBaselineForPatchGroup",
        "registerTargetWithMaintenanceWindow",
        "registerTaskWithMaintenanceWindow",
        "removeTagsFromResource",
        "resetServiceSetting",
        "resumeSession",
        "sendAutomationSignal",
        "sendCommand",
        "startAccessRequest",
        "startAssociationsOnce",
        "startAutomationExecution",
        "startChangeRequestExecution",
        "startExecutionPreview",
        "startSession",
        "stopAutomationExecution",
        "terminateSession",
        "unlabelParameterVersion",
        "updateAssociation",
        "updateAssociationStatus",
        "updateDocument",
        "updateDocumentDefaultVersion",
        "updateDocumentMetadata",
        "updateMaintenanceWindow",
        "updateMaintenanceWindowTarget",
        "updateMaintenanceWindowTask",
        "updateManagedInstanceRole",
        "updateOpsItem",
        "updateOpsMetadata",
        "updatePatchBaseline",
        "updateResourceDataSync",
        "updateServiceSetting"
      ]
    },
    {
      "service": "ssm-contacts",
      "className": "SSMContacts",
      "operations": [
        "acceptPage",
        "activateContactChannel",
        "createContact",
        "createContactChannel",
        "createRotation",
        "createRotationOverride",
        "deactivateContactChannel",
        "deleteContact",
        "deleteContactChannel",
        "deleteRotation",
        "deleteRotationOverride",
        "describeEngagement",
        "describePage",
        "getContact",
        "getContactChannel",
        "getContactPolicy",
        "getRotation",
        "getRotationOverride",
        "listContactChannels",
        "listContacts",
        "listEngagements",
        "listPageReceipts",
        "listPageResolutions",
        "listPagesByContact",
        "listPagesByEngagement",
        "listPreviewRotationShifts",
        "listRotationOverrides",
        "listRotations",
        "listRotationShifts",
        "listTagsForResource",
        "putContactPolicy",
        "sendActivationCode",
        "startEngagement",
        "stopEngagement",
        "tagResource",
        "untagResource",
        "updateContact",
        "updateContactChannel",
        "updateRotation"
      ]
    },
    {
      "service": "ssm-guiconnect",
      "className": "SSMGuiConnect",
      "operations": [
        "deleteConnectionRecordingPreferences",
        "getConnectionRecordingPreferences",
        "updateConnectionRecordingPreferences"
      ]
    },
    {
      "service": "ssm-incidents",
      "className": "SSMIncidents",
      "operations": [
        "batchGetIncidentFindings",
        "createReplicationSet",
        "createResponsePlan",
        "createTimelineEvent",
        "deleteIncidentRecord",
        "deleteReplicationSet",
        "deleteResourcePolicy",
        "deleteResponsePlan",
        "deleteTimelineEvent",
        "getIncidentRecord",
        "getReplicationSet",
        "getResourcePolicies",
        "getResponsePlan",
        "getTimelineEvent",
        "listIncidentFindings",
        "listIncidentRecords",
        "listRelatedItems",
        "listReplicationSets",
        "listResponsePlans",
        "listTagsForResource",
        "listTimelineEvents",
        "putResourcePolicy",
        "startIncident",
        "tagResource",
        "untagResource",
        "updateDeletionProtection",
        "updateIncidentRecord",
        "updateRelatedItems",
        "updateReplicationSet",
        "updateResponsePlan",
        "updateTimelineEvent"
      ]
    },
    {
      "service": "ssm-quicksetup",
      "className": "SSMQuickSetup",
      "operations": [
        "createConfigurationManager",
        "deleteConfigurationManager",
        "getConfiguration",
        "getConfigurationManager",
        "getServiceSettings",
        "listConfigurationManagers",
        "listConfigurations",
        "listQuickSetupTypes",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "updateConfigurationDefinition",
        "updateConfigurationManager",
        "updateServiceSettings"
      ]
    },
    {
      "service": "ssm-sap",
      "className": "SsmSap",
      "operations": [
        "deleteResourcePermission",
        "deregisterApplication",
        "getApplication",
        "getComponent",
        "getDatabase",
        "getOperation",
        "getResourcePermission",
        "listApplications",
        "listComponents",
        "listDatabases",
        "listOperationEvents",
        "listOperations",
        "listTagsForResource",
        "putResourcePermission",
        "registerApplication",
        "startApplication",
        "startApplicationRefresh",
        "stopApplication",
        "tagResource",
        "untagResource",
        "updateApplicationSettings"
      ]
    },
    {
      "service": "sso",
      "className": "SSO",
      "operations": [
        "getRoleCredentials",
        "listAccountRoles",
        "listAccounts",
        "logout"
      ]
    },
    {
      "service": "sso-admin",
      "className": "SSOAdmin",
      "operations": [
        "attachCustomerManagedPolicyReferenceToPermissionSet",
        "attachManagedPolicyToPermissionSet",
        "createAccountAssignment",
        "createApplication",
        "createApplicationAssignment",
        "createInstance",
        "createInstanceAccessControlAttributeConfiguration",
        "createPermissionSet",
        "createTrustedTokenIssuer",
        "deleteAccountAssignment",
        "deleteApplication",
        "deleteApplicationAssignment",
        "deleteInlinePolicyFromPermissionSet",
        "deleteInstance",
        "deleteInstanceAccessControlAttributeConfiguration",
        "deletePermissionsBoundaryFromPermissionSet",
        "deletePermissionSet",
        "deleteTrustedTokenIssuer",
        "describeAccountAssignmentCreationStatus",
        "describeAccountAssignmentDeletionStatus",
        "describeApplication",
        "describeApplicationAssignment",
        "describeApplicationProvider",
        "describeInstance",
        "describeInstanceAccessControlAttributeConfiguration",
        "describePermissionSet",
        "describePermissionSetProvisioningStatus",
        "describeTrustedTokenIssuer",
        "detachCustomerManagedPolicyReferenceFromPermissionSet",
        "detachManagedPolicyFromPermissionSet",
        "getApplicationAssignmentConfiguration",
        "getInlinePolicyForPermissionSet",
        "getPermissionsBoundaryForPermissionSet",
        "listAccountAssignmentCreationStatus",
        "listAccountAssignmentDeletionStatus",
        "listAccountAssignments",
        "listAccountAssignmentsForPrincipal",
        "listAccountsForProvisionedPermissionSet",
        "listApplicationAssignments",
        "listApplicationAssignmentsForPrincipal",
        "listApplicationProviders",
        "listApplications",
        "listCustomerManagedPolicyReferencesInPermissionSet",
        "listInstances",
        "listManagedPoliciesInPermissionSet",
        "listPermissionSetProvisioningStatus",
        "listPermissionSets",
        "listPermissionSetsProvisionedToAccount",
        "listTagsForResource",
        "listTrustedTokenIssuers",
        "provisionPermissionSet",
        "putApplicationAssignmentConfiguration",
        "putInlinePolicyToPermissionSet",
        "putPermissionsBoundaryToPermissionSet",
        "tagResource",
        "untagResource",
        "updateApplication",
        "updateInstance",
        "updateInstanceAccessControlAttributeConfiguration",
        "updatePermissionSet",
        "updateTrustedTokenIssuer",
        "deleteApplicationAccessScope",
        "deleteApplicationAuthenticationMethod",
        "deleteApplicationGrant",
        "getApplicationAccessScope",
        "getApplicationAuthenticationMethod",
        "getApplicationGrant",
        "listApplicationAccessScopes",
        "listApplicationAuthenticationMethods",
        "listApplicationGrants",
        "putApplicationAccessScope",
        "putApplicationAuthenticationMethod",
        "putApplicationGrant"
      ]
    },
    {
      "service": "sso-oidc",
      "className": "SSOOIDC",
      "operations": [
        "createToken",
        "createTokenWithIAM",
        "registerClient",
        "startDeviceAuthorization"
      ]
    },
    {
      "service": "storage-gateway",
      "className": "StorageGateway",
      "operations": [
        "activateGateway",
        "addCache",
        "addTagsToResource",
        "addUploadBuffer",
        "addWorkingStorage",
        "assignTapePool",
        "associateFileSystem",
        "attachVolume",
        "cancelArchival",
        "cancelCacheReport",
        "cancelRetrieval",
        "createCachediSCSIVolume",
        "createNFSFileShare",
        "createSMBFileShare",
        "createSnapshot",
        "createSnapshotFromVolumeRecoveryPoint",
        "createStorediSCSIVolume",
        "createTapePool",
        "createTapes",
        "createTapeWithBarcode",
        "deleteAutomaticTapeCreationPolicy",
        "deleteBandwidthRateLimit",
        "deleteCacheReport",
        "deleteChapCredentials",
        "deleteFileShare",
        "deleteGateway",
        "deleteSnapshotSchedule",
        "deleteTape",
        "deleteTapeArchive",
        "deleteTapePool",
        "deleteVolume",
        "describeAvailabilityMonitorTest",
        "describeBandwidthRateLimit",
        "describeBandwidthRateLimitSchedule",
        "describeCache",
        "describeCachediSCSIVolumes",
        "describeCacheReport",
        "describeChapCredentials",
        "describeFileSystemAssociations",
        "describeGatewayInformation",
        "describeMaintenanceStartTime",
        "describeNFSFileShares",
        "describeSMBFileShares",
        "describeSMBSettings",
        "describeSnapshotSchedule",
        "describeStorediSCSIVolumes",
        "describeTapeArchives",
        "describeTapeRecoveryPoints",
        "describeTapes",
        "describeUploadBuffer",
        "describeVTLDevices",
        "describeWorkingStorage",
        "detachVolume",
        "disableGateway",
        "disassociateFileSystem",
        "evictFilesFailingUpload",
        "joinDomain",
        "listAutomaticTapeCreationPolicies",
        "listCacheReports",
        "listFileShares",
        "listFileSystemAssociations",
        "listGateways",
        "listLocalDisks",
        "listTagsForResource",
        "listTapePools",
        "listTapes",
        "listVolumeInitiators",
        "listVolumeRecoveryPoints",
        "listVolumes",
        "notifyWhenUploaded",
        "refreshCache",
        "removeTagsFromResource",
        "resetCache",
        "retrieveTapeArchive",
        "retrieveTapeRecoveryPoint",
        "setLocalConsolePassword",
        "setSMBGuestPassword",
        "shutdownGateway",
        "startAvailabilityMonitorTest",
        "startCacheReport",
        "startGateway",
        "updateAutomaticTapeCreationPolicy",
        "updateBandwidthRateLimit",
        "updateBandwidthRateLimitSchedule",
        "updateChapCredentials",
        "updateFileSystemAssociation",
        "updateGatewayInformation",
        "updateGatewaySoftwareNow",
        "updateMaintenanceStartTime",
        "updateNFSFileShare",
        "updateSMBFileShare",
        "updateSMBFileShareVisibility",
        "updateSMBLocalGroups",
        "updateSMBSecurityStrategy",
        "updateSnapshotSchedule",
        "updateVTLDeviceType"
      ]
    },
    {
      "service": "sts",
      "className": "STS",
      "operations": [
        "assumeRole",
        "assumeRoleWithSAML",
        "assumeRoleWithWebIdentity",
        "assumeRoot",
        "decodeAuthorizationMessage",
        "getAccessKeyInfo",
        "getCallerIdentity",
        "getFederationToken",
        "getSessionToken"
      ]
    },
    {
      "service": "supplychain",
      "className": "SupplyChain",
      "operations": [
        "getDataIntegrationEvent",
        "getDataIntegrationFlowExecution",
        "listDataIntegrationEvents",
        "listDataIntegrationFlowExecutions",
        "listTagsForResource",
        "sendDataIntegrationEvent",
        "tagResource",
        "untagResource",
        "createBillOfMaterialsImportJob",
        "createDataIntegrationFlow",
        "createDataLakeDataset",
        "createDataLakeNamespace",
        "createInstance",
        "deleteDataIntegrationFlow",
        "deleteDataLakeDataset",
        "deleteDataLakeNamespace",
        "deleteInstance",
        "getBillOfMaterialsImportJob",
        "getDataIntegrationFlow",
        "getDataLakeDataset",
        "getDataLakeNamespace",
        "getInstance",
        "listDataIntegrationFlows",
        "listDataLakeDatasets",
        "listDataLakeNamespaces",
        "listInstances",
        "updateDataIntegrationFlow",
        "updateDataLakeDataset",
        "updateDataLakeNamespace",
        "updateInstance"
      ]
    },
    {
      "service": "support",
      "className": "Support",
      "operations": [
        "addAttachmentsToSet",
        "addCommunicationToCase",
        "createCase",
        "describeAttachment",
        "describeCases",
        "describeCommunications",
        "describeCreateCaseOptions",
        "describeServices",
        "describeSeverityLevels",
        "describeSupportedLanguages",
        "describeTrustedAdvisorCheckRefreshStatuses",
        "describeTrustedAdvisorCheckResult",
        "describeTrustedAdvisorChecks",
        "describeTrustedAdvisorCheckSummaries",
        "refreshTrustedAdvisorCheck",
        "resolveCase"
      ]
    },
    {
      "service": "support-app",
      "className": "SupportApp",
      "operations": [
        "createSlackChannelConfiguration",
        "deleteAccountAlias",
        "deleteSlackChannelConfiguration",
        "deleteSlackWorkspaceConfiguration",
        "getAccountAlias",
        "listSlackChannelConfigurations",
        "listSlackWorkspaceConfigurations",
        "putAccountAlias",
        "registerSlackWorkspaceForOrganization",
        "updateSlackChannelConfiguration"
      ]
    },
    {
      "service": "swf",
      "className": "SWF",
      "operations": [
        "countClosedWorkflowExecutions",
        "countOpenWorkflowExecutions",
        "countPendingActivityTasks",
        "countPendingDecisionTasks",
        "deleteActivityType",
        "deleteWorkflowType",
        "deprecateActivityType",
        "deprecateDomain",
        "deprecateWorkflowType",
        "describeActivityType",
        "describeDomain",
        "describeWorkflowExecution",
        "describeWorkflowType",
        "getWorkflowExecutionHistory",
        "listActivityTypes",
        "listClosedWorkflowExecutions",
        "listDomains",
        "listOpenWorkflowExecutions",
        "listTagsForResource",
        "listWorkflowTypes",
        "pollForActivityTask",
        "pollForDecisionTask",
        "recordActivityTaskHeartbeat",
        "registerActivityType",
        "registerDomain",
        "registerWorkflowType",
        "requestCancelWorkflowExecution",
        "respondActivityTaskCanceled",
        "respondActivityTaskCompleted",
        "respondActivityTaskFailed",
        "respondDecisionTaskCompleted",
        "signalWorkflowExecution",
        "startWorkflowExecution",
        "tagResource",
        "terminateWorkflowExecution",
        "undeprecateActivityType",
        "undeprecateDomain",
        "undeprecateWorkflowType",
        "untagResource"
      ]
    },
    {
      "service": "synthetics",
      "className": "synthetics",
      "operations": [
        "associateResource",
        "createCanary",
        "createGroup",
        "deleteCanary",
        "deleteGroup",
        "describeCanaries",
        "describeCanariesLastRun",
        "describeRuntimeVersions",
        "disassociateResource",
        "getCanary",
        "getCanaryRuns",
        "getGroup",
        "listAssociatedGroups",
        "listGroupResources",
        "listGroups",
        "listTagsForResource",
        "startCanary",
        "startCanaryDryRun",
        "stopCanary",
        "tagResource",
        "untagResource",
        "updateCanary"
      ]
    },
    {
      "service": "taxsettings",
      "className": "TaxSettings",
      "operations": [
        "batchDeleteTaxRegistration",
        "batchGetTaxExemptions",
        "batchPutTaxRegistration",
        "deleteSupplementalTaxRegistration",
        "deleteTaxRegistration",
        "getTaxExemptionTypes",
        "getTaxInheritance",
        "getTaxRegistration",
        "getTaxRegistrationDocument",
        "listSupplementalTaxRegistrations",
        "listTaxExemptions",
        "listTaxRegistrations",
        "putSupplementalTaxRegistration",
        "putTaxExemption",
        "putTaxInheritance",
        "putTaxRegistration"
      ]
    },
    {
      "service": "textract",
      "className": "Textract",
      "operations": [
        "analyzeDocument",
        "analyzeExpense",
        "analyzeID",
        "createAdapter",
        "createAdapterVersion",
        "deleteAdapter",
        "deleteAdapterVersion",
        "detectDocumentText",
        "getAdapter",
        "getAdapterVersion",
        "getDocumentAnalysis",
        "getDocumentTextDetection",
        "getExpenseAnalysis",
        "getLendingAnalysis",
        "getLendingAnalysisSummary",
        "listAdapters",
        "listAdapterVersions",
        "listTagsForResource",
        "startDocumentAnalysis",
        "startDocumentTextDetection",
        "startExpenseAnalysis",
        "startLendingAnalysis",
        "tagResource",
        "untagResource",
        "updateAdapter"
      ]
    },
    {
      "service": "timestream-influxdb",
      "className": "TimestreamInfluxDB",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "createDbCluster",
        "createDbInstance",
        "createDbParameterGroup",
        "deleteDbCluster",
        "deleteDbInstance",
        "getDbCluster",
        "getDbInstance",
        "getDbParameterGroup",
        "listDbClusters",
        "listDbInstances",
        "listDbInstancesForCluster",
        "listDbParameterGroups",
        "updateDbCluster",
        "updateDbInstance"
      ]
    },
    {
      "service": "timestream-query",
      "className": "TimestreamQuery",
      "operations": [
        "cancelQuery",
        "createScheduledQuery",
        "deleteScheduledQuery",
        "describeAccountSettings",
        "describeEndpoints",
        "describeScheduledQuery",
        "executeScheduledQuery",
        "listScheduledQueries",
        "listTagsForResource",
        "prepareQuery",
        "query",
        "tagResource",
        "untagResource",
        "updateAccountSettings",
        "updateScheduledQuery"
      ]
    },
    {
      "service": "timestream-write",
      "className": "TimestreamWrite",
      "operations": [
        "createBatchLoadTask",
        "createDatabase",
        "createTable",
        "deleteDatabase",
        "deleteTable",
        "describeBatchLoadTask",
        "describeDatabase",
        "describeEndpoints",
        "describeTable",
        "listBatchLoadTasks",
        "listDatabases",
        "listTables",
        "listTagsForResource",
        "resumeBatchLoadTask",
        "tagResource",
        "untagResource",
        "updateDatabase",
        "updateTable",
        "writeRecords"
      ]
    },
    {
      "service": "tnb",
      "className": "tnb",
      "operations": [
        "cancelSolNetworkOperation",
        "createSolFunctionPackage",
        "createSolNetworkInstance",
        "createSolNetworkPackage",
        "deleteSolFunctionPackage",
        "deleteSolNetworkInstance",
        "deleteSolNetworkPackage",
        "getSolFunctionInstance",
        "getSolFunctionPackage",
        "getSolFunctionPackageContent",
        "getSolFunctionPackageDescriptor",
        "getSolNetworkInstance",
        "getSolNetworkOperation",
        "getSolNetworkPackage",
        "getSolNetworkPackageContent",
        "getSolNetworkPackageDescriptor",
        "instantiateSolNetworkInstance",
        "listSolFunctionInstances",
        "listSolFunctionPackages",
        "listSolNetworkInstances",
        "listSolNetworkOperations",
        "listSolNetworkPackages",
        "listTagsForResource",
        "putSolFunctionPackageContent",
        "putSolNetworkPackageContent",
        "tagResource",
        "terminateSolNetworkInstance",
        "untagResource",
        "updateSolFunctionPackage",
        "updateSolNetworkInstance",
        "updateSolNetworkPackage",
        "validateSolFunctionPackageContent",
        "validateSolNetworkPackageContent"
      ]
    },
    {
      "service": "transcribe",
      "className": "Transcribe",
      "operations": [
        "createCallAnalyticsCategory",
        "createLanguageModel",
        "createMedicalVocabulary",
        "createVocabulary",
        "createVocabularyFilter",
        "deleteCallAnalyticsCategory",
        "deleteCallAnalyticsJob",
        "deleteLanguageModel",
        "deleteMedicalScribeJob",
        "deleteMedicalTranscriptionJob",
        "deleteMedicalVocabulary",
        "deleteTranscriptionJob",
        "deleteVocabulary",
        "deleteVocabularyFilter",
        "describeLanguageModel",
        "getCallAnalyticsCategory",
        "getCallAnalyticsJob",
        "getMedicalScribeJob",
        "getMedicalTranscriptionJob",
        "getMedicalVocabulary",
        "getTranscriptionJob",
        "getVocabulary",
        "getVocabularyFilter",
        "listCallAnalyticsCategories",
        "listCallAnalyticsJobs",
        "listLanguageModels",
        "listMedicalScribeJobs",
        "listMedicalTranscriptionJobs",
        "listMedicalVocabularies",
        "listTagsForResource",
        "listTranscriptionJobs",
        "listVocabularies",
        "listVocabularyFilters",
        "startCallAnalyticsJob",
        "startMedicalScribeJob",
        "startMedicalTranscriptionJob",
        "startTranscriptionJob",
        "tagResource",
        "untagResource",
        "updateCallAnalyticsCategory",
        "updateMedicalVocabulary",
        "updateVocabulary",
        "updateVocabularyFilter"
      ]
    },
    {
      "service": "transcribe-streaming",
      "className": "TranscribeStreaming",
      "operations": [
        "getMedicalScribeStream",
        "startCallAnalyticsStreamTranscription",
        "startMedicalScribeStream",
        "startMedicalStreamTranscription",
        "startStreamTranscription"
      ]
    },
    {
      "service": "transfer",
      "className": "Transfer",
      "operations": [
        "createAccess",
        "deleteAccess",
        "deleteHostKey",
        "deleteSshPublicKey",
        "describeAccess",
        "describeExecution",
        "describeHostKey",
        "describeSecurityPolicy",
        "importHostKey",
        "importSshPublicKey",
        "listAccesses",
        "listExecutions",
        "listFileTransferResults",
        "listHostKeys",
        "listSecurityPolicies",
        "listTagsForResource",
        "sendWorkflowStepState",
        "startDirectoryListing",
        "startFileTransfer",
        "startRemoteDelete",
        "startRemoteMove",
        "startServer",
        "stopServer",
        "tagResource",
        "testConnection",
        "testIdentityProvider",
        "untagResource",
        "updateAccess",
        "updateHostKey",
        "createAgreement",
        "createConnector",
        "createProfile",
        "createServer",
        "createUser",
        "createWebApp",
        "createWorkflow",
        "deleteAgreement",
        "deleteCertificate",
        "deleteConnector",
        "deleteProfile",
        "deleteServer",
        "deleteUser",
        "deleteWebApp",
        "deleteWebAppCustomization",
        "deleteWorkflow",
        "describeAgreement",
        "describeCertificate",
        "describeConnector",
        "describeProfile",
        "describeServer",
        "describeUser",
        "describeWebApp",
        "describeWebAppCustomization",
        "describeWorkflow",
        "importCertificate",
        "listAgreements",
        "listCertificates",
        "listConnectors",
        "listProfiles",
        "listServers",
        "listUsers",
        "listWebApps",
        "listWorkflows",
        "updateAgreement",
        "updateCertificate",
        "updateConnector",
        "updateProfile",
        "updateServer",
        "updateUser",
        "updateWebApp",
        "updateWebAppCustomization"
      ]
    },
    {
      "service": "translate",
      "className": "Translate",
      "operations": [
        "createParallelData",
        "deleteParallelData",
        "deleteTerminology",
        "describeTextTranslationJob",
        "getParallelData",
        "getTerminology",
        "importTerminology",
        "listLanguages",
        "listParallelData",
        "listTagsForResource",
        "listTerminologies",
        "listTextTranslationJobs",
        "startTextTranslationJob",
        "stopTextTranslationJob",
        "tagResource",
        "translateDocument",
        "translateText",
        "untagResource",
        "updateParallelData"
      ]
    },
    {
      "service": "trustedadvisor",
      "className": "TrustedAdvisor",
      "operations": [
        "batchUpdateRecommendationResourceExclusion",
        "getOrganizationRecommendation",
        "getRecommendation",
        "listChecks",
        "listOrganizationRecommendationAccounts",
        "listOrganizationRecommendationResources",
        "listOrganizationRecommendations",
        "listRecommendationResources",
        "listRecommendations",
        "updateOrganizationRecommendationLifecycle",
        "updateRecommendationLifecycle"
      ]
    },
    {
      "service": "verifiedpermissions",
      "className": "VerifiedPermissions",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "batchGetPolicy",
        "batchIsAuthorized",
        "batchIsAuthorizedWithToken",
        "createIdentitySource",
        "createPolicy",
        "createPolicyStore",
        "createPolicyTemplate",
        "deleteIdentitySource",
        "deletePolicy",
        "deletePolicyStore",
        "deletePolicyTemplate",
        "getIdentitySource",
        "getPolicy",
        "getPolicyStore",
        "getPolicyTemplate",
        "getSchema",
        "isAuthorized",
        "isAuthorizedWithToken",
        "listIdentitySources",
        "listPolicies",
        "listPolicyStores",
        "listPolicyTemplates",
        "putSchema",
        "updateIdentitySource",
        "updatePolicy",
        "updatePolicyStore",
        "updatePolicyTemplate"
      ]
    },
    {
      "service": "voice-id",
      "className": "VoiceID",
      "operations": [
        "associateFraudster",
        "createWatchlist",
        "deleteFraudster",
        "deleteSpeaker",
        "deleteWatchlist",
        "describeFraudster",
        "describeFraudsterRegistrationJob",
        "describeSpeaker",
        "describeSpeakerEnrollmentJob",
        "describeWatchlist",
        "disassociateFraudster",
        "evaluateSession",
        "listFraudsterRegistrationJobs",
        "listFraudsters",
        "listSpeakerEnrollmentJobs",
        "listSpeakers",
        "listTagsForResource",
        "listWatchlists",
        "optOutSpeaker",
        "startFraudsterRegistrationJob",
        "startSpeakerEnrollmentJob",
        "tagResource",
        "untagResource",
        "updateWatchlist",
        "createDomain",
        "deleteDomain",
        "describeDomain",
        "listDomains",
        "updateDomain"
      ]
    },
    {
      "service": "vpc-lattice",
      "className": "VPCLattice",
      "operations": [
        "batchUpdateRule",
        "deleteAuthPolicy",
        "deleteResourcePolicy",
        "getAuthPolicy",
        "getResourcePolicy",
        "listServiceNetworkVpcEndpointAssociations",
        "listTagsForResource",
        "putAuthPolicy",
        "putResourcePolicy",
        "tagResource",
        "untagResource",
        "createAccessLogSubscription",
        "createListener",
        "createResourceConfiguration",
        "createResourceGateway",
        "createRule",
        "createService",
        "createServiceNetwork",
        "createServiceNetworkResourceAssociation",
        "createServiceNetworkServiceAssociation",
        "createServiceNetworkVpcAssociation",
        "createTargetGroup",
        "deleteAccessLogSubscription",
        "deleteListener",
        "deleteResourceConfiguration",
        "deleteResourceEndpointAssociation",
        "deleteResourceGateway",
        "deleteRule",
        "deleteService",
        "deleteServiceNetwork",
        "deleteServiceNetworkResourceAssociation",
        "deleteServiceNetworkServiceAssociation",
        "deleteServiceNetworkVpcAssociation",
        "deleteTargetGroup",
        "deregisterTargets",
        "getAccessLogSubscription",
        "getListener",
        "getResourceConfiguration",
        "getResourceGateway",
        "getRule",
        "getService",
        "getServiceNetwork",
        "getServiceNetworkResourceAssociation",
        "getServiceNetworkServiceAssociation",
        "getServiceNetworkVpcAssociation",
        "getTargetGroup",
        "listAccessLogSubscriptions",
        "listListeners",
        "listResourceConfigurations",
        "listResourceEndpointAssociations",
        "listResourceGateways",
        "listRules",
        "listServiceNetworkResourceAssociations",
        "listServiceNetworkServiceAssociations",
        "listServiceNetworkVpcAssociations",
        "listServiceNetworks",
        "listServices",
        "listTargetGroups",
        "listTargets",
        "registerTargets",
        "updateAccessLogSubscription",
        "updateListener",
        "updateResourceConfiguration",
        "updateResourceGateway",
        "updateRule",
        "updateService",
        "updateServiceNetwork",
        "updateServiceNetworkVpcAssociation",
        "updateTargetGroup"
      ]
    },
    {
      "service": "waf",
      "className": "WAF",
      "operations": [
        "createByteMatchSet",
        "createGeoMatchSet",
        "createIPSet",
        "createRateBasedRule",
        "createRegexMatchSet",
        "createRegexPatternSet",
        "createRule",
        "createRuleGroup",
        "createSizeConstraintSet",
        "createSqlInjectionMatchSet",
        "createWebACL",
        "createWebACLMigrationStack",
        "createXssMatchSet",
        "deleteByteMatchSet",
        "deleteGeoMatchSet",
        "deleteIPSet",
        "deleteLoggingConfiguration",
        "deletePermissionPolicy",
        "deleteRateBasedRule",
        "deleteRegexMatchSet",
        "deleteRegexPatternSet",
        "deleteRule",
        "deleteRuleGroup",
        "deleteSizeConstraintSet",
        "deleteSqlInjectionMatchSet",
        "deleteWebACL",
        "deleteXssMatchSet",
        "getByteMatchSet",
        "getChangeToken",
        "getChangeTokenStatus",
        "getGeoMatchSet",
        "getIPSet",
        "getLoggingConfiguration",
        "getPermissionPolicy",
        "getRateBasedRule",
        "getRateBasedRuleManagedKeys",
        "getRegexMatchSet",
        "getRegexPatternSet",
        "getRule",
        "getRuleGroup",
        "getSampledRequests",
        "getSizeConstraintSet",
        "getSqlInjectionMatchSet",
        "getWebACL",
        "getXssMatchSet",
        "listActivatedRulesInRuleGroup",
        "listByteMatchSets",
        "listGeoMatchSets",
        "listIPSets",
        "listLoggingConfigurations",
        "listRateBasedRules",
        "listRegexMatchSets",
        "listRegexPatternSets",
        "listRuleGroups",
        "listRules",
        "listSizeConstraintSets",
        "listSqlInjectionMatchSets",
        "listSubscribedRuleGroups",
        "listTagsForResource",
        "listWebACLs",
        "listXssMatchSets",
        "putLoggingConfiguration",
        "putPermissionPolicy",
        "tagResource",
        "untagResource",
        "updateByteMatchSet",
        "updateGeoMatchSet",
        "updateIPSet",
        "updateRateBasedRule",
        "updateRegexMatchSet",
        "updateRegexPatternSet",
        "updateRule",
        "updateRuleGroup",
        "updateSizeConstraintSet",
        "updateSqlInjectionMatchSet",
        "updateWebACL",
        "updateXssMatchSet"
      ]
    },
    {
      "service": "waf-regional",
      "className": "WAFRegional",
      "operations": [
        "associateWebACL",
        "createByteMatchSet",
        "createGeoMatchSet",
        "createIPSet",
        "createRateBasedRule",
        "createRegexMatchSet",
        "createRegexPatternSet",
        "createRule",
        "createRuleGroup",
        "createSizeConstraintSet",
        "createSqlInjectionMatchSet",
        "createWebACL",
        "createWebACLMigrationStack",
        "createXssMatchSet",
        "deleteByteMatchSet",
        "deleteGeoMatchSet",
        "deleteIPSet",
        "deleteLoggingConfiguration",
        "deletePermissionPolicy",
        "deleteRateBasedRule",
        "deleteRegexMatchSet",
        "deleteRegexPatternSet",
        "deleteRule",
        "deleteRuleGroup",
        "deleteSizeConstraintSet",
        "deleteSqlInjectionMatchSet",
        "deleteWebACL",
        "deleteXssMatchSet",
        "disassociateWebACL",
        "getByteMatchSet",
        "getChangeToken",
        "getChangeTokenStatus",
        "getGeoMatchSet",
        "getIPSet",
        "getLoggingConfiguration",
        "getPermissionPolicy",
        "getRateBasedRule",
        "getRateBasedRuleManagedKeys",
        "getRegexMatchSet",
        "getRegexPatternSet",
        "getRule",
        "getRuleGroup",
        "getSampledRequests",
        "getSizeConstraintSet",
        "getSqlInjectionMatchSet",
        "getWebACL",
        "getWebACLForResource",
        "getXssMatchSet",
        "listActivatedRulesInRuleGroup",
        "listByteMatchSets",
        "listGeoMatchSets",
        "listIPSets",
        "listLoggingConfigurations",
        "listRateBasedRules",
        "listRegexMatchSets",
        "listRegexPatternSets",
        "listResourcesForWebACL",
        "listRuleGroups",
        "listRules",
        "listSizeConstraintSets",
        "listSqlInjectionMatchSets",
        "listSubscribedRuleGroups",
        "listTagsForResource",
        "listWebACLs",
        "listXssMatchSets",
        "putLoggingConfiguration",
        "putPermissionPolicy",
        "tagResource",
        "untagResource",
        "updateByteMatchSet",
        "updateGeoMatchSet",
        "updateIPSet",
        "updateRateBasedRule",
        "updateRegexMatchSet",
        "updateRegexPatternSet",
        "updateRule",
        "updateRuleGroup",
        "updateSizeConstraintSet",
        "updateSqlInjectionMatchSet",
        "updateWebACL",
        "updateXssMatchSet"
      ]
    },
    {
      "service": "wafv2",
      "className": "WAFV2",
      "operations": [
        "associateWebACL",
        "checkCapacity",
        "createAPIKey",
        "createIPSet",
        "createRegexPatternSet",
        "createRuleGroup",
        "createWebACL",
        "deleteAPIKey",
        "deleteFirewallManagerRuleGroups",
        "deleteIPSet",
        "deleteLoggingConfiguration",
        "deletePermissionPolicy",
        "deleteRegexPatternSet",
        "deleteRuleGroup",
        "deleteWebACL",
        "describeAllManagedProducts",
        "describeManagedProductsByVendor",
        "describeManagedRuleGroup",
        "disassociateWebACL",
        "generateMobileSdkReleaseUrl",
        "getDecryptedAPIKey",
        "getIPSet",
        "getLoggingConfiguration",
        "getManagedRuleSet",
        "getMobileSdkRelease",
        "getPermissionPolicy",
        "getRateBasedStatementManagedKeys",
        "getRegexPatternSet",
        "getRuleGroup",
        "getSampledRequests",
        "getWebACL",
        "getWebACLForResource",
        "listAPIKeys",
        "listAvailableManagedRuleGroups",
        "listAvailableManagedRuleGroupVersions",
        "listIPSets",
        "listLoggingConfigurations",
        "listManagedRuleSets",
        "listMobileSdkReleases",
        "listRegexPatternSets",
        "listResourcesForWebACL",
        "listRuleGroups",
        "listTagsForResource",
        "listWebACLs",
        "putLoggingConfiguration",
        "putManagedRuleSetVersions",
        "putPermissionPolicy",
        "tagResource",
        "untagResource",
        "updateIPSet",
        "updateManagedRuleSetVersionExpiryDate",
        "updateRegexPatternSet",
        "updateRuleGroup",
        "updateWebACL"
      ]
    },
    {
      "service": "wellarchitected",
      "className": "WellArchitected",
      "operations": [
        "associateLenses",
        "associateProfiles",
        "createLensShare",
        "createLensVersion",
        "createMilestone",
        "createProfile",
        "createProfileShare",
        "createReviewTemplate",
        "createTemplateShare",
        "createWorkload",
        "createWorkloadShare",
        "deleteLens",
        "deleteLensShare",
        "deleteProfile",
        "deleteProfileShare",
        "deleteReviewTemplate",
        "deleteTemplateShare",
        "deleteWorkload",
        "deleteWorkloadShare",
        "disassociateLenses",
        "disassociateProfiles",
        "exportLens",
        "getAnswer",
        "getConsolidatedReport",
        "getGlobalSettings",
        "getLens",
        "getLensReview",
        "getLensReviewReport",
        "getLensVersionDifference",
        "getMilestone",
        "getProfile",
        "getProfileTemplate",
        "getReviewTemplate",
        "getReviewTemplateAnswer",
        "getReviewTemplateLensReview",
        "getWorkload",
        "importLens",
        "listAnswers",
        "listCheckDetails",
        "listCheckSummaries",
        "listLenses",
        "listLensReviewImprovements",
        "listLensReviews",
        "listLensShares",
        "listMilestones",
        "listNotifications",
        "listProfileNotifications",
        "listProfiles",
        "listProfileShares",
        "listReviewTemplateAnswers",
        "listReviewTemplates",
        "listShareInvitations",
        "listTagsForResource",
        "listTemplateShares",
        "listWorkloads",
        "listWorkloadShares",
        "tagResource",
        "untagResource",
        "updateAnswer",
        "updateGlobalSettings",
        "updateIntegration",
        "updateLensReview",
        "updateProfile",
        "updateReviewTemplate",
        "updateReviewTemplateAnswer",
        "updateReviewTemplateLensReview",
        "updateShareInvitation",
        "updateWorkload",
        "updateWorkloadShare",
        "upgradeLensReview",
        "upgradeProfileVersion",
        "upgradeReviewTemplateLensReview"
      ]
    },
    {
      "service": "wisdom",
      "className": "Wisdom",
      "operations": [
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "createAssistant",
        "createAssistantAssociation",
        "createContent",
        "createKnowledgeBase",
        "createQuickResponse",
        "createSession",
        "deleteAssistant",
        "deleteAssistantAssociation",
        "deleteContent",
        "deleteImportJob",
        "deleteKnowledgeBase",
        "deleteQuickResponse",
        "getAssistant",
        "getAssistantAssociation",
        "getContent",
        "getContentSummary",
        "getImportJob",
        "getKnowledgeBase",
        "getQuickResponse",
        "getRecommendations",
        "getSession",
        "listAssistantAssociations",
        "listAssistants",
        "listContents",
        "listImportJobs",
        "listKnowledgeBases",
        "listQuickResponses",
        "notifyRecommendationsReceived",
        "queryAssistant",
        "removeKnowledgeBaseTemplateUri",
        "searchContent",
        "searchQuickResponses",
        "searchSessions",
        "startContentUpload",
        "startImportJob",
        "updateContent",
        "updateKnowledgeBaseTemplateUri",
        "updateQuickResponse"
      ]
    },
    {
      "service": "workdocs",
      "className": "WorkDocs",
      "operations": [
        "abortDocumentVersionUpload",
        "activateUser",
        "addResourcePermissions",
        "createComment",
        "createCustomMetadata",
        "createFolder",
        "createLabels",
        "createNotificationSubscription",
        "createUser",
        "deactivateUser",
        "deleteComment",
        "deleteCustomMetadata",
        "deleteDocument",
        "deleteDocumentVersion",
        "deleteFolder",
        "deleteFolderContents",
        "deleteLabels",
        "deleteNotificationSubscription",
        "deleteUser",
        "describeActivities",
        "describeComments",
        "describeDocumentVersions",
        "describeFolderContents",
        "describeGroups",
        "describeNotificationSubscriptions",
        "describeResourcePermissions",
        "describeRootFolders",
        "describeUsers",
        "getCurrentUser",
        "getDocument",
        "getDocumentPath",
        "getDocumentVersion",
        "getFolder",
        "getFolderPath",
        "getResources",
        "initiateDocumentVersionUpload",
        "removeAllResourcePermissions",
        "removeResourcePermission",
        "restoreDocumentVersions",
        "searchResources",
        "updateDocument",
        "updateDocumentVersion",
        "updateFolder",
        "updateUser"
      ]
    },
    {
      "service": "workmail",
      "className": "WorkMail",
      "operations": [
        "associateDelegateToResource",
        "associateMemberToGroup",
        "assumeImpersonationRole",
        "cancelMailboxExportJob",
        "createAlias",
        "createAvailabilityConfiguration",
        "createGroup",
        "createIdentityCenterApplication",
        "createImpersonationRole",
        "createMobileDeviceAccessRule",
        "createOrganization",
        "createResource",
        "createUser",
        "deleteAccessControlRule",
        "deleteAlias",
        "deleteAvailabilityConfiguration",
        "deleteEmailMonitoringConfiguration",
        "deleteGroup",
        "deleteIdentityCenterApplication",
        "deleteIdentityProviderConfiguration",
        "deleteImpersonationRole",
        "deleteMailboxPermissions",
        "deleteMobileDeviceAccessOverride",
        "deleteMobileDeviceAccessRule",
        "deleteOrganization",
        "deletePersonalAccessToken",
        "deleteResource",
        "deleteRetentionPolicy",
        "deleteUser",
        "deregisterFromWorkMail",
        "deregisterMailDomain",
        "describeEmailMonitoringConfiguration",
        "describeEntity",
        "describeGroup",
        "describeIdentityProviderConfiguration",
        "describeInboundDmarcSettings",
        "describeMailboxExportJob",
        "describeOrganization",
        "describeResource",
        "describeUser",
        "disassociateDelegateFromResource",
        "disassociateMemberFromGroup",
        "getAccessControlEffect",
        "getDefaultRetentionPolicy",
        "getImpersonationRole",
        "getImpersonationRoleEffect",
        "getMailboxDetails",
        "getMailDomain",
        "getMobileDeviceAccessEffect",
        "getMobileDeviceAccessOverride",
        "getPersonalAccessTokenMetadata",
        "listAccessControlRules",
        "listAliases",
        "listAvailabilityConfigurations",
        "listGroupMembers",
        "listGroups",
        "listGroupsForEntity",
        "listImpersonationRoles",
        "listMailboxExportJobs",
        "listMailboxPermissions",
        "listMailDomains",
        "listMobileDeviceAccessOverrides",
        "listMobileDeviceAccessRules",
        "listOrganizations",
        "listPersonalAccessTokens",
        "listResourceDelegates",
        "listResources",
        "listTagsForResource",
        "listUsers",
        "putAccessControlRule",
        "putEmailMonitoringConfiguration",
        "putIdentityProviderConfiguration",
        "putInboundDmarcSettings",
        "putMailboxPermissions",
        "putMobileDeviceAccessOverride",
        "putRetentionPolicy",
        "registerMailDomain",
        "registerToWorkMail",
        "resetPassword",
        "startMailboxExportJob",
        "tagResource",
        "testAvailabilityConfiguration",
        "untagResource",
        "updateAvailabilityConfiguration",
        "updateDefaultMailDomain",
        "updateGroup",
        "updateImpersonationRole",
        "updateMailboxQuota",
        "updateMobileDeviceAccessRule",
        "updatePrimaryEmailAddress",
        "updateResource",
        "updateUser"
      ]
    },
    {
      "service": "workmailmessageflow",
      "className": "WorkMailMessageFlow",
      "operations": [
        "getRawMessageContent",
        "putRawMessageContent"
      ]
    },
    {
      "service": "workspaces",
      "className": "WorkSpaces",
      "operations": [
        "acceptAccountLinkInvitation",
        "associateConnectionAlias",
        "associateIpGroups",
        "associateWorkspaceApplication",
        "authorizeIpRules",
        "copyWorkspaceImage",
        "createAccountLinkInvitation",
        "createConnectClientAddIn",
        "createConnectionAlias",
        "createIpGroup",
        "createStandbyWorkspaces",
        "createTags",
        "createUpdatedWorkspaceImage",
        "createWorkspaceBundle",
        "createWorkspaceImage",
        "createWorkspaces",
        "createWorkspacesPool",
        "deleteAccountLinkInvitation",
        "deleteClientBranding",
        "deleteConnectClientAddIn",
        "deleteConnectionAlias",
        "deleteIpGroup",
        "deleteTags",
        "deleteWorkspaceBundle",
        "deleteWorkspaceImage",
        "deployWorkspaceApplications",
        "deregisterWorkspaceDirectory",
        "describeAccount",
        "describeAccountModifications",
        "describeApplicationAssociations",
        "describeApplications",
        "describeBundleAssociations",
        "describeClientBranding",
        "describeClientProperties",
        "describeConnectClientAddIns",
        "describeConnectionAliases",
        "describeConnectionAliasPermissions",
        "describeImageAssociations",
        "describeIpGroups",
        "describeTags",
        "describeWorkspaceAssociations",
        "describeWorkspaceBundles",
        "describeWorkspaceDirectories",
        "describeWorkspaceImagePermissions",
        "describeWorkspaceImages",
        "describeWorkspaces",
        "describeWorkspacesConnectionStatus",
        "describeWorkspaceSnapshots",
        "describeWorkspacesPools",
        "describeWorkspacesPoolSessions",
        "disassociateConnectionAlias",
        "disassociateIpGroups",
        "disassociateWorkspaceApplication",
        "getAccountLink",
        "importClientBranding",
        "importWorkspaceImage",
        "listAccountLinks",
        "listAvailableManagementCidrRanges",
        "migrateWorkspace",
        "modifyAccount",
        "modifyCertificateBasedAuthProperties",
        "modifyClientProperties",
        "modifyEndpointEncryptionMode",
        "modifySamlProperties",
        "modifySelfservicePermissions",
        "modifyStreamingProperties",
        "modifyWorkspaceAccessProperties",
        "modifyWorkspaceCreationProperties",
        "modifyWorkspaceProperties",
        "modifyWorkspaceState",
        "rebootWorkspaces",
        "rebuildWorkspaces",
        "registerWorkspaceDirectory",
        "rejectAccountLinkInvitation",
        "restoreWorkspace",
        "revokeIpRules",
        "startWorkspaces",
        "startWorkspacesPool",
        "stopWorkspaces",
        "stopWorkspacesPool",
        "terminateWorkspaces",
        "terminateWorkspacesPool",
        "terminateWorkspacesPoolSession",
        "updateConnectClientAddIn",
        "updateConnectionAliasPermission",
        "updateRulesOfIpGroup",
        "updateWorkspaceBundle",
        "updateWorkspaceImagePermission",
        "updateWorkspacesPool"
      ]
    },
    {
      "service": "workspaces-instances",
      "className": "WorkspacesInstances",
      "operations": [
        "associateVolume",
        "createVolume",
        "createWorkspaceInstance",
        "deleteVolume",
        "deleteWorkspaceInstance",
        "disassociateVolume",
        "getWorkspaceInstance",
        "listInstanceTypes",
        "listRegions",
        "listTagsForResource",
        "listWorkspaceInstances",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "workspaces-thin-client",
      "className": "WorkSpacesThinClient",
      "operations": [
        "createEnvironment",
        "deleteDevice",
        "deleteEnvironment",
        "deregisterDevice",
        "getDevice",
        "getEnvironment",
        "getSoftwareSet",
        "listDevices",
        "listEnvironments",
        "listSoftwareSets",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "updateDevice",
        "updateEnvironment",
        "updateSoftwareSet"
      ]
    },
    {
      "service": "workspaces-web",
      "className": "WorkSpacesWeb",
      "operations": [
        "expireSession",
        "getSession",
        "listSessions",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "associateBrowserSettings",
        "associateDataProtectionSettings",
        "associateIpAccessSettings",
        "associateNetworkSettings",
        "associateSessionLogger",
        "associateTrustStore",
        "associateUserAccessLoggingSettings",
        "associateUserSettings",
        "createBrowserSettings",
        "createDataProtectionSettings",
        "createIdentityProvider",
        "createIpAccessSettings",
        "createNetworkSettings",
        "createPortal",
        "createSessionLogger",
        "createTrustStore",
        "createUserAccessLoggingSettings",
        "createUserSettings",
        "deleteBrowserSettings",
        "deleteDataProtectionSettings",
        "deleteIdentityProvider",
        "deleteIpAccessSettings",
        "deleteNetworkSettings",
        "deletePortal",
        "deleteSessionLogger",
        "deleteTrustStore",
        "deleteUserAccessLoggingSettings",
        "deleteUserSettings",
        "disassociateBrowserSettings",
        "disassociateDataProtectionSettings",
        "disassociateIpAccessSettings",
        "disassociateNetworkSettings",
        "disassociateSessionLogger",
        "disassociateTrustStore",
        "disassociateUserAccessLoggingSettings",
        "disassociateUserSettings",
        "getBrowserSettings",
        "getDataProtectionSettings",
        "getIdentityProvider",
        "getIpAccessSettings",
        "getNetworkSettings",
        "getPortal",
        "getPortalServiceProviderMetadata",
        "getSessionLogger",
        "getTrustStore",
        "getTrustStoreCertificate",
        "getUserAccessLoggingSettings",
        "getUserSettings",
        "listBrowserSettings",
        "listDataProtectionSettings",
        "listIdentityProviders",
        "listIpAccessSettings",
        "listNetworkSettings",
        "listPortals",
        "listSessionLoggers",
        "listTrustStoreCertificates",
        "listTrustStores",
        "listUserAccessLoggingSettings",
        "listUserSettings",
        "updateBrowserSettings",
        "updateDataProtectionSettings",
        "updateIdentityProvider",
        "updateIpAccessSettings",
        "updateNetworkSettings",
        "updatePortal",
        "updateSessionLogger",
        "updateTrustStore",
        "updateUserAccessLoggingSettings",
        "updateUserSettings"
      ]
    },
    {
      "service": "xray",
      "className": "XRay",
      "operations": [
        "batchGetTraces",
        "cancelTraceRetrieval",
        "createGroup",
        "createSamplingRule",
        "deleteGroup",
        "deleteResourcePolicy",
        "deleteSamplingRule",
        "getEncryptionConfig",
        "getGroup",
        "getGroups",
        "getIndexingRules",
        "getInsight",
        "getInsightEvents",
        "getInsightImpactGraph",
        "getInsightSummaries",
        "getRetrievedTracesGraph",
        "getSamplingRules",
        "getSamplingStatisticSummaries",
        "getSamplingTargets",
        "getServiceGraph",
        "getTimeSeriesServiceStatistics",
        "getTraceGraph",
        "getTraceSegmentDestination",
        "getTraceSummaries",
        "listResourcePolicies",
        "listRetrievedTraces",
        "listTagsForResource",
        "putEncryptionConfig",
        "putResourcePolicy",
        "putTelemetryRecords",
        "putTraceSegments",
        "startTraceRetrieval",
        "tagResource",
        "untagResource",
        "updateGroup",
        "updateIndexingRule",
        "updateSamplingRule",
        "updateTraceSegmentDestination"
      ]
    }
  ]
}