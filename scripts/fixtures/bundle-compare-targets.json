{
  "services": [
    {
      "service": "accessanalyzer",
      "className": "AccessAnalyzer",
      "commands": [
        "applyArchiveRule",
        "cancelPolicyGeneration",
        "checkAccessNotGranted"
      ]
    },
    {
      "service": "account",
      "className": "Account",
      "commands": [
        "acceptPrimaryEmailUpdate",
        "deleteAlternateContact",
        "disableRegion"
      ]
    },
    {
      "service": "acm",
      "className": "ACM",
      "commands": [
        "addTagsToCertificate",
        "deleteCertificate",
        "describeCertificate"
      ]
    },
    {
      "service": "acm-pca",
      "className": "ACMPCA",
      "commands": [
        "createCertificateAuthority",
        "createCertificateAuthorityAuditReport",
        "createPermission"
      ]
    },
    {
      "service": "aiops",
      "className": "AIOps",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "amp",
      "className": "amp",
      "commands": [
        "getDefaultScraperConfiguration",
        "listTagsForResource",
        "tagResource"
      ]
    },
    {
      "service": "amplify",
      "className": "Amplify",
      "commands": [
        "createApp",
        "createBackendEnvironment",
        "createBranch"
      ]
    },
    {
      "service": "amplifybackend",
      "className": "AmplifyBackend",
      "commands": [
        "cloneBackend",
        "createBackend",
        "createBackendAPI"
      ]
    },
    {
      "service": "amplifyuibuilder",
      "className": "AmplifyUIBuilder",
      "commands": [
        "exchangeCodeForToken",
        "getMetadata",
        "listTagsForResource"
      ]
    },
    {
      "service": "api-gateway",
      "className": "APIGateway",
      "commands": [
        "createApiKey",
        "createAuthorizer",
        "createBasePathMapping"
      ]
    },
    {
      "service": "apigatewaymanagementapi",
      "className": "ApiGatewayManagementApi",
      "commands": [
        "deleteConnection",
        "getConnection",
        "postToConnection"
      ]
    },
    {
      "service": "apigatewayv2",
      "className": "ApiGatewayV2",
      "commands": [
        "createApi",
        "createApiMapping",
        "createAuthorizer"
      ]
    },
    {
      "service": "app-mesh",
      "className": "AppMesh",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "appconfig",
      "className": "AppConfig",
      "commands": [
        "createApplication",
        "createConfigurationProfile",
        "createDeploymentStrategy"
      ]
    },
    {
      "service": "appconfigdata",
      "className": "AppConfigData",
      "commands": [
        "getLatestConfiguration",
        "startConfigurationSession"
      ]
    },
    {
      "service": "appfabric",
      "className": "AppFabric",
      "commands": [
        "batchGetUserAccessTasks",
        "connectAppAuthorization",
        "createAppAuthorization"
      ]
    },
    {
      "service": "appflow",
      "className": "Appflow",
      "commands": [
        "cancelFlowExecutions",
        "createConnectorProfile",
        "createFlow"
      ]
    },
    {
      "service": "appintegrations",
      "className": "AppIntegrations",
      "commands": [
        "createApplication",
        "createDataIntegration",
        "createDataIntegrationAssociation"
      ]
    },
    {
      "service": "application-auto-scaling",
      "className": "ApplicationAutoScaling",
      "commands": [
        "deleteScalingPolicy",
        "deleteScheduledAction",
        "deregisterScalableTarget"
      ]
    },
    {
      "service": "application-discovery-service",
      "className": "ApplicationDiscoveryService",
      "commands": [
        "associateConfigurationItemsToApplication",
        "batchDeleteAgents",
        "batchDeleteImportData"
      ]
    },
    {
      "service": "application-insights",
      "className": "ApplicationInsights",
      "commands": [
        "addWorkload",
        "createApplication",
        "createComponent"
      ]
    },
    {
      "service": "application-signals",
      "className": "ApplicationSignals",
      "commands": [
        "batchGetServiceLevelObjectiveBudgetReport",
        "batchUpdateExclusionWindows",
        "getService"
      ]
    },
    {
      "service": "applicationcostprofiler",
      "className": "ApplicationCostProfiler",
      "commands": [
        "deleteReportDefinition",
        "getReportDefinition",
        "importApplicationUsage"
      ]
    },
    {
      "service": "apprunner",
      "className": "AppRunner",
      "commands": [
        "associateCustomDomain",
        "createAutoScalingConfiguration",
        "createConnection"
      ]
    },
    {
      "service": "appstream",
      "className": "AppStream",
      "commands": [
        "associateAppBlockBuilderAppBlock",
        "associateApplicationFleet",
        "associateApplicationToEntitlement"
      ]
    },
    {
      "service": "appsync",
      "className": "AppSync",
      "commands": [
        "associateApi",
        "associateMergedGraphqlApi",
        "associateSourceGraphqlApi"
      ]
    },
    {
      "service": "apptest",
      "className": "AppTest",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "arc-region-switch",
      "className": "ARCRegionswitch",
      "commands": [
        "approvePlanExecutionStep",
        "cancelPlanExecution",
        "getPlanEvaluationStatus"
      ]
    },
    {
      "service": "arc-zonal-shift",
      "className": "ARCZonalShift",
      "commands": [
        "cancelPracticeRun",
        "cancelZonalShift",
        "createPracticeRunConfiguration"
      ]
    },
    {
      "service": "artifact",
      "className": "Artifact",
      "commands": [
        "getAccountSettings",
        "getReport",
        "getReportMetadata"
      ]
    },
    {
      "service": "athena",
      "className": "Athena",
      "commands": [
        "batchGetNamedQuery",
        "batchGetPreparedStatement",
        "batchGetQueryExecution"
      ]
    },
    {
      "service": "auditmanager",
      "className": "AuditManager",
      "commands": [
        "associateAssessmentReportEvidenceFolder",
        "batchAssociateAssessmentReportEvidence",
        "batchCreateDelegationByAssessment"
      ]
    },
    {
      "service": "auto-scaling",
      "className": "AutoScaling",
      "commands": [
        "attachInstances",
        "attachLoadBalancers",
        "attachLoadBalancerTargetGroups"
      ]
    },
    {
      "service": "auto-scaling-plans",
      "className": "AutoScalingPlans",
      "commands": [
        "createScalingPlan",
        "deleteScalingPlan",
        "describeScalingPlanResources"
      ]
    },
    {
      "service": "b2bi",
      "className": "b2bi",
      "commands": [
        "createStarterMappingTemplate",
        "generateMapping",
        "getTransformerJob"
      ]
    },
    {
      "service": "backup",
      "className": "Backup",
      "commands": [
        "associateBackupVaultMpaApprovalTeam",
        "cancelLegalHold",
        "createBackupPlan"
      ]
    },
    {
      "service": "backup-gateway",
      "className": "BackupGateway",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "backupsearch",
      "className": "BackupSearch",
      "commands": [
        "listSearchJobBackups",
        "listSearchJobResults",
        "listTagsForResource"
      ]
    },
    {
      "service": "batch",
      "className": "Batch",
      "commands": [
        "cancelJob",
        "createComputeEnvironment",
        "createConsumableResource"
      ]
    },
    {
      "service": "bcm-data-exports",
      "className": "BCMDataExports",
      "commands": [
        "createExport",
        "deleteExport",
        "getExecution"
      ]
    },
    {
      "service": "bcm-pricing-calculator",
      "className": "BCMPricingCalculator",
      "commands": [
        "getPreferences",
        "listTagsForResource",
        "tagResource"
      ]
    },
    {
      "service": "bedrock",
      "className": "Bedrock",
      "commands": [
        "batchDeleteEvaluationJob",
        "createCustomModel",
        "createCustomModelDeployment"
      ]
    },
    {
      "service": "bedrock-agent",
      "className": "BedrockAgent",
      "commands": [
        "validateFlowDefinition",
        "associateAgentCollaborator",
        "associateAgentKnowledgeBase"
      ]
    },
    {
      "service": "bedrock-agent-runtime",
      "className": "BedrockAgentRuntime",
      "commands": [
        "createInvocation",
        "createSession",
        "deleteAgentMemory"
      ]
    },
    {
      "service": "bedrock-agentcore",
      "className": "BedrockAgentCore",
      "commands": [
        "getResourceApiKey",
        "getResourceOauth2Token",
        "getWorkloadAccessToken"
      ]
    },
    {
      "service": "bedrock-agentcore-control",
      "className": "BedrockAgentCoreControl",
      "commands": [
        "getTokenVault",
        "setTokenVaultCMK",
        "createAgentRuntime"
      ]
    },
    {
      "service": "bedrock-data-automation",
      "className": "BedrockDataAutomation",
      "commands": [
        "createBlueprintVersion",
        "listTagsForResource",
        "tagResource"
      ]
    },
    {
      "service": "bedrock-data-automation-runtime",
      "className": "BedrockDataAutomationRuntime",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "bedrock-runtime",
      "className": "BedrockRuntime",
      "commands": [
        "applyGuardrail",
        "converse",
        "converseStream"
      ]
    },
    {
      "service": "billing",
      "className": "Billing",
      "commands": [
        "createBillingView",
        "deleteBillingView",
        "getBillingView"
      ]
    },
    {
      "service": "billingconductor",
      "className": "billingconductor",
      "commands": [
        "getBillingGroupCostReport",
        "listAccountAssociations",
        "listBillingGroupCostReports"
      ]
    },
    {
      "service": "braket",
      "className": "Braket",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "budgets",
      "className": "BudgetsClient",
      "commands": [
        "createBudget",
        "createBudgetAction",
        "createNotification"
      ]
    },
    {
      "service": "chatbot",
      "className": "chatbot",
      "commands": [
        "associateToConfiguration",
        "createChimeWebhookConfiguration",
        "createMicrosoftTeamsChannelConfiguration"
      ]
    },
    {
      "service": "chime",
      "className": "Chime",
      "commands": [
        "associatePhoneNumberWithUser",
        "associateSigninDelegateGroupsWithAccount",
        "batchCreateRoomMembership"
      ]
    },
    {
      "service": "chime-sdk-identity",
      "className": "ChimeSDKIdentity",
      "commands": [
        "createAppInstance",
        "createAppInstanceAdmin",
        "createAppInstanceBot"
      ]
    },
    {
      "service": "chime-sdk-media-pipelines",
      "className": "ChimeSDKMediaPipelines",
      "commands": [
        "createMediaCapturePipeline",
        "createMediaConcatenationPipeline",
        "createMediaInsightsPipeline"
      ]
    },
    {
      "service": "chime-sdk-meetings",
      "className": "ChimeSDKMeetings",
      "commands": [
        "batchCreateAttendee",
        "batchUpdateAttendeeCapabilitiesExcept",
        "createAttendee"
      ]
    },
    {
      "service": "chime-sdk-messaging",
      "className": "ChimeSDKMessaging",
      "commands": [
        "associateChannelFlow",
        "batchCreateChannelMembership",
        "channelFlowCallback"
      ]
    },
    {
      "service": "chime-sdk-voice",
      "className": "ChimeSDKVoice",
      "commands": [
        "associatePhoneNumbersWithVoiceConnector",
        "associatePhoneNumbersWithVoiceConnectorGroup",
        "batchDeletePhoneNumber"
      ]
    },
    {
      "service": "cleanrooms",
      "className": "CleanRooms",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "cleanroomsml",
      "className": "CleanRoomsML",
      "commands": [
        "listCollaborationConfiguredModelAlgorithmAssociations",
        "listCollaborationMLInputChannels",
        "listCollaborationTrainedModelExportJobs"
      ]
    },
    {
      "service": "cloud9",
      "className": "Cloud9",
      "commands": [
        "createEnvironmentEC2",
        "createEnvironmentMembership",
        "deleteEnvironment"
      ]
    },
    {
      "service": "cloudcontrol",
      "className": "CloudControl",
      "commands": [
        "cancelResourceRequest",
        "createResource",
        "deleteResource"
      ]
    },
    {
      "service": "clouddirectory",
      "className": "CloudDirectory",
      "commands": [
        "addFacetToObject",
        "applySchema",
        "attachObject"
      ]
    },
    {
      "service": "cloudformation",
      "className": "CloudFormation",
      "commands": [
        "activateOrganizationsAccess",
        "activateType",
        "batchDescribeTypeConfigurations"
      ]
    },
    {
      "service": "cloudfront",
      "className": "CloudFront",
      "commands": [
        "associateAlias",
        "associateDistributionTenantWebACL",
        "associateDistributionWebACL"
      ]
    },
    {
      "service": "cloudfront-keyvaluestore",
      "className": "CloudFrontKeyValueStore",
      "commands": [
        "deleteKey",
        "describeKeyValueStore",
        "getKey"
      ]
    },
    {
      "service": "cloudhsm",
      "className": "CloudHSM",
      "commands": [
        "addTagsToResource",
        "createHapg",
        "createHsm"
      ]
    },
    {
      "service": "cloudhsm-v2",
      "className": "CloudHSMV2",
      "commands": [
        "copyBackupToRegion",
        "createCluster",
        "createHsm"
      ]
    },
    {
      "service": "cloudsearch",
      "className": "CloudSearch",
      "commands": [
        "buildSuggesters",
        "createDomain",
        "defineAnalysisScheme"
      ]
    },
    {
      "service": "cloudsearch-domain",
      "className": "CloudSearchDomain",
      "commands": [
        "search",
        "suggest",
        "uploadDocuments"
      ]
    },
    {
      "service": "cloudtrail",
      "className": "CloudTrail",
      "commands": [
        "addTags",
        "cancelQuery",
        "createChannel"
      ]
    },
    {
      "service": "cloudtrail-data",
      "className": "CloudTrailData",
      "commands": [
        "putAuditEvents"
      ]
    },
    {
      "service": "cloudwatch",
      "className": "CloudWatch",
      "commands": [
        "deleteAlarms",
        "deleteAnomalyDetector",
        "deleteDashboards"
      ]
    },
    {
      "service": "cloudwatch-events",
      "className": "CloudWatchEvents",
      "commands": [
        "activateEventSource",
        "cancelReplay",
        "createApiDestination"
      ]
    },
    {
      "service": "cloudwatch-logs",
      "className": "CloudWatchLogs",
      "commands": [
        "associateKmsKey",
        "cancelExportTask",
        "createDelivery"
      ]
    },
    {
      "service": "codeartifact",
      "className": "codeartifact",
      "commands": [
        "associateExternalConnection",
        "copyPackageVersions",
        "createDomain"
      ]
    },
    {
      "service": "codebuild",
      "className": "CodeBuild",
      "commands": [
        "batchDeleteBuilds",
        "batchGetBuildBatches",
        "batchGetBuilds"
      ]
    },
    {
      "service": "codecatalyst",
      "className": "CodeCatalyst",
      "commands": [
        "getUserDetails",
        "verifySession",
        "createAccessToken"
      ]
    },
    {
      "service": "codecommit",
      "className": "CodeCommit",
      "commands": [
        "associateApprovalRuleTemplateWithRepository",
        "batchAssociateApprovalRuleTemplateWithRepositories",
        "batchDescribeMergeConflicts"
      ]
    },
    {
      "service": "codeconnections",
      "className": "CodeConnections",
      "commands": [
        "createConnection",
        "createHost",
        "createRepositoryLink"
      ]
    },
    {
      "service": "codedeploy",
      "className": "CodeDeploy",
      "commands": [
        "addTagsToOnPremisesInstances",
        "batchGetApplicationRevisions",
        "batchGetApplications"
      ]
    },
    {
      "service": "codeguru-reviewer",
      "className": "CodeGuruReviewer",
      "commands": [
        "associateRepository",
        "createCodeReview",
        "describeCodeReview"
      ]
    },
    {
      "service": "codeguru-security",
      "className": "CodeGuruSecurity",
      "commands": [
        "batchGetFindings",
        "createScan",
        "createUploadUrl"
      ]
    },
    {
      "service": "codeguruprofiler",
      "className": "CodeGuruProfiler",
      "commands": [
        "getFindingsReportAccountSummary",
        "listTagsForResource",
        "tagResource"
      ]
    },
    {
      "service": "codepipeline",
      "className": "CodePipeline",
      "commands": [
        "acknowledgeJob",
        "acknowledgeThirdPartyJob",
        "createCustomActionType"
      ]
    },
    {
      "service": "codestar-connections",
      "className": "CodeStarconnections",
      "commands": [
        "createConnection",
        "createHost",
        "createRepositoryLink"
      ]
    },
    {
      "service": "codestar-notifications",
      "className": "codestarnotifications",
      "commands": [
        "createNotificationRule",
        "deleteNotificationRule",
        "deleteTarget"
      ]
    },
    {
      "service": "cognito-identity",
      "className": "CognitoIdentity",
      "commands": [
        "createIdentityPool",
        "deleteIdentities",
        "deleteIdentityPool"
      ]
    },
    {
      "service": "cognito-identity-provider",
      "className": "CognitoIdentityProvider",
      "commands": [
        "addCustomAttributes",
        "adminAddUserToGroup",
        "adminConfirmSignUp"
      ]
    },
    {
      "service": "cognito-sync",
      "className": "CognitoSync",
      "commands": [
        "bulkPublish",
        "deleteDataset",
        "describeDataset"
      ]
    },
    {
      "service": "comprehend",
      "className": "Comprehend",
      "commands": [
        "batchDetectDominantLanguage",
        "batchDetectEntities",
        "batchDetectKeyPhrases"
      ]
    },
    {
      "service": "comprehendmedical",
      "className": "ComprehendMedical",
      "commands": [
        "describeEntitiesDetectionV2Job",
        "describeICD10CMInferenceJob",
        "describePHIDetectionJob"
      ]
    },
    {
      "service": "compute-optimizer",
      "className": "ComputeOptimizer",
      "commands": [
        "deleteRecommendationPreferences",
        "describeRecommendationExportJobs",
        "exportAutoScalingGroupRecommendations"
      ]
    },
    {
      "service": "config-service",
      "className": "ConfigService",
      "commands": [
        "associateResourceTypes",
        "batchGetAggregateResourceConfig",
        "batchGetResourceConfig"
      ]
    },
    {
      "service": "connect",
      "className": "Connect",
      "commands": [
        "activateEvaluationForm",
        "associateAnalyticsDataSet",
        "associateApprovedOrigin"
      ]
    },
    {
      "service": "connect-contact-lens",
      "className": "ConnectContactLens",
      "commands": [
        "listRealtimeContactAnalysisSegments"
      ]
    },
    {
      "service": "connectcampaigns",
      "className": "ConnectCampaigns",
      "commands": [
        "createCampaign",
        "deleteCampaign",
        "deleteConnectInstanceConfig"
      ]
    },
    {
      "service": "connectcampaignsv2",
      "className": "ConnectCampaignsV2",
      "commands": [
        "createCampaign",
        "deleteCampaign",
        "deleteCampaignChannelSubtypeConfig"
      ]
    },
    {
      "service": "connectcases",
      "className": "ConnectCases",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "connectparticipant",
      "className": "ConnectParticipant",
      "commands": [
        "cancelParticipantAuthentication",
        "completeAttachmentUpload",
        "createParticipantConnection"
      ]
    },
    {
      "service": "controlcatalog",
      "className": "ControlCatalog",
      "commands": [
        "listControlMappings",
        "getControl",
        "listCommonControls"
      ]
    },
    {
      "service": "controltower",
      "className": "ControlTower",
      "commands": [
        "disableControl",
        "createLandingZone",
        "deleteLandingZone"
      ]
    },
    {
      "service": "cost-and-usage-report-service",
      "className": "CostandUsageReportService",
      "commands": [
        "deleteReportDefinition",
        "describeReportDefinitions",
        "listTagsForResource"
      ]
    },
    {
      "service": "cost-explorer",
      "className": "CostExplorer",
      "commands": [
        "createAnomalyMonitor",
        "createAnomalySubscription",
        "createCostCategoryDefinition"
      ]
    },
    {
      "service": "cost-optimization-hub",
      "className": "CostOptimizationHub",
      "commands": [
        "getPreferences",
        "getRecommendation",
        "listEnrollmentStatuses"
      ]
    },
    {
      "service": "customer-profiles",
      "className": "CustomerProfiles",
      "commands": [
        "addProfileKey",
        "batchGetCalculatedAttributeForProfile",
        "batchGetProfile"
      ]
    },
    {
      "service": "data-pipeline",
      "className": "DataPipeline",
      "commands": [
        "activatePipeline",
        "addTags",
        "createPipeline"
      ]
    },
    {
      "service": "database-migration-service",
      "className": "DatabaseMigrationService",
      "commands": [
        "addTagsToResource",
        "applyPendingMaintenanceAction",
        "batchStartRecommendations"
      ]
    },
    {
      "service": "databrew",
      "className": "DataBrew",
      "commands": [
        "batchDeleteRecipeVersion",
        "createDataset",
        "createProfileJob"
      ]
    },
    {
      "service": "dataexchange",
      "className": "DataExchange",
      "commands": [
        "acceptDataGrant",
        "cancelJob",
        "createDataGrant"
      ]
    },
    {
      "service": "datasync",
      "className": "DataSync",
      "commands": [
        "cancelTaskExecution",
        "createAgent",
        "createLocationAzureBlob"
      ]
    },
    {
      "service": "datazone",
      "className": "DataZone",
      "commands": [
        "acceptPredictions",
        "acceptSubscriptionRequest",
        "addEntityOwner"
      ]
    },
    {
      "service": "dax",
      "className": "DAX",
      "commands": [
        "createCluster",
        "createParameterGroup",
        "createSubnetGroup"
      ]
    },
    {
      "service": "deadline",
      "className": "deadline",
      "commands": [
        "createQueueFleetAssociation",
        "createQueueLimitAssociation",
        "deleteQueueFleetAssociation"
      ]
    },
    {
      "service": "detective",
      "className": "Detective",
      "commands": [
        "acceptInvitation",
        "batchGetGraphMemberDatasources",
        "batchGetMembershipDatasources"
      ]
    },
    {
      "service": "device-farm",
      "className": "DeviceFarm",
      "commands": [
        "createDevicePool",
        "createInstanceProfile",
        "createNetworkProfile"
      ]
    },
    {
      "service": "devops-guru",
      "className": "DevOpsGuru",
      "commands": [
        "addNotificationChannel",
        "deleteInsight",
        "describeAccountHealth"
      ]
    },
    {
      "service": "direct-connect",
      "className": "DirectConnect",
      "commands": [
        "acceptDirectConnectGatewayAssociationProposal",
        "allocateConnectionOnInterconnect",
        "allocateHostedConnection"
      ]
    },
    {
      "service": "directory-service",
      "className": "DirectoryService",
      "commands": [
        "acceptSharedDirectory",
        "addIpRoutes",
        "addRegion"
      ]
    },
    {
      "service": "directory-service-data",
      "className": "DirectoryServiceData",
      "commands": [
        "addGroupMember",
        "createGroup",
        "createUser"
      ]
    },
    {
      "service": "dlm",
      "className": "DLM",
      "commands": [
        "createLifecyclePolicy",
        "deleteLifecyclePolicy",
        "getLifecyclePolicies"
      ]
    },
    {
      "service": "docdb",
      "className": "DocDB",
      "commands": [
        "addSourceIdentifierToSubscription",
        "addTagsToResource",
        "applyPendingMaintenanceAction"
      ]
    },
    {
      "service": "docdb-elastic",
      "className": "DocDBElastic",
      "commands": [
        "applyPendingMaintenanceAction",
        "copyClusterSnapshot",
        "createCluster"
      ]
    },
    {
      "service": "drs",
      "className": "drs",
      "commands": [
        "createExtendedSourceServer",
        "deleteLaunchAction",
        "initializeService"
      ]
    },
    {
      "service": "dsql",
      "className": "DSQL",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "dynamodb",
      "className": "DynamoDB",
      "commands": [
        "batchExecuteStatement",
        "batchGetItem",
        "batchWriteItem"
      ]
    },
    {
      "service": "dynamodb-streams",
      "className": "DynamoDBStreams",
      "commands": [
        "describeStream",
        "getRecords",
        "getShardIterator"
      ]
    },
    {
      "service": "ebs",
      "className": "EBS",
      "commands": [
        "completeSnapshot",
        "getSnapshotBlock",
        "listChangedBlocks"
      ]
    },
    {
      "service": "ec2",
      "className": "EC2",
      "commands": [
        "acceptAddressTransfer",
        "acceptCapacityReservationBillingOwnership",
        "acceptReservedInstancesExchangeQuote"
      ]
    },
    {
      "service": "ec2-instance-connect",
      "className": "EC2InstanceConnect",
      "commands": [
        "sendSerialConsoleSSHPublicKey",
        "sendSSHPublicKey"
      ]
    },
    {
      "service": "ecr",
      "className": "ECR",
      "commands": [
        "batchCheckLayerAvailability",
        "batchDeleteImage",
        "batchGetImage"
      ]
    },
    {
      "service": "ecr-public",
      "className": "ECRPUBLIC",
      "commands": [
        "batchCheckLayerAvailability",
        "batchDeleteImage",
        "completeLayerUpload"
      ]
    },
    {
      "service": "ecs",
      "className": "ECS",
      "commands": [
        "createCapacityProvider",
        "createCluster",
        "createService"
      ]
    },
    {
      "service": "efs",
      "className": "EFS",
      "commands": [
        "createAccessPoint",
        "createFileSystem",
        "createMountTarget"
      ]
    },
    {
      "service": "eks",
      "className": "EKS",
      "commands": [
        "associateAccessPolicy",
        "associateEncryptionConfig",
        "associateIdentityProviderConfig"
      ]
    },
    {
      "service": "eks-auth",
      "className": "EKSAuth",
      "commands": [
        "assumeRoleForPodIdentity"
      ]
    },
    {
      "service": "elastic-beanstalk",
      "className": "ElasticBeanstalk",
      "commands": [
        "abortEnvironmentUpdate",
        "applyEnvironmentManagedAction",
        "associateEnvironmentOperationsRole"
      ]
    },
    {
      "service": "elastic-load-balancing",
      "className": "ElasticLoadBalancing",
      "commands": [
        "addTags",
        "applySecurityGroupsToLoadBalancer",
        "attachLoadBalancerToSubnets"
      ]
    },
    {
      "service": "elastic-load-balancing-v2",
      "className": "ElasticLoadBalancingv2",
      "commands": [
        "addListenerCertificates",
        "addTags",
        "addTrustStoreRevocations"
      ]
    },
    {
      "service": "elastic-transcoder",
      "className": "ElasticTranscoder",
      "commands": [
        "cancelJob",
        "createJob",
        "createPipeline"
      ]
    },
    {
      "service": "elasticache",
      "className": "ElastiCache",
      "commands": [
        "addTagsToResource",
        "authorizeCacheSecurityGroupIngress",
        "batchApplyUpdateAction"
      ]
    },
    {
      "service": "elasticsearch-service",
      "className": "ElasticsearchService",
      "commands": [
        "acceptInboundCrossClusterSearchConnection",
        "addTags",
        "associatePackage"
      ]
    },
    {
      "service": "emr",
      "className": "EMR",
      "commands": [
        "addInstanceFleet",
        "addInstanceGroups",
        "addJobFlowSteps"
      ]
    },
    {
      "service": "emr-containers",
      "className": "EMRcontainers",
      "commands": [
        "cancelJobRun",
        "createJobTemplate",
        "createManagedEndpoint"
      ]
    },
    {
      "service": "emr-serverless",
      "className": "EMRServerless",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "entityresolution",
      "className": "EntityResolution",
      "commands": [
        "addPolicyStatement",
        "batchDeleteUniqueId",
        "createIdMappingWorkflow"
      ]
    },
    {
      "service": "eventbridge",
      "className": "EventBridge",
      "commands": [
        "activateEventSource",
        "cancelReplay",
        "createApiDestination"
      ]
    },
    {
      "service": "evidently",
      "className": "Evidently",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "testSegmentPattern"
      ]
    },
    {
      "service": "evs",
      "className": "evs",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "finspace",
      "className": "finspace",
      "commands": [
        "createEnvironment",
        "createKxChangeset",
        "createKxCluster"
      ]
    },
    {
      "service": "finspace-data",
      "className": "finspacedata",
      "commands": [
        "associateUserToPermissionGroup",
        "createChangeset",
        "createDataset"
      ]
    },
    {
      "service": "firehose",
      "className": "Firehose",
      "commands": [
        "createDeliveryStream",
        "deleteDeliveryStream",
        "describeDeliveryStream"
      ]
    },
    {
      "service": "fis",
      "className": "fis",
      "commands": [
        "createExperimentTemplate",
        "createTargetAccountConfiguration",
        "deleteExperimentTemplate"
      ]
    },
    {
      "service": "fms",
      "className": "FMS",
      "commands": [
        "associateAdminAccount",
        "associateThirdPartyFirewall",
        "batchAssociateResource"
      ]
    },
    {
      "service": "forecast",
      "className": "forecast",
      "commands": [
        "createAutoPredictor",
        "createDataset",
        "createDatasetGroup"
      ]
    },
    {
      "service": "forecastquery",
      "className": "forecastquery",
      "commands": [
        "queryForecast",
        "queryWhatIfForecast"
      ]
    },
    {
      "service": "frauddetector",
      "className": "FraudDetector",
      "commands": [
        "batchCreateVariable",
        "batchGetVariable",
        "cancelBatchImportJob"
      ]
    },
    {
      "service": "freetier",
      "className": "FreeTier",
      "commands": [
        "getAccountActivity",
        "getAccountPlanState",
        "getFreeTierUsage"
      ]
    },
    {
      "service": "fsx",
      "className": "FSx",
      "commands": [
        "associateFileSystemAliases",
        "cancelDataRepositoryTask",
        "copyBackup"
      ]
    },
    {
      "service": "gamelift",
      "className": "GameLift",
      "commands": [
        "acceptMatch",
        "claimGameServer",
        "createAlias"
      ]
    },
    {
      "service": "gameliftstreams",
      "className": "GameLiftStreams",
      "commands": [
        "addStreamGroupLocations",
        "associateApplications",
        "createStreamSessionConnection"
      ]
    },
    {
      "service": "geo-maps",
      "className": "GeoMaps",
      "commands": [
        "getGlyphs",
        "getSprites",
        "getStaticMap"
      ]
    },
    {
      "service": "geo-places",
      "className": "GeoPlaces",
      "commands": [
        "autocomplete",
        "geocode",
        "getPlace"
      ]
    },
    {
      "service": "geo-routes",
      "className": "GeoRoutes",
      "commands": [
        "calculateIsolines",
        "calculateRouteMatrix",
        "calculateRoutes"
      ]
    },
    {
      "service": "glacier",
      "className": "Glacier",
      "commands": [
        "abortMultipartUpload",
        "abortVaultLock",
        "addTagsToVault"
      ]
    },
    {
      "service": "global-accelerator",
      "className": "GlobalAccelerator",
      "commands": [
        "addCustomRoutingEndpoints",
        "addEndpoints",
        "advertiseByoipCidr"
      ]
    },
    {
      "service": "glue",
      "className": "Glue",
      "commands": [
        "batchCreatePartition",
        "batchDeleteConnection",
        "batchDeletePartition"
      ]
    },
    {
      "service": "grafana",
      "className": "grafana",
      "commands": [
        "listTagsForResource",
        "listVersions",
        "tagResource"
      ]
    },
    {
      "service": "greengrass",
      "className": "Greengrass",
      "commands": [
        "associateRoleToGroup",
        "associateServiceRoleToAccount",
        "createConnectorDefinition"
      ]
    },
    {
      "service": "greengrassv2",
      "className": "GreengrassV2",
      "commands": [
        "associateServiceRoleToAccount",
        "batchAssociateClientDeviceWithCoreDevice",
        "batchDisassociateClientDeviceFromCoreDevice"
      ]
    },
    {
      "service": "groundstation",
      "className": "GroundStation",
      "commands": [
        "getMinuteUsage",
        "listTagsForResource",
        "tagResource"
      ]
    },
    {
      "service": "guardduty",
      "className": "GuardDuty",
      "commands": [
        "acceptAdministratorInvitation",
        "acceptInvitation",
        "archiveFindings"
      ]
    },
    {
      "service": "health",
      "className": "Health",
      "commands": [
        "describeAffectedAccountsForOrganization",
        "describeAffectedEntities",
        "describeAffectedEntitiesForOrganization"
      ]
    },
    {
      "service": "healthlake",
      "className": "HealthLake",
      "commands": [
        "createFHIRDatastore",
        "deleteFHIRDatastore",
        "describeFHIRDatastore"
      ]
    },
    {
      "service": "iam",
      "className": "IAM",
      "commands": [
        "addClientIDToOpenIDConnectProvider",
        "addRoleToInstanceProfile",
        "addUserToGroup"
      ]
    },
    {
      "service": "identitystore",
      "className": "identitystore",
      "commands": [
        "getGroupId",
        "getGroupMembershipId",
        "getUserId"
      ]
    },
    {
      "service": "imagebuilder",
      "className": "imagebuilder",
      "commands": [
        "cancelImageCreation",
        "cancelLifecycleExecution",
        "createComponent"
      ]
    },
    {
      "service": "inspector",
      "className": "Inspector",
      "commands": [
        "addAttributesToFindings",
        "createAssessmentTarget",
        "createAssessmentTemplate"
      ]
    },
    {
      "service": "inspector-scan",
      "className": "InspectorScan",
      "commands": [
        "scanSbom"
      ]
    },
    {
      "service": "inspector2",
      "className": "Inspector2",
      "commands": [
        "associateMember",
        "batchAssociateCodeSecurityScanConfiguration",
        "batchDisassociateCodeSecurityScanConfiguration"
      ]
    },
    {
      "service": "internetmonitor",
      "className": "InternetMonitor",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "invoicing",
      "className": "Invoicing",
      "commands": [
        "batchGetInvoiceProfile",
        "createInvoiceUnit",
        "deleteInvoiceUnit"
      ]
    },
    {
      "service": "iot",
      "className": "IoT",
      "commands": [
        "acceptCertificateTransfer",
        "addThingToBillingGroup",
        "addThingToThingGroup"
      ]
    },
    {
      "service": "iot-data-plane",
      "className": "IoTDataPlane",
      "commands": [
        "deleteThingShadow",
        "getRetainedMessage",
        "getThingShadow"
      ]
    },
    {
      "service": "iot-events",
      "className": "IoTEvents",
      "commands": [
        "createAlarmModel",
        "createDetectorModel",
        "createInput"
      ]
    },
    {
      "service": "iot-events-data",
      "className": "IoTEventsData",
      "commands": [
        "batchAcknowledgeAlarm",
        "batchDeleteDetector",
        "batchDisableAlarm"
      ]
    },
    {
      "service": "iot-jobs-data-plane",
      "className": "IoTJobsDataPlane",
      "commands": [
        "describeJobExecution",
        "getPendingJobExecutions",
        "startCommandExecution"
      ]
    },
    {
      "service": "iot-managed-integrations",
      "className": "IoTManagedIntegrations",
      "commands": [
        "getCustomEndpoint",
        "listTagsForResource",
        "registerCustomEndpoint"
      ]
    },
    {
      "service": "iot-wireless",
      "className": "IoTWireless",
      "commands": [
        "associateAwsAccountWithPartnerAccount",
        "associateMulticastGroupWithFuotaTask",
        "associateWirelessDeviceWithFuotaTask"
      ]
    },
    {
      "service": "iotanalytics",
      "className": "IoTAnalytics",
      "commands": [
        "batchPutMessage",
        "cancelPipelineReprocessing",
        "createChannel"
      ]
    },
    {
      "service": "iotdeviceadvisor",
      "className": "IotDeviceAdvisor",
      "commands": [
        "createSuiteDefinition",
        "deleteSuiteDefinition",
        "getEndpoint"
      ]
    },
    {
      "service": "iotfleethub",
      "className": "IoTFleetHub",
      "commands": [
        "createApplication",
        "deleteApplication",
        "describeApplication"
      ]
    },
    {
      "service": "iotfleetwise",
      "className": "IoTFleetWise",
      "commands": [
        "batchCreateVehicle",
        "batchUpdateVehicle",
        "getEncryptionConfiguration"
      ]
    },
    {
      "service": "iotsecuretunneling",
      "className": "IoTSecureTunneling",
      "commands": [
        "closeTunnel",
        "describeTunnel",
        "listTagsForResource"
      ]
    },
    {
      "service": "iotsitewise",
      "className": "IoTSiteWise",
      "commands": [
        "associateAssets",
        "associateTimeSeriesToAssetProperty",
        "batchAssociateProjectAssets"
      ]
    },
    {
      "service": "iotthingsgraph",
      "className": "IoTThingsGraph",
      "commands": [
        "associateEntityToThing",
        "createFlowTemplate",
        "createSystemInstance"
      ]
    },
    {
      "service": "iottwinmaker",
      "className": "IoTTwinMaker",
      "commands": [
        "batchPutPropertyValues",
        "cancelMetadataTransferJob",
        "createComponentType"
      ]
    },
    {
      "service": "ivs",
      "className": "ivs",
      "commands": [
        "batchGetChannel",
        "batchGetStreamKey",
        "batchStartViewerSessionRevocation"
      ]
    },
    {
      "service": "ivs-realtime",
      "className": "IVSRealTime",
      "commands": [
        "createEncoderConfiguration",
        "createIngestConfiguration",
        "createParticipantToken"
      ]
    },
    {
      "service": "ivschat",
      "className": "ivschat",
      "commands": [
        "createChatToken",
        "createLoggingConfiguration",
        "createRoom"
      ]
    },
    {
      "service": "kafka",
      "className": "Kafka",
      "commands": [
        "batchAssociateScramSecret",
        "batchDisassociateScramSecret",
        "createCluster"
      ]
    },
    {
      "service": "kafkaconnect",
      "className": "KafkaConnect",
      "commands": [
        "createConnector",
        "createCustomPlugin",
        "createWorkerConfiguration"
      ]
    },
    {
      "service": "kendra",
      "className": "kendra",
      "commands": [
        "associateEntitiesToExperience",
        "associatePersonasToEntities",
        "batchDeleteDocument"
      ]
    },
    {
      "service": "kendra-ranking",
      "className": "KendraRanking",
      "commands": [
        "createRescoreExecutionPlan",
        "deleteRescoreExecutionPlan",
        "describeRescoreExecutionPlan"
      ]
    },
    {
      "service": "keyspaces",
      "className": "Keyspaces",
      "commands": [
        "createKeyspace",
        "createTable",
        "createType"
      ]
    },
    {
      "service": "keyspacesstreams",
      "className": "KeyspacesStreams",
      "commands": [
        "getRecords",
        "getShardIterator",
        "getStream"
      ]
    },
    {
      "service": "kinesis",
      "className": "Kinesis",
      "commands": [
        "addTagsToStream",
        "createStream",
        "decreaseStreamRetentionPeriod"
      ]
    },
    {
      "service": "kinesis-analytics",
      "className": "KinesisAnalytics",
      "commands": [
        "addApplicationCloudWatchLoggingOption",
        "addApplicationInput",
        "addApplicationInputProcessingConfiguration"
      ]
    },
    {
      "service": "kinesis-analytics-v2",
      "className": "KinesisAnalyticsV2",
      "commands": [
        "addApplicationCloudWatchLoggingOption",
        "addApplicationInput",
        "addApplicationInputProcessingConfiguration"
      ]
    },
    {
      "service": "kinesis-video",
      "className": "KinesisVideo",
      "commands": [
        "createSignalingChannel",
        "createStream",
        "deleteEdgeConfiguration"
      ]
    },
    {
      "service": "kinesis-video-archived-media",
      "className": "KinesisVideoArchivedMedia",
      "commands": [
        "getClip",
        "getDASHStreamingSessionURL",
        "getHLSStreamingSessionURL"
      ]
    },
    {
      "service": "kinesis-video-media",
      "className": "KinesisVideoMedia",
      "commands": [
        "getMedia"
      ]
    },
    {
      "service": "kinesis-video-signaling",
      "className": "KinesisVideoSignaling",
      "commands": [
        "getIceServerConfig",
        "sendAlexaOfferToMaster"
      ]
    },
    {
      "service": "kinesis-video-webrtc-storage",
      "className": "KinesisVideoWebRTCStorage",
      "commands": [
        "joinStorageSession",
        "joinStorageSessionAsViewer"
      ]
    },
    {
      "service": "kms",
      "className": "KMS",
      "commands": [
        "cancelKeyDeletion",
        "connectCustomKeyStore",
        "createAlias"
      ]
    },
    {
      "service": "lakeformation",
      "className": "LakeFormation",
      "commands": [
        "addLFTagsToResource",
        "assumeDecoratedRoleWithSAML",
        "batchGrantPermissions"
      ]
    },
    {
      "service": "lambda",
      "className": "Lambda",
      "commands": [
        "getAccountSettings",
        "listTags",
        "tagResource"
      ]
    },
    {
      "service": "launch-wizard",
      "className": "LaunchWizard",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "lex-model-building-service",
      "className": "LexModelBuildingService",
      "commands": [
        "createBotVersion",
        "createIntentVersion",
        "createSlotTypeVersion"
      ]
    },
    {
      "service": "lex-models-v2",
      "className": "LexModelsV2",
      "commands": [
        "batchCreateCustomVocabularyItem",
        "batchDeleteCustomVocabularyItem",
        "batchUpdateCustomVocabularyItem"
      ]
    },
    {
      "service": "lex-runtime-service",
      "className": "LexRuntimeService",
      "commands": [
        "deleteSession",
        "getSession",
        "postContent"
      ]
    },
    {
      "service": "lex-runtime-v2",
      "className": "LexRuntimeV2",
      "commands": [
        "deleteSession",
        "getSession",
        "putSession"
      ]
    },
    {
      "service": "license-manager",
      "className": "LicenseManager",
      "commands": [
        "acceptGrant",
        "checkInLicense",
        "checkoutBorrowLicense"
      ]
    },
    {
      "service": "license-manager-linux-subscriptions",
      "className": "LicenseManagerLinuxSubscriptions",
      "commands": [
        "deregisterSubscriptionProvider",
        "getRegisteredSubscriptionProvider",
        "getServiceSettings"
      ]
    },
    {
      "service": "license-manager-user-subscriptions",
      "className": "LicenseManagerUserSubscriptions",
      "commands": [
        "associateUser",
        "createLicenseServerEndpoint",
        "deleteLicenseServerEndpoint"
      ]
    },
    {
      "service": "lightsail",
      "className": "Lightsail",
      "commands": [
        "allocateStaticIp",
        "attachCertificateToDistribution",
        "attachDisk"
      ]
    },
    {
      "service": "location",
      "className": "Location",
      "commands": [
        "associateTrackerConsumer",
        "batchDeleteDevicePositionHistory",
        "batchDeleteGeofence"
      ]
    },
    {
      "service": "lookoutequipment",
      "className": "LookoutEquipment",
      "commands": [
        "createDataset",
        "createInferenceScheduler",
        "createLabel"
      ]
    },
    {
      "service": "lookoutmetrics",
      "className": "LookoutMetrics",
      "commands": [
        "activateAnomalyDetector",
        "backTestAnomalyDetector",
        "createAlert"
      ]
    },
    {
      "service": "lookoutvision",
      "className": "LookoutVision",
      "commands": [
        "createDataset",
        "createModel",
        "createProject"
      ]
    },
    {
      "service": "m2",
      "className": "m2",
      "commands": [
        "getSignedBluinsightsUrl",
        "listEngineVersions",
        "listTagsForResource"
      ]
    },
    {
      "service": "machine-learning",
      "className": "MachineLearning",
      "commands": [
        "addTags",
        "createBatchPrediction",
        "createDataSourceFromRDS"
      ]
    },
    {
      "service": "macie2",
      "className": "Macie2",
      "commands": [
        "acceptInvitation",
        "batchGetCustomDataIdentifiers",
        "batchUpdateAutomatedDiscoveryAccounts"
      ]
    },
    {
      "service": "mailmanager",
      "className": "MailManager",
      "commands": [
        "createAddressListImportJob",
        "deregisterMemberFromAddressList",
        "getAddressListImportJob"
      ]
    },
    {
      "service": "managedblockchain",
      "className": "ManagedBlockchain",
      "commands": [
        "createAccessor",
        "createMember",
        "createNetwork"
      ]
    },
    {
      "service": "managedblockchain-query",
      "className": "ManagedBlockchainQuery",
      "commands": [
        "batchGetTokenBalance",
        "getAssetContract",
        "getTokenBalance"
      ]
    },
    {
      "service": "marketplace-agreement",
      "className": "MarketplaceAgreement",
      "commands": [
        "describeAgreement",
        "getAgreementTerms",
        "searchAgreements"
      ]
    },
    {
      "service": "marketplace-catalog",
      "className": "MarketplaceCatalog",
      "commands": [
        "batchDescribeEntities",
        "cancelChangeSet",
        "deleteResourcePolicy"
      ]
    },
    {
      "service": "marketplace-commerce-analytics",
      "className": "MarketplaceCommerceAnalytics",
      "commands": [
        "generateDataSet",
        "startSupportDataExport"
      ]
    },
    {
      "service": "marketplace-deployment",
      "className": "MarketplaceDeployment",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "marketplace-entitlement-service",
      "className": "MarketplaceEntitlementService",
      "commands": [
        "getEntitlements"
      ]
    },
    {
      "service": "marketplace-metering",
      "className": "MarketplaceMetering",
      "commands": [
        "batchMeterUsage",
        "meterUsage",
        "registerUsage"
      ]
    },
    {
      "service": "marketplace-reporting",
      "className": "MarketplaceReporting",
      "commands": [
        "getBuyerDashboard"
      ]
    },
    {
      "service": "mediaconnect",
      "className": "MediaConnect",
      "commands": [
        "listEntitlements",
        "listTagsForResource",
        "tagResource"
      ]
    },
    {
      "service": "mediaconvert",
      "className": "MediaConvert",
      "commands": [
        "associateCertificate",
        "cancelJob",
        "createJob"
      ]
    },
    {
      "service": "medialive",
      "className": "MediaLive",
      "commands": [
        "acceptInputDeviceTransfer",
        "batchDelete",
        "batchStart"
      ]
    },
    {
      "service": "mediapackage",
      "className": "MediaPackage",
      "commands": [
        "configureLogs",
        "createChannel",
        "createHarvestJob"
      ]
    },
    {
      "service": "mediapackage-vod",
      "className": "MediaPackageVod",
      "commands": [
        "configureLogs",
        "createAsset",
        "createPackagingConfiguration"
      ]
    },
    {
      "service": "mediapackagev2",
      "className": "MediaPackageV2",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "mediastore",
      "className": "MediaStore",
      "commands": [
        "createContainer",
        "deleteContainer",
        "deleteContainerPolicy"
      ]
    },
    {
      "service": "mediastore-data",
      "className": "MediaStoreData",
      "commands": [
        "deleteObject",
        "describeObject",
        "getObject"
      ]
    },
    {
      "service": "mediatailor",
      "className": "MediaTailor",
      "commands": [
        "configureLogsForPlaybackConfiguration",
        "listAlerts",
        "listTagsForResource"
      ]
    },
    {
      "service": "medical-imaging",
      "className": "MedicalImaging",
      "commands": [
        "copyImageSet",
        "deleteImageSet",
        "getDICOMImportJob"
      ]
    },
    {
      "service": "memorydb",
      "className": "MemoryDB",
      "commands": [
        "batchUpdateCluster",
        "copySnapshot",
        "createACL"
      ]
    },
    {
      "service": "mgn",
      "className": "mgn",
      "commands": [
        "initializeService",
        "listManagedAccounts",
        "listTagsForResource"
      ]
    },
    {
      "service": "migration-hub",
      "className": "MigrationHub",
      "commands": [
        "associateCreatedArtifact",
        "associateDiscoveredResource",
        "associateSourceResource"
      ]
    },
    {
      "service": "migration-hub-refactor-spaces",
      "className": "MigrationHubRefactorSpaces",
      "commands": [
        "createApplication",
        "createEnvironment",
        "createRoute"
      ]
    },
    {
      "service": "migrationhub-config",
      "className": "MigrationHubConfig",
      "commands": [
        "createHomeRegionControl",
        "deleteHomeRegionControl",
        "describeHomeRegionControls"
      ]
    },
    {
      "service": "migrationhuborchestrator",
      "className": "MigrationHubOrchestrator",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "migrationhubstrategy",
      "className": "MigrationHubStrategy",
      "commands": [
        "getApplicationComponentDetails",
        "getApplicationComponentStrategies",
        "getAssessment"
      ]
    },
    {
      "service": "mpa",
      "className": "MPA",
      "commands": [
        "getPolicyVersion",
        "getResourcePolicy",
        "listPolicies"
      ]
    },
    {
      "service": "mq",
      "className": "mq",
      "commands": [
        "createBroker",
        "createConfiguration",
        "createTags"
      ]
    },
    {
      "service": "mturk",
      "className": "MTurk",
      "commands": [
        "acceptQualificationRequest",
        "approveAssignment",
        "associateQualificationWithWorker"
      ]
    },
    {
      "service": "mwaa",
      "className": "MWAA",
      "commands": [
        "createCliToken",
        "createEnvironment",
        "createWebLoginToken"
      ]
    },
    {
      "service": "neptune",
      "className": "Neptune",
      "commands": [
        "addRoleToDBCluster",
        "addSourceIdentifierToSubscription",
        "addTagsToResource"
      ]
    },
    {
      "service": "neptune-graph",
      "className": "NeptuneGraph",
      "commands": [
        "cancelQuery",
        "executeQuery",
        "getGraphSummary"
      ]
    },
    {
      "service": "neptunedata",
      "className": "neptunedata",
      "commands": [
        "cancelGremlinQuery",
        "cancelLoaderJob",
        "cancelMLDataProcessingJob"
      ]
    },
    {
      "service": "network-firewall",
      "className": "NetworkFirewall",
      "commands": [
        "acceptNetworkFirewallTransitGatewayAttachment",
        "associateAvailabilityZones",
        "associateFirewallPolicy"
      ]
    },
    {
      "service": "networkflowmonitor",
      "className": "NetworkFlowMonitor",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "networkmanager",
      "className": "NetworkManager",
      "commands": [
        "acceptAttachment",
        "associateConnectPeer",
        "associateCustomerGateway"
      ]
    },
    {
      "service": "networkmonitor",
      "className": "NetworkMonitor",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "notifications",
      "className": "Notifications",
      "commands": [
        "listManagedNotificationChannelAssociations",
        "listTagsForResource",
        "tagResource"
      ]
    },
    {
      "service": "notificationscontacts",
      "className": "NotificationsContacts",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "oam",
      "className": "OAM",
      "commands": [
        "createLink",
        "createSink",
        "deleteLink"
      ]
    },
    {
      "service": "observabilityadmin",
      "className": "ObservabilityAdmin",
      "commands": [
        "createTelemetryRule",
        "createTelemetryRuleForOrganization",
        "deleteTelemetryRule"
      ]
    },
    {
      "service": "odb",
      "className": "odb",
      "commands": [
        "acceptMarketplaceRegistration",
        "getOciOnboardingStatus",
        "initializeService"
      ]
    },
    {
      "service": "omics",
      "className": "Omics",
      "commands": [
        "deleteS3AccessPolicy",
        "getS3AccessPolicy",
        "putS3AccessPolicy"
      ]
    },
    {
      "service": "opensearch",
      "className": "OpenSearch",
      "commands": [
        "acceptInboundConnection",
        "addDataSource",
        "addDirectQueryDataSource"
      ]
    },
    {
      "service": "opensearchserverless",
      "className": "OpenSearchServerless",
      "commands": [
        "batchGetCollection",
        "batchGetEffectiveLifecyclePolicy",
        "batchGetLifecyclePolicy"
      ]
    },
    {
      "service": "opsworks",
      "className": "OpsWorks",
      "commands": [
        "assignInstance",
        "assignVolume",
        "associateElasticIp"
      ]
    },
    {
      "service": "opsworkscm",
      "className": "OpsWorksCM",
      "commands": [
        "associateNode",
        "createBackup",
        "createServer"
      ]
    },
    {
      "service": "organizations",
      "className": "Organizations",
      "commands": [
        "acceptHandshake",
        "attachPolicy",
        "cancelHandshake"
      ]
    },
    {
      "service": "osis",
      "className": "OSIS",
      "commands": [
        "createPipeline",
        "deletePipeline",
        "getPipeline"
      ]
    },
    {
      "service": "outposts",
      "className": "Outposts",
      "commands": [
        "cancelCapacityTask",
        "cancelOrder",
        "createOrder"
      ]
    },
    {
      "service": "panorama",
      "className": "Panorama",
      "commands": [
        "createApplicationInstance",
        "createJobForDevices",
        "createNodeFromTemplateJob"
      ]
    },
    {
      "service": "partnercentral-selling",
      "className": "PartnerCentralSelling",
      "commands": [
        "getSellingSystemSettings",
        "listTagsForResource",
        "putSellingSystemSettings"
      ]
    },
    {
      "service": "payment-cryptography",
      "className": "PaymentCryptography",
      "commands": [
        "exportKey",
        "getParametersForExport",
        "getParametersForImport"
      ]
    },
    {
      "service": "payment-cryptography-data",
      "className": "PaymentCryptographyData",
      "commands": [
        "decryptData",
        "encryptData",
        "generateCardValidationData"
      ]
    },
    {
      "service": "pca-connector-ad",
      "className": "PcaConnectorAd",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "pca-connector-scep",
      "className": "PcaConnectorScep",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "pcs",
      "className": "PCS",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "personalize",
      "className": "Personalize",
      "commands": [
        "createBatchInferenceJob",
        "createBatchSegmentJob",
        "createCampaign"
      ]
    },
    {
      "service": "personalize-events",
      "className": "PersonalizeEvents",
      "commands": [
        "putActionInteractions",
        "putActions",
        "putEvents"
      ]
    },
    {
      "service": "personalize-runtime",
      "className": "PersonalizeRuntime",
      "commands": [
        "getActionRecommendations",
        "getPersonalizedRanking",
        "getRecommendations"
      ]
    },
    {
      "service": "pi",
      "className": "PI",
      "commands": [
        "createPerformanceAnalysisReport",
        "deletePerformanceAnalysisReport",
        "describeDimensionKeys"
      ]
    },
    {
      "service": "pinpoint",
      "className": "Pinpoint",
      "commands": [
        "createApp",
        "createCampaign",
        "createEmailTemplate"
      ]
    },
    {
      "service": "pinpoint-email",
      "className": "PinpointEmail",
      "commands": [
        "createConfigurationSet",
        "createConfigurationSetEventDestination",
        "createDedicatedIpPool"
      ]
    },
    {
      "service": "pinpoint-sms-voice",
      "className": "PinpointSMSVoice",
      "commands": [
        "createConfigurationSet",
        "createConfigurationSetEventDestination",
        "deleteConfigurationSet"
      ]
    },
    {
      "service": "pinpoint-sms-voice-v2",
      "className": "PinpointSMSVoiceV2",
      "commands": [
        "associateOriginationIdentity",
        "associateProtectConfiguration",
        "createConfigurationSet"
      ]
    },
    {
      "service": "pipes",
      "className": "Pipes",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "polly",
      "className": "Polly",
      "commands": [
        "deleteLexicon",
        "describeVoices",
        "getLexicon"
      ]
    },
    {
      "service": "pricing",
      "className": "Pricing",
      "commands": [
        "describeServices",
        "getAttributeValues",
        "getPriceListFileUrl"
      ]
    },
    {
      "service": "privatenetworks",
      "className": "PrivateNetworks",
      "commands": [
        "acknowledgeOrderReceipt",
        "activateDeviceIdentifier",
        "activateNetworkSite"
      ]
    },
    {
      "service": "proton",
      "className": "Proton",
      "commands": [
        "cancelComponentDeployment",
        "cancelEnvironmentDeployment",
        "cancelServiceInstanceDeployment"
      ]
    },
    {
      "service": "qapps",
      "className": "QApps",
      "commands": [
        "associateLibraryItemReview",
        "associateQAppWithUser",
        "batchCreateCategory"
      ]
    },
    {
      "service": "qbusiness",
      "className": "QBusiness",
      "commands": [
        "associatePermission",
        "batchDeleteDocument",
        "batchPutDocument"
      ]
    },
    {
      "service": "qconnect",
      "className": "QConnect",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "qldb",
      "className": "QLDB",
      "commands": [
        "cancelJournalKinesisStream",
        "createLedger",
        "deleteLedger"
      ]
    },
    {
      "service": "qldb-session",
      "className": "QLDBSession",
      "commands": [
        "sendCommand"
      ]
    },
    {
      "service": "quicksight",
      "className": "QuickSight",
      "commands": [
        "batchCreateTopicReviewedAnswer",
        "batchDeleteTopicReviewedAnswer",
        "cancelIngestion"
      ]
    },
    {
      "service": "ram",
      "className": "RAM",
      "commands": [
        "acceptResourceShareInvitation",
        "associateResourceShare",
        "associateResourceSharePermission"
      ]
    },
    {
      "service": "rbin",
      "className": "rbin",
      "commands": [
        "createRule",
        "deleteRule",
        "getRule"
      ]
    },
    {
      "service": "rds",
      "className": "RDS",
      "commands": [
        "addRoleToDBCluster",
        "addRoleToDBInstance",
        "addSourceIdentifierToSubscription"
      ]
    },
    {
      "service": "rds-data",
      "className": "RDSData",
      "commands": [
        "batchExecuteStatement",
        "beginTransaction",
        "commitTransaction"
      ]
    },
    {
      "service": "redshift",
      "className": "Redshift",
      "commands": [
        "acceptReservedNodeExchange",
        "addPartner",
        "associateDataShareConsumer"
      ]
    },
    {
      "service": "redshift-data",
      "className": "RedshiftData",
      "commands": [
        "batchExecuteStatement",
        "cancelStatement",
        "describeStatement"
      ]
    },
    {
      "service": "redshift-serverless",
      "className": "RedshiftServerless",
      "commands": [
        "createCustomDomainAssociation",
        "deleteCustomDomainAssociation",
        "deleteResourcePolicy"
      ]
    },
    {
      "service": "rekognition",
      "className": "Rekognition",
      "commands": [
        "associateFaces",
        "compareFaces",
        "copyProjectVersion"
      ]
    },
    {
      "service": "repostspace",
      "className": "repostspace",
      "commands": [
        "batchAddChannelRoleToAccessors",
        "batchAddRole",
        "batchRemoveChannelRoleFromAccessors"
      ]
    },
    {
      "service": "resiliencehub",
      "className": "resiliencehub",
      "commands": [
        "acceptResourceGroupingRecommendations",
        "addDraftAppVersionResourceMappings",
        "batchUpdateRecommendationStatus"
      ]
    },
    {
      "service": "resource-explorer-2",
      "className": "ResourceExplorer2",
      "commands": [
        "batchGetView",
        "disassociateDefaultView",
        "getAccountLevelServiceConfiguration"
      ]
    },
    {
      "service": "resource-groups",
      "className": "ResourceGroups",
      "commands": [
        "cancelTagSyncTask",
        "createGroup",
        "deleteGroup"
      ]
    },
    {
      "service": "resource-groups-tagging-api",
      "className": "ResourceGroupsTaggingAPI",
      "commands": [
        "describeReportCreation",
        "getComplianceSummary",
        "getResources"
      ]
    },
    {
      "service": "robomaker",
      "className": "RoboMaker",
      "commands": [
        "batchDeleteWorlds",
        "batchDescribeSimulationJob",
        "cancelDeploymentJob"
      ]
    },
    {
      "service": "rolesanywhere",
      "className": "RolesAnywhere",
      "commands": [
        "listTagsForResource",
        "putNotificationSettings",
        "resetNotificationSettings"
      ]
    },
    {
      "service": "route-53",
      "className": "Route53",
      "commands": [
        "activateKeySigningKey",
        "associateVPCWithHostedZone",
        "changeCidrCollection"
      ]
    },
    {
      "service": "route-53-domains",
      "className": "Route53Domains",
      "commands": [
        "acceptDomainTransferFromAnotherAwsAccount",
        "associateDelegationSignerToDomain",
        "cancelDomainTransferToAnotherAwsAccount"
      ]
    },
    {
      "service": "route53-recovery-cluster",
      "className": "Route53RecoveryCluster",
      "commands": [
        "getRoutingControlState",
        "listRoutingControls",
        "updateRoutingControlState"
      ]
    },
    {
      "service": "route53-recovery-control-config",
      "className": "Route53RecoveryControlConfig",
      "commands": [
        "createCluster",
        "createControlPanel",
        "createRoutingControl"
      ]
    },
    {
      "service": "route53-recovery-readiness",
      "className": "Route53RecoveryReadiness",
      "commands": [
        "createCell",
        "createCrossAccountAuthorization",
        "createReadinessCheck"
      ]
    },
    {
      "service": "route53profiles",
      "className": "Route53Profiles",
      "commands": [
        "associateProfile",
        "associateResourceToProfile",
        "createProfile"
      ]
    },
    {
      "service": "route53resolver",
      "className": "Route53Resolver",
      "commands": [
        "associateFirewallRuleGroup",
        "associateResolverEndpointIpAddress",
        "associateResolverQueryLogConfig"
      ]
    },
    {
      "service": "rum",
      "className": "RUM",
      "commands": [
        "listTagsForResource",
        "putRumEvents",
        "tagResource"
      ]
    },
    {
      "service": "s3",
      "className": "S3",
      "commands": [
        "abortMultipartUpload",
        "completeMultipartUpload",
        "copyObject"
      ]
    },
    {
      "service": "s3-control",
      "className": "S3Control",
      "commands": [
        "associateAccessGrantsIdentityCenter",
        "createAccessGrant",
        "createAccessGrantsInstance"
      ]
    },
    {
      "service": "s3outposts",
      "className": "S3Outposts",
      "commands": [
        "createEndpoint",
        "deleteEndpoint",
        "listEndpoints"
      ]
    },
    {
      "service": "s3tables",
      "className": "S3Tables",
      "commands": [
        "createNamespace",
        "createTable",
        "createTableBucket"
      ]
    },
    {
      "service": "s3vectors",
      "className": "S3Vectors",
      "commands": [
        "createIndex",
        "createVectorBucket",
        "deleteIndex"
      ]
    },
    {
      "service": "sagemaker",
      "className": "SageMaker",
      "commands": [
        "addAssociation",
        "addTags",
        "associateTrialComponent"
      ]
    },
    {
      "service": "sagemaker-a2i-runtime",
      "className": "SageMakerA2IRuntime",
      "commands": [
        "deleteHumanLoop",
        "describeHumanLoop",
        "listHumanLoops"
      ]
    },
    {
      "service": "sagemaker-edge",
      "className": "SagemakerEdge",
      "commands": [
        "getDeployments",
        "getDeviceRegistration",
        "sendHeartbeat"
      ]
    },
    {
      "service": "sagemaker-featurestore-runtime",
      "className": "SageMakerFeatureStoreRuntime",
      "commands": [
        "batchGetRecord",
        "deleteRecord",
        "getRecord"
      ]
    },
    {
      "service": "sagemaker-geospatial",
      "className": "SageMakerGeospatial",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "sagemaker-metrics",
      "className": "SageMakerMetrics",
      "commands": [
        "batchGetMetrics",
        "batchPutMetrics"
      ]
    },
    {
      "service": "sagemaker-runtime",
      "className": "SageMakerRuntime",
      "commands": [
        "invokeEndpoint",
        "invokeEndpointAsync",
        "invokeEndpointWithResponseStream"
      ]
    },
    {
      "service": "savingsplans",
      "className": "savingsplans",
      "commands": [
        "createSavingsPlan",
        "deleteQueuedSavingsPlan",
        "describeSavingsPlanRates"
      ]
    },
    {
      "service": "scheduler",
      "className": "Scheduler",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "schemas",
      "className": "schemas",
      "commands": [
        "createDiscoverer",
        "createRegistry",
        "createSchema"
      ]
    },
    {
      "service": "secrets-manager",
      "className": "SecretsManager",
      "commands": [
        "batchGetSecretValue",
        "cancelRotateSecret",
        "createSecret"
      ]
    },
    {
      "service": "security-ir",
      "className": "SecurityIR",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "securityhub",
      "className": "SecurityHub",
      "commands": [
        "acceptAdministratorInvitation",
        "acceptInvitation",
        "batchDeleteAutomationRules"
      ]
    },
    {
      "service": "securitylake",
      "className": "SecurityLake",
      "commands": [
        "createDataLakeExceptionSubscription",
        "deleteDataLakeExceptionSubscription",
        "deregisterDataLakeDelegatedAdministrator"
      ]
    },
    {
      "service": "serverlessapplicationrepository",
      "className": "ServerlessApplicationRepository",
      "commands": [
        "createApplication",
        "createApplicationVersion",
        "createCloudFormationChangeSet"
      ]
    },
    {
      "service": "service-catalog",
      "className": "ServiceCatalog",
      "commands": [
        "acceptPortfolioShare",
        "associateBudgetWithResource",
        "associatePrincipalWithPortfolio"
      ]
    },
    {
      "service": "service-catalog-appregistry",
      "className": "ServiceCatalogAppRegistry",
      "commands": [
        "associateAttributeGroup",
        "associateResource",
        "createApplication"
      ]
    },
    {
      "service": "service-quotas",
      "className": "ServiceQuotas",
      "commands": [
        "associateServiceQuotaTemplate",
        "createSupportCase",
        "deleteServiceQuotaIncreaseRequestFromTemplate"
      ]
    },
    {
      "service": "servicediscovery",
      "className": "ServiceDiscovery",
      "commands": [
        "createHttpNamespace",
        "createPrivateDnsNamespace",
        "createPublicDnsNamespace"
      ]
    },
    {
      "service": "ses",
      "className": "SES",
      "commands": [
        "cloneReceiptRuleSet",
        "createConfigurationSet",
        "createConfigurationSetEventDestination"
      ]
    },
    {
      "service": "sesv2",
      "className": "SESv2",
      "commands": [
        "batchGetMetricData",
        "cancelExportJob",
        "createConfigurationSet"
      ]
    },
    {
      "service": "sfn",
      "className": "SFN",
      "commands": [
        "createActivity",
        "createStateMachine",
        "createStateMachineAlias"
      ]
    },
    {
      "service": "shield",
      "className": "Shield",
      "commands": [
        "associateDRTLogBucket",
        "associateDRTRole",
        "associateHealthCheck"
      ]
    },
    {
      "service": "signer",
      "className": "signer",
      "commands": [
        "addProfilePermission",
        "cancelSigningProfile",
        "describeSigningJob"
      ]
    },
    {
      "service": "simspaceweaver",
      "className": "SimSpaceWeaver",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "sms",
      "className": "SMS",
      "commands": [
        "createApp",
        "createReplicationJob",
        "deleteApp"
      ]
    },
    {
      "service": "snow-device-management",
      "className": "SnowDeviceManagement",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "snowball",
      "className": "Snowball",
      "commands": [
        "cancelCluster",
        "cancelJob",
        "createAddress"
      ]
    },
    {
      "service": "sns",
      "className": "SNS",
      "commands": [
        "addPermission",
        "checkIfPhoneNumberIsOptedOut",
        "confirmSubscription"
      ]
    },
    {
      "service": "socialmessaging",
      "className": "SocialMessaging",
      "commands": [
        "createWhatsAppMessageTemplate",
        "createWhatsAppMessageTemplateFromLibrary",
        "createWhatsAppMessageTemplateMedia"
      ]
    },
    {
      "service": "sqs",
      "className": "SQS",
      "commands": [
        "addPermission",
        "cancelMessageMoveTask",
        "changeMessageVisibility"
      ]
    },
    {
      "service": "ssm",
      "className": "SSM",
      "commands": [
        "addTagsToResource",
        "associateOpsItemRelatedItem",
        "cancelCommand"
      ]
    },
    {
      "service": "ssm-contacts",
      "className": "SSMContacts",
      "commands": [
        "acceptPage",
        "activateContactChannel",
        "createContact"
      ]
    },
    {
      "service": "ssm-guiconnect",
      "className": "SSMGuiConnect",
      "commands": [
        "deleteConnectionRecordingPreferences",
        "getConnectionRecordingPreferences",
        "updateConnectionRecordingPreferences"
      ]
    },
    {
      "service": "ssm-incidents",
      "className": "SSMIncidents",
      "commands": [
        "batchGetIncidentFindings",
        "createReplicationSet",
        "createResponsePlan"
      ]
    },
    {
      "service": "ssm-quicksetup",
      "className": "SSMQuickSetup",
      "commands": [
        "createConfigurationManager",
        "deleteConfigurationManager",
        "getConfiguration"
      ]
    },
    {
      "service": "ssm-sap",
      "className": "SsmSap",
      "commands": [
        "deleteResourcePermission",
        "deregisterApplication",
        "getApplication"
      ]
    },
    {
      "service": "sso",
      "className": "SSO",
      "commands": [
        "getRoleCredentials",
        "listAccountRoles",
        "listAccounts"
      ]
    },
    {
      "service": "sso-admin",
      "className": "SSOAdmin",
      "commands": [
        "attachCustomerManagedPolicyReferenceToPermissionSet",
        "attachManagedPolicyToPermissionSet",
        "createAccountAssignment"
      ]
    },
    {
      "service": "sso-oidc",
      "className": "SSOOIDC",
      "commands": [
        "createToken",
        "createTokenWithIAM",
        "registerClient"
      ]
    },
    {
      "service": "storage-gateway",
      "className": "StorageGateway",
      "commands": [
        "activateGateway",
        "addCache",
        "addTagsToResource"
      ]
    },
    {
      "service": "sts",
      "className": "STS",
      "commands": [
        "assumeRole",
        "assumeRoleWithSAML",
        "assumeRoleWithWebIdentity"
      ]
    },
    {
      "service": "supplychain",
      "className": "SupplyChain",
      "commands": [
        "getDataIntegrationEvent",
        "getDataIntegrationFlowExecution",
        "listDataIntegrationEvents"
      ]
    },
    {
      "service": "support",
      "className": "Support",
      "commands": [
        "addAttachmentsToSet",
        "addCommunicationToCase",
        "createCase"
      ]
    },
    {
      "service": "support-app",
      "className": "SupportApp",
      "commands": [
        "createSlackChannelConfiguration",
        "deleteAccountAlias",
        "deleteSlackChannelConfiguration"
      ]
    },
    {
      "service": "swf",
      "className": "SWF",
      "commands": [
        "countClosedWorkflowExecutions",
        "countOpenWorkflowExecutions",
        "countPendingActivityTasks"
      ]
    },
    {
      "service": "synthetics",
      "className": "synthetics",
      "commands": [
        "associateResource",
        "createCanary",
        "createGroup"
      ]
    },
    {
      "service": "taxsettings",
      "className": "TaxSettings",
      "commands": [
        "batchDeleteTaxRegistration",
        "batchGetTaxExemptions",
        "batchPutTaxRegistration"
      ]
    },
    {
      "service": "textract",
      "className": "Textract",
      "commands": [
        "analyzeDocument",
        "analyzeExpense",
        "analyzeID"
      ]
    },
    {
      "service": "timestream-influxdb",
      "className": "TimestreamInfluxDB",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "timestream-query",
      "className": "TimestreamQuery",
      "commands": [
        "cancelQuery",
        "createScheduledQuery",
        "deleteScheduledQuery"
      ]
    },
    {
      "service": "timestream-write",
      "className": "TimestreamWrite",
      "commands": [
        "createBatchLoadTask",
        "createDatabase",
        "createTable"
      ]
    },
    {
      "service": "tnb",
      "className": "tnb",
      "commands": [
        "cancelSolNetworkOperation",
        "createSolFunctionPackage",
        "createSolNetworkInstance"
      ]
    },
    {
      "service": "transcribe",
      "className": "Transcribe",
      "commands": [
        "createCallAnalyticsCategory",
        "createLanguageModel",
        "createMedicalVocabulary"
      ]
    },
    {
      "service": "transcribe-streaming",
      "className": "TranscribeStreaming",
      "commands": [
        "getMedicalScribeStream",
        "startCallAnalyticsStreamTranscription",
        "startMedicalScribeStream"
      ]
    },
    {
      "service": "transfer",
      "className": "Transfer",
      "commands": [
        "createAccess",
        "deleteAccess",
        "deleteHostKey"
      ]
    },
    {
      "service": "translate",
      "className": "Translate",
      "commands": [
        "createParallelData",
        "deleteParallelData",
        "deleteTerminology"
      ]
    },
    {
      "service": "trustedadvisor",
      "className": "TrustedAdvisor",
      "commands": [
        "batchUpdateRecommendationResourceExclusion",
        "getOrganizationRecommendation",
        "getRecommendation"
      ]
    },
    {
      "service": "verifiedpermissions",
      "className": "VerifiedPermissions",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "voice-id",
      "className": "VoiceID",
      "commands": [
        "associateFraudster",
        "createWatchlist",
        "deleteFraudster"
      ]
    },
    {
      "service": "vpc-lattice",
      "className": "VPCLattice",
      "commands": [
        "batchUpdateRule",
        "deleteAuthPolicy",
        "deleteResourcePolicy"
      ]
    },
    {
      "service": "waf",
      "className": "WAF",
      "commands": [
        "createByteMatchSet",
        "createGeoMatchSet",
        "createIPSet"
      ]
    },
    {
      "service": "waf-regional",
      "className": "WAFRegional",
      "commands": [
        "associateWebACL",
        "createByteMatchSet",
        "createGeoMatchSet"
      ]
    },
    {
      "service": "wafv2",
      "className": "WAFV2",
      "commands": [
        "associateWebACL",
        "checkCapacity",
        "createAPIKey"
      ]
    },
    {
      "service": "wellarchitected",
      "className": "WellArchitected",
      "commands": [
        "associateLenses",
        "associateProfiles",
        "createLensShare"
      ]
    },
    {
      "service": "wisdom",
      "className": "Wisdom",
      "commands": [
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    {
      "service": "workdocs",
      "className": "WorkDocs",
      "commands": [
        "abortDocumentVersionUpload",
        "activateUser",
        "addResourcePermissions"
      ]
    },
    {
      "service": "workmail",
      "className": "WorkMail",
      "commands": [
        "associateDelegateToResource",
        "associateMemberToGroup",
        "assumeImpersonationRole"
      ]
    },
    {
      "service": "workmailmessageflow",
      "className": "WorkMailMessageFlow",
      "commands": [
        "getRawMessageContent",
        "putRawMessageContent"
      ]
    },
    {
      "service": "workspaces",
      "className": "WorkSpaces",
      "commands": [
        "acceptAccountLinkInvitation",
        "associateConnectionAlias",
        "associateIpGroups"
      ]
    },
    {
      "service": "workspaces-instances",
      "className": "WorkspacesInstances",
      "commands": [
        "associateVolume",
        "createVolume",
        "createWorkspaceInstance"
      ]
    },
    {
      "service": "workspaces-thin-client",
      "className": "WorkSpacesThinClient",
      "commands": [
        "createEnvironment",
        "deleteDevice",
        "deleteEnvironment"
      ]
    },
    {
      "service": "workspaces-web",
      "className": "WorkSpacesWeb",
      "commands": [
        "expireSession",
        "getSession",
        "listSessions"
      ]
    },
    {
      "service": "xray",
      "className": "XRay",
      "commands": [
        "batchGetTraces",
        "cancelTraceRetrieval",
        "createGroup"
      ]
    }
  ]
}
