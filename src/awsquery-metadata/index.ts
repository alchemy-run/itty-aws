// Auto-generated by generate-awsquery-metadata.ts. DO NOT EDIT BY HAND.

export interface AwsQueryServiceMeta {
  serviceId: string;
  serviceName: string;
  version: string;
  endpointPrefix?: string;
  operations: Record<string, OperationMeta>;
  shapes: Record<string, ShapeMeta>;
}

export interface OperationMeta {
  name: string;
  input?: string;
  output?: string;
  responseWrapper?: string;
}

export interface ShapeMeta {
  type: ShapeKind;
  xmlName?: string;
  members?: Record<string, MemberMeta>;
  member?: MemberMeta;
  key?: MemberMeta;
  value?: MemberMeta;
  enum?: string[];
  flattened?: boolean;
}

export interface MemberMeta {
  target: string;
  locationName?: string;
  queryName?: string;
  flattened?: boolean;
  timestampFormat?: "iso8601" | "epoch-seconds" | "http-date";
}

export type ShapeKind =
  | "structure"
  | "list"
  | "map"
  | "string"
  | "integer"
  | "boolean"
  | "timestamp"
  | "blob"
  | "enum"
  | "double"
  | "long"
  | "float"
  | "union";

// Lazy-loaded service metadata cache
const serviceMetadata = new Map<string, AwsQueryServiceMeta>();

export function getServiceMeta(serviceId: string): AwsQueryServiceMeta | null {
  if (!serviceMetadata.has(serviceId)) {
    try {
      // Normalize service ID for file lookup
      const fileName = serviceId.toLowerCase().replace(/\s+/g, "-");
      // Try to import the metadata - first try compiled .js, then fallback to .ts for dev
      let meta;
      try {
        meta = require(`./${fileName}.js`).metadata;
      } catch {
        // Fallback to TypeScript file for development/testing
        meta = require(`./${fileName}.ts`).metadata;
      }
      serviceMetadata.set(serviceId, meta);
      return meta;
    } catch (_error) {
      console.warn(`No AWS Query metadata found for service: ${serviceId}`);
      return null;
    }
  }
  return serviceMetadata.get(serviceId) || null;
}

// Auto-generated list of supported services
export const SUPPORTED_SERVICES = [
  "auto-scaling",
  "cloudwatch",
  "sns",
  "elastic-beanstalk",
  "neptune",
  "cloudsearch",
  "redshift",
  "iam",
  "elastic-load-balancing-v2",
  "elastic-load-balancing",
  "docdb",
  "ses",
  "cloudformation",
  "elasticache",
  "rds",
  "sts",
];

// Service ID to file name mapping
const serviceIdToFileName = new Map([
  ["Auto Scaling", "auto-scaling"],
  ["CloudWatch", "cloudwatch"],
  ["SNS", "sns"],
  ["Elastic Beanstalk", "elastic-beanstalk"],
  ["Neptune", "neptune"],
  ["CloudSearch", "cloudsearch"],
  ["Redshift", "redshift"],
  ["IAM", "iam"],
  ["Elastic Load Balancing v2", "elastic-load-balancing-v2"],
  ["Elastic Load Balancing", "elastic-load-balancing"],
  ["DocDB", "docdb"],
  ["SES", "ses"],
  ["CloudFormation", "cloudformation"],
  ["ElastiCache", "elasticache"],
  ["RDS", "rds"],
  ["STS", "sts"],
]);

export function getServiceFileName(serviceId: string): string | undefined {
  return serviceIdToFileName.get(serviceId);
}
